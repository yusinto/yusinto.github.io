{"componentChunkName":"component---src-pages-post-template-js","path":"/return-graphql-enums","result":{"data":{"site":{"siteMetadata":{"blurb":"Frontend Engineer @ LaunchDarkly. Book addict and tea lover. Passionate about react graphql and making things simple and fast."}},"markdownRemark":{"html":"<p>In my attempt to learn Relay and GraphQL, I recently created a simple movie app. It is a single page app in both senses -\nit only has one page and it's all client side (excuse the pun!). This single page displays a list of movie titles and their genres.\nIt also has a select box to filter the list by genre.</p>\n<p>This blog is not an intro to graphql or relay, that will be covered sometime in the near future. It's about how to return\na list of enum values declared in our graphql schema to the client. So in a nutshell:</p>\n<h3 id=\"the-problem\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Problem</h3>\n<p>Given a GraphQLEnumType in the schema, how do we return all the values in that enum type as a list to the client?</p>\n<h3 id=\"the-solution\"><a href=\"#the-solution\" aria-label=\"the solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Solution</h3>\n<p>The premise is straight forward. We need to populate our genre select box with all the enum values declared in the schema. However, I can't seem to\nfind any posts/articles/documentation that describe how I can do this. So I set out on my own exciting investigation.</p>\n<hr>\n<h2 id=\"the-schema\"><a href=\"#the-schema\" aria-label=\"the schema permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Schema</h2>\n<p>The genre enum type looks like this. You can find the complete schema <a href=\"https://github.com/yusinto/movie-time/blob/master/src/graphql/schema.js\" target=\"_blank\" rel=\"nofollow\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\">const genreEnum <span class=\"token operator\">=</span> new GraphQLEnumType<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> 'Genre'<span class=\"token punctuation\">,</span>\n  <span class=\"token attr-name\">values</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">ACTION</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token attr-name\">value</span><span class=\"token punctuation\">:</span> 'Action'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attr-name\">ADVENTURE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token attr-name\">value</span><span class=\"token punctuation\">:</span> 'Adventure'\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token operator\">...</span>\n    <span class=\"token attr-name\">WESTERN</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token attr-name\">value</span><span class=\"token punctuation\">:</span> 'Western'\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Our graphql endpoint should return a list like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'Action'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Adventure'</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Western'</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Using the chrome debugger, I discovered that the genreEnum object has a property called <b>_values</b>. I'm guessing the underscore\nprefix means that it's a private property by convention, so we might not be doing the best thing here! However due to the lack of\nalternatives, it will have to do for now. Your resolve method should then look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function-variable function\">resolve</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> genreEnum<span class=\"token punctuation\">.</span>_values<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And that's it! You can find the complete code on <a href=\"https://github.com/yusinto/movie-time\" target=\"_blank\" rel=\"nofollow\">github</a>.</p>\n<p>Happy coding!</p>\n<hr>","timeToRead":2,"frontmatter":{"date":"April 13, 2016","path":"/return-graphql-enums","title":"Returning graphql enum values to the client","files":null,"tags":["react","relay","graphql","GraphQLEnumType"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}