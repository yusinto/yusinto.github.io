{"componentChunkName":"component---src-pages-post-template-js","path":"/relay-schema-stitching","result":{"data":{"site":{"siteMetadata":{"blurb":"Frontend Engineer @ LaunchDarkly. Book addict and tea lover. Passionate about react graphql and making things simple and fast."}},"markdownRemark":{"html":"<p>Schema stitching was introduced by Apollo, so there is a general misconception that it\nonly works with the apollo stack but it works with relay as well! In this blog\nI'll show you how to stitch your relay schema with any remote graphql schema.</p>\n<p>You can find the complete project in <a href=\"https://github.com/yusinto/relay-compiler-plus/tree/master/example-stitching\" target=\"_blank\" rel=\"nofollow\">github</a>.</p>\n<h2 id=\"goal\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h2>\n<p>Given a local schema that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Query</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">user</span><span class=\"token punctuation\">:</span> User\n  <span class=\"token attr-name\">place</span><span class=\"token punctuation\">:</span> Place\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">email</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">favouritePlaces</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Place<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Place</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token comment\">#business: Business # this is remote</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Stitch it so that business details are coming from a remote graphql server, in this case from <a href=\"https://eu1.prisma.sh/public-nickelwarrior-830/wendarie-prisma/dev\" target=\"_blank\" rel=\"nofollow\">prisma</a>.</p>\n<h2 id=\"step-1-install-graphql-cli\"><a href=\"#step-1-install-graphql-cli\" aria-label=\"step 1 install graphql cli permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Install graphql-cli</h2>\n<p>We'll use graphql cli to download the remote schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D graphql-cli</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"step-2-download-the-remote-schema\"><a href=\"#step-2-download-the-remote-schema\" aria-label=\"step 2 download the remote schema permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Download the remote schema</h2>\n<p>Graphql cli looks for a .graphqlconfig.yml by default, so we'll create that file\nand it looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">schemaPath</span><span class=\"token punctuation\">:</span> ./remote.schema.graphql\n<span class=\"token key atrule\">extensions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//eu1.prisma.sh/public<span class=\"token punctuation\">-</span>nickelwarrior<span class=\"token punctuation\">-</span>830/wendarie<span class=\"token punctuation\">-</span>prisma/dev</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, our business details are hosted in <a href=\"https://eu1.prisma.sh/public-nickelwarrior-830/wendarie-prisma/dev\" target=\"_blank\" rel=\"nofollow\">prisma</a>\nbut you can use any graphql endpoint. <a href=\"https://prisma.io\" target=\"_blank\" rel=\"nofollow\">Prisma</a> is created by the guys from\ngraphcool, check it out if you haven't!</p>\n<p>Run the following to download the remote schema to ./remote.schema.graphql:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">graphql get-schema</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2 id=\"step-3-stitch\"><a href=\"#step-3-stitch\" aria-label=\"step 3 stitch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Stitch</h2>\n<p>The stitching part is standard, following <a href=\"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html\" target=\"_blank\" rel=\"nofollow\">Apollo's doco</a>:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>mergeSchemas<span class=\"token punctuation\">,</span> makeRemoteExecutableSchema<span class=\"token punctuation\">,</span> makeExecutableSchema<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-tools'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>importSchema<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql-import'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>HttpLink<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-link-http'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> localSchema <span class=\"token keyword\">from</span> <span class=\"token string\">'./localSchema'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> uri <span class=\"token operator\">=</span> <span class=\"token string\">'https://eu1.prisma.sh/public-nickelwarrior-830/wendarie-prisma/dev'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>uri<span class=\"token punctuation\">,</span> fetch<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// remote.schema.graphql is downloaded in the previous step</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> remoteTypeDefs <span class=\"token operator\">=</span> <span class=\"token function\">importSchema</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./remote.schema.graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">const</span> remoteSchema <span class=\"token operator\">=</span> <span class=\"token function\">makeRemoteExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">:</span> <span class=\"token function\">makeExecutableSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>typeDefs<span class=\"token punctuation\">:</span> remoteTypeDefs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  link<span class=\"token punctuation\">,</span> <span class=\"token comment\">// GOTCHA: you gotta use apollo link, not fetcher!</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Our local schema contains one user with her favourite places.</span>\n<span class=\"token comment\">// Prisma contains the business details of those places.</span>\n<span class=\"token comment\">// We connect our places with prisma's businesses using this link.</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> linkTypeDefs <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>  extend type Place {\n    business: Business\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">mergeSchemas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schemas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>localSchema<span class=\"token punctuation\">,</span> remoteSchema<span class=\"token punctuation\">,</span> linkTypeDefs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    Place<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      business<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        fragment<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fragment PlaceFragment on Place { id }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></span>        <span class=\"token function-variable function\">resolve</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">place<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          info<span class=\"token punctuation\">.</span>mergeInfo<span class=\"token punctuation\">.</span><span class=\"token function\">delegateToSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            schema<span class=\"token punctuation\">:</span> remoteSchema<span class=\"token punctuation\">,</span>\n            operation<span class=\"token punctuation\">:</span> <span class=\"token string\">'query'</span><span class=\"token punctuation\">,</span>\n            fieldName<span class=\"token punctuation\">:</span> <span class=\"token string\">'business'</span><span class=\"token punctuation\">,</span>\n            args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              where<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                publicId<span class=\"token punctuation\">:</span> place<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// local Place.id maps to remote Business.publicId</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">,</span>\n            info<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> result<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Important bits</strong>:</p>\n<ul>\n<li>Line 11: Import the remote schema we downloaded from step 2 using graphql-import. This gets\nfed into makeRemoteExecutableSchema.</li>\n<li>Line 14: Use apollo-link to resolve remote queries! If you look at the documentation, there is\na second option of using a fetcher. However doing this will forward the Document AST\nto the remote server instead of the query string, which breaks most graphql servers except\napollo-server.</li>\n<li>Line 20: Extend the Place type to include a reference to Business, which will be resolved to\nthe remote server via mergeSchemas in line 29.</li>\n<li>Line 29: This defines the resolver for the business field. The key here is the <code class=\"language-text\">delegateToSchema</code>\nmethod which gives you access to the current <code class=\"language-text\">Place</code> being queried based on the fragment defined\nin line 30, and access to the remote schema so you can query the remote server with any queries\nyou want. In this instance, the query we want to execute on prisma is equivalent to:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  business<span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">publicId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"$place.id\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># place.id is supplied by fragment on line 30 </span>\n    id\n    name\n    email\n    address\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"step-4-compile\"><a href=\"#step-4-compile\" aria-label=\"step 4 compile permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Compile</h2>\n<p>Say we have a relay query like so:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query client_index_Query {\n        user {\n          email\n          name\n          favouritePlaces {\n<span class=\"gatsby-highlight-code-line\">              business { # look ma, remote schema field!</span>                  name\n                  email\n                  address\n              }\n          }\n        }\n    }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// most props omitted for brevity</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QueryRenderer</span></span>\n    <span class=\"token attr-name\">environment</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>relayEnvironment<span class=\"token punctuation\">}</span></span>\n    <span class=\"token attr-name\">query</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We'll compile our relay queries using <a href=\"https://github.com/yusinto/relay-compiler-plus\" target=\"_blank\" rel=\"nofollow\">relay-compiler-plus</a>.\nThis way we'll get schema stitching plus persisted queries for free! You can still use the standard relay-compiler,\nbut you won't get persisted queries (not yet anyway. I have submitted a <a href=\"https://github.com/facebook/relay/pull/2354\" target=\"_blank\" rel=\"nofollow\">pr</a>)\nand you can't compile directly from graphql-js.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D relay-compiler-plus</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Add the following npm command to your package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token string\">\"rcp\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"relay-compiler-plus --webpackConfig path/to/webpack.config.js --src src\"</span>,</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Ensure the webpack entry is pointing to mergedSchema.js from step 3. Then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run <span class=\"token function\">rcp</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This should produce the standard relay query files plus a queryMap.json file under src. You'll see in queryMap.json that\nthe remote query exists as if it's local!</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>It is possible to use relay and schema stitching. It is surprisingly straight forward thanks to the tools provided\nby Apollo. It is impossible to document every single step in this blog without boring everyone to death. People don't read\nblogs more than 4 mins long these days... so perhaps it's best to see it in action. </p>\n<p>Check out the full project on <a href=\"https://github.com/yusinto/relay-compiler-plus/tree/master/example-stitching\" target=\"_blank\" rel=\"nofollow\">github</a>.</p>\n<p>Happy stitching!</p>\n<img alt=\"Loui stitch\" src=\"/static/loui-stitch-c058c54d16587be41ae99fcbe6003743.jpg\" id=\"markdownImage\"/>\n<hr>","timeToRead":4,"frontmatter":{"date":"April 27, 2018","path":"/relay-schema-stitching","title":"Relay Schema Stitching with Persisted Queries","files":[{"name":"loui-stitch","publicURL":"/static/loui-stitch-c058c54d16587be41ae99fcbe6003743.jpg"},{"name":"hero","publicURL":"/static/hero-062c890a635f05092ed46900ff72708b.png"}],"tags":["relay","schema","stitching","graphql","apollo","react","js","javascript","prisma","graphcool","persisted","queries"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}