{"componentChunkName":"component---src-pages-post-template-js","path":"/scheduling-feature-flag-deployment","result":{"data":{"site":{"siteMetadata":{"blurb":"Frontend Engineer @ LaunchDarkly. Book addict and tea lover. Passionate about react graphql and making things simple and fast."}},"markdownRemark":{"html":"<p>Use Launch Darkly? Love their feature flagging and a/b testing features? Like reading blog posts that sounds like an informercial? Umm...</p>\n<p>Anyway I use Launch Darkly at my workplace (I work at an airline company spelt with a Q and I live in Sydney Australia) and I recently faced a\nchallenge with zero dark thirty deployments.</p>\n<img alt=\"Zero dark what?\" src=\"/static/tropic-f1e4467c77ca99aa138b609a47a35be2.jpg\" id=\"markdownImage\"/>\n<p>No no what I meant was I had feature flagging in place in my app, and I had to turn flags on (and off) at unearthly hours like 12:01 AM. So being a hacker,\nI wasn't going to lie down and wait for 12:01 AM to come by and turn on a switch. No sir! I am much much smarter than that. Instead, I spent sleepless nights\ndoing 30 hour days to write a node app that will do it for me. Take that zero dark thirty deployments!</p>\n<h2 id=\"the-problem\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem</h2>\n<p>Need to turn flags on/off automatically at a specified scheduled time.  </p>\n<h2 id=\"the-solution\"><a href=\"#the-solution\" aria-label=\"the solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The solution</h2>\n<p>A cron job that uses <a href=\"http://apidocs.launchdarkly.com/docs/update-feature-flag\" target=\"_blank\" rel=\"nofollow\">launch darkly apis</a> to automatically turn on/off flags.</p>\n<h2 id=\"enough-talk-show-me-some-code\"><a href=\"#enough-talk-show-me-some-code\" aria-label=\"enough talk show me some code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enough talk, show me some code</h2>\n<p>Using the rest apis, you can update your flag with something  like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Accept<span class=\"token punctuation\">:</span> <span class=\"token string\">'*/*'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  Authorization<span class=\"token punctuation\">:</span> <span class=\"token string\">'your-api-key'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'accept-encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip, deflate'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  op<span class=\"token punctuation\">:</span> <span class=\"token string\">'replace'</span><span class=\"token punctuation\">,</span>\n  path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/environments/test'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://app.launchdarkly.com/api/v2/flags/default/your-key'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">'PATCH'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    body\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Of course you'll need to add some defensive programming for error catching\nand retries plus configuration for test and production environments\nplus notifications when updates are successful/not successful, and the\nlist goes on.</p>\n<p>If you go down this path, you soon realise that this is not a trivial\ntask by any means. An ad-hoc solution like this involves hard coding\nflag names and continual updates which are almost as bad as waking up at\n12:01 AM to do the deployments manually.</p>\n<p>Enter <a href=\"https://github.com/yusinto/ld-scheduler\" target=\"_blank\" rel=\"nofollow\">ld-scheduler</a>.</p>\n<h2 id=\"ld-scheduler\"><a href=\"#ld-scheduler\" aria-label=\"ld scheduler permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ld-scheduler</h2>\n<p>With ld-scheduler, you do this from your node app:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> ld-scheduler</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>then</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ldScheduler <span class=\"token keyword\">from</span> <span class=\"token string\">'ld-scheduler'</span><span class=\"token punctuation\">;</span>\n\nldScheduler<span class=\"token punctuation\">.</span><span class=\"token function\">runEveryXSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  environment<span class=\"token punctuation\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n  apiKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'your-secret-api-key'</span><span class=\"token punctuation\">,</span>\n  slack<span class=\"token punctuation\">:</span> <span class=\"token string\">'your-slack-webhook-url'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>and you schedule your flags through launch darkly's dashboard:</p>\n<img alt=\"LaunchDarkly dashboard scheduling config\" src=\"/static/ld-scheduler-flag-settings-resized-76c5996c0023abfd1ddb827f7d737002.png\" id=\"markdownImage\"/>\n<p><strong>HACK</strong>: We hijack the description field to store our scheduling config as a json object where:</p>\n<ul>\n    <li>taskType is killSwitch</li>\n    <li>value is true (kill switch on) or false (kill switch off)</li>\n    <li>\n        targetDeploymentDateTime must be in YYYY-MM-DD HH:mm Z\n        <p>\n            <b>NOTE:</b> the UTC offset at the end is especially important because ld-scheduler uses moment which will use the host's timezone if it is not specified.\n             That means if you deploy ld-scheduler to the cloud say on aws lambda where the machine clock is set to UTC timezone, then your flag will be deployed at\n             UTC time, which is probably not what you want unless you are living in London!\n        </p>\n    </li>\n    <li>description is a textual string for the purpose of human readability</li>\n</ul>\n<p><strong><em>AND</em></strong> you need to set a tag called `${yourEnv}-scheduled`. For example, if you are scheduling a flag in the test environment,\nyour tag should be called \"test-scheduled\". Likewise if you are scheduling it in production, you need to add a \"production-scheduled\" tag.</p>\n<p>When ld-scheduler runs, it will set your flag on/off according the the json configuration. It will also remove the `${yourEnv}-scheduled` tag so\nit does not get reprocessed. If there's no other scheduled tags, then ld-scheduler also sets the \"Description\" field\nto the json.description string, thereby deleting the json config replacing it with the description string.</p>\n<p>This way, you can safely run 2 instances of ld-scheduler; one for each environment without having to worry about race conditions.</p>\n<h2 id=\"extra\"><a href=\"#extra\" aria-label=\"extra permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extra</h2>\n<p>ld-scheduler supports a second taskType \"fallThoughRollout\" which you can use to set the default fallThrough rollout percentage:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"taskType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fallThroughRollout\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"targetDeploymentDateTime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-03-3 02:33\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Human readable flag description\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"variation\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"weight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">90000</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"variation\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"weight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>where variation 0 is true and variation 1 is false. Weight is in mili-percentage (if there's such a word) i.e. 90000 === 90% and 10000 === 10%.\nOf course you would enter this json object in the \"Description\" field of your flag settings in launch darkly's dashboard\n<strong><em>AND</em></strong> set a `${yourEnv}-scheduled` tag.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Check out the <a href=\"https://github.com/yusinto/ld-scheduler/tree/master/example\" target=\"_blank\" rel=\"nofollow\">sample code</a> for a working example and let me know if this is useful (or not)!</p>\n<hr>","timeToRead":3,"frontmatter":{"date":"February 28, 2017","path":"/scheduling-feature-flag-deployment","title":"Scheduling Feature Flag Deployment","files":[{"name":"tropic","publicURL":"/static/tropic-f1e4467c77ca99aa138b609a47a35be2.jpg"},{"name":"ld-scheduler-flag-settings-resized","publicURL":"/static/ld-scheduler-flag-settings-resized-76c5996c0023abfd1ddb827f7d737002.png"}],"tags":["schedule","feature","flag","deployment","ld","scheduler","automate","automation","scheduling"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}