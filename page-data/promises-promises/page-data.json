{"componentChunkName":"component---src-pages-post-template-js","path":"/promises-promises","result":{"data":{"site":{"siteMetadata":{"blurb":"Frontend Engineer @ LaunchDarkly. Book addict and tea lover. Passionate about react graphql and making things simple and fast."}},"markdownRemark":{"html":"<p>So you think you know how promises work? Someone ever comes to you\nwith a little trivia called \"what's the sequence of console logs from this\npiece of async code\"? And no matter how hard you try you never get\nit right?</p>\n<p>I experienced this at work last week and in process learnt something new about\npromises which I would like to share.</p>\n<p>There are few (if any) that explain the scheduling aspects of Promises though.\nPerhaps because it's not a hot topic. It's too low level. You need a\nshot of vodka to understand it. Bla bla.. so here goes nothing.</p>\n<p>This is not an intro to promises or how to use them. There are plenty\nof blogs out there explaining that in complete pornographic detail (give me\nthat vodka!). No sir, today I'll be talking about the temporal aspects\nof promises i.e. \"when\" your code gets executed and why.</p>\n<p>It's actually very interesting!</p>\n<h2 id=\"goal\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h2>\n<p>Understand when parts of your promise gets executed and why.</p>\n<h2 id=\"step-1-anatomy-of-a-promise\"><a href=\"#step-1-anatomy-of-a-promise\" aria-label=\"step 1 anatomy of a promise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Anatomy of a Promise</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// this is called the \"executor\"</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// this is called the success handler</span>\n    <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Wanna guess what the output is? You can run the code <a href=\"https://repl.it/repls/WelloffSeveralPlatypus\" target=\"_blank\" rel=\"nofollow\">here</a>\nand see for yourself. Or I can just tell you. It is: 1 3 4 6 2 5.</p>\n<p>It doesn’t matter if you guessed right or wrong. It matters if you understand why this is the output.</p>\n<h2 id=\"step-2-the-executor\"><a href=\"#step-2-the-executor\" aria-label=\"step 2 the executor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: The executor</h2>\n<p>It is always run immediately! The moment you new up a Promise, the function\nyou specify in the constructor i.e. the executor gets run immediately in the current tick.</p>\n<p>So 1 gets printed, then resolve gets called. Calling resolve marks the promise as\nfulfilled and that’s it. It does not trigger anything else.</p>\n<p>Then 3 gets printed. The current tick continues out of the promise constructor and prints 4.</p>\n<h2 id=\"step-3-then\"><a href=\"#step-3-then\" aria-label=\"step 3 then permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: .then</h2>\n<p>This is the interesting part. Remember the promise was resolved? When you\ncall .then on a resolved promise, the success handler gets scheduled in\nthe job queue. What the hell? What’s a job queue? Never heard of it. Am\nI making this shit up? It’s <a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues\" target=\"_blank\" rel=\"nofollow\">real</a>\nmy friend. Keep reading.</p>\n<h2 id=\"step-4-the-job-queue\"><a href=\"#step-4-the-job-queue\" aria-label=\"step 4 the job queue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: The job queue</h2>\n<p>You must be familiar with the event loop and the event queue (if not, google them!)?\nThis gives javascript that infamous single-threaded reputation. Each iteration\nof this loop is called a “tick”. Each tick processes a message from the event queue.\nSo is the event queue the same as the job queue?</p>\n<p>No it is not. The job queue is a completely separate queue. More importantly,\nmessages in this queue are processed immediately at the end of each tick\nbefore the beginning of the next tick. Each tick has its own job queue.</p>\n<p>It’s like jumping the event queue. Success handlers for promises are\nscheduled into this job queue. They get executed before the next message\nin the event queue.</p>\n<p>So with this newfound wisdom, our success handler above gets scheduled\nin the job queue, to be run at the end of the tick.</p>\n<h2 id=\"step-5-what-goes-into-the-event-queue\"><a href=\"#step-5-what-goes-into-the-event-queue\" aria-label=\"step 5 what goes into the event queue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: What goes into the event queue?</h2>\n<p>Glad you asked. Things like setTimeout callbacks and event listeners are\nscheduled into the event queue. So in our example above, console.log(5)\nis scheduled into the event queue, even when the delay is 0ms. That means\nthis gets run after the success handler because the event queue is processed\nin the next tick.</p>\n<h2 id=\"step-6-booooringg\"><a href=\"#step-6-booooringg\" aria-label=\"step 6 booooringg permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Booooringg</h2>\n<p>Ok ok last we saw our program, it output 4, so what’s next? We saw .then\nand setTimeout are asynchronous i.e. they get scheduled into the job queue\nand the event queue respectively, so the current tick continues and executes\nconsole.log(6). The tick ends, or has it? We still have the job queue at\nthe of the tick, so no it has not ended yet.</p>\n<p>Our program then executes the success handler, which is the first and only\njob in the job queue. This outputs 2. Then the tick ends.</p>\n<p>Finally our program continues to the next tick and executes console.log(5).\nThe end!</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Best have lotsa vodka when talking about promises. Thanks for reading!</p>\n<hr>","timeToRead":3,"frontmatter":{"date":"September 18, 2017","path":"/promises-promises","title":"Javascript Job Queues and Promises","files":null,"tags":["javascript","promises","job","queues","js","asynchronous","event","loop"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}