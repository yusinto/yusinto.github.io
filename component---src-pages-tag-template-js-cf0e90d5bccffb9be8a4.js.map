{"version":3,"sources":["webpack:///./src/pages/tagTemplate.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","Tags","_ref","pageContext","data","tag","allMarkdownRemark","_data$allMarkdownRema","edges","totalCount","tagHeader","a","createElement","map","_ref2","_node$frontmatter","node","frontmatter","path","title","key","to","propTypes","PropTypes","shape","string","isRequired","number","arrayOf"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,IAIMW,EAAO,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,YAAaC,EAAUF,EAAVE,KACnBC,EAAOF,EAAPE,IAEP,GAAGD,EAAKE,kBAAmB,KAAAC,EACGH,EAAKE,kBAA1BE,EADkBD,EAClBC,MAAOC,EADWF,EACXE,WACRC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEIJ,EAFJ,IAIf,OACET,EAAAe,EAAAC,cAAA,WACEhB,EAAAe,EAAAC,cAAA,UAAKF,GACLd,EAAAe,EAAAC,cAAA,UACGJ,EAAMK,IAAI,SAAAC,GAAY,IAAAC,EAAAD,EAAVE,KACgBC,YAApBC,EADcH,EACdG,KAAMC,EADQJ,EACRI,MACb,OACEvB,EAAAe,EAAAC,cAAA,MAAIQ,IAAKF,GACPtB,EAAAe,EAAAC,cAACZ,EAAA,KAAD,CAAMqB,GAAIH,GAAOC,OAKzBvB,EAAAe,EAAAC,cAACZ,EAAA,KAAD,CAAMqB,GAAG,SAAT,aAKN,MAAO,wBAGTpB,EAAKqB,UAAY,CACfnB,YAAaoB,IAAUC,MAAM,CAC3BnB,IAAKkB,IAAUE,OAAOC,aAExBtB,KAAMmB,IAAUC,MAAM,CACpBlB,kBAAmBiB,IAAUC,MAAM,CACjCf,WAAYc,IAAUI,OAAOD,WAC7BlB,MAAOe,IAAUK,QACfL,IAAUC,MAAM,CACdR,KAAMO,IAAUC,MAAM,CACpBP,YAAaM,IAAUC,MAAM,CAC3BN,KAAMK,IAAUE,OAAOC,WACvBP,MAAOI,IAAUE,OAAOC,iBAG3BA,iBAMIzB,YAER,IAAMP,EAAS","file":"component---src-pages-tag-template-js-cf0e90d5bccffb9be8a4.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link, graphql} from 'gatsby'\n\nconst Tags = ({pageContext, data}) => {\n  const {tag} = pageContext\n\n  if(data.allMarkdownRemark) {\n    const {edges, totalCount} = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${\n      totalCount === 1 ? '' : 's'\n      } tagged with '${tag}'`\n\n    return (\n      <div>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({node}) => {\n            const {path, title} = node.frontmatter\n            return (\n              <li key={path}>\n                <Link to={path}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        <Link to='/tags'>All tags</Link>\n      </div>\n    )\n  }\n\n  return 'markdown edges null!';\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: {frontmatter: {tags: {in: [$tag]}, published: {eq: true}}}\n        ) {\n            totalCount\n            edges {\n                node {\n                    frontmatter {\n                        title\n                        path\n                    }\n                }\n            }\n        }\n    }\n`"],"sourceRoot":""}