{"version":3,"sources":["webpack:///./src/images/icon-512x512.png","webpack:///./src/utils/sc-utils.js","webpack:///./node_modules/ellipsize/index.js","webpack:///./src/components/tagList.js","webpack:///./src/components/authorBio.js","webpack:///./src/pages/postTemplate.js"],"names":["module","exports","ContentStyles","css","defaults","ellipse","chars","max","truncate","str","opts","length","key","last","c","midMax","Math","floor","computedMax","i","len","charAt","indexOf","substring","ellipsize","List","styled","ul","ListItem","li","tags","map","t","to","memoizedEllipsize","memoizeOne","blurb","RootDiv","div","Bio","ProfilePic","profilePic","Name","Blurb","short","medium","DateReadMinutes","MidDot","span","datePosted","timeToRead","blurbShort","blurbMedium","Title","h1","Content","Hero","img","postTemplateQuery","data","markdownRemark","site","siteMetadata","frontmatter","title","date","files","html","hero","find","f","name","alt","src","publicURL","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---src-pages-post-template-js-b087d01989cd51ebb5a6.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/icon-512x512-fe7d1fb00f5ab5cc590685767bd2310d.png\";","import {css} from 'styled-components'\n\nexport const ContentStyles = css`\n  margin: 0 auto;\n  max-width: 740px;\n  padding: 0 20px;\n`","'use strict';\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nvar defaults = {\n  ellipse: 'â€¦',\n  chars: [' ', '-'],\n  max: 140,\n  truncate: true\n};\n\nfunction ellipsize(str, max, ellipse, chars, truncate) {\n  if (str.length < max) return str;\n  var last = 0,\n      c = '',\n      midMax = Math.floor(max / 2),\n      computedMax = truncate === 'middle' ? midMax : max;\n\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str.charAt(i);\n\n    if (chars.indexOf(c) !== -1 && truncate !== 'middle') {\n      last = i;\n    }\n\n    if (i < computedMax) continue;\n\n    if (last === 0) {\n      return !truncate ? '' : str.substring(0, computedMax - 1) + ellipse + (truncate === 'middle' ? str.substring(str.length - midMax, str.length) : '');\n    }\n\n    return str.substring(0, last) + ellipse;\n  }\n\n  return str;\n}\n\nmodule.exports = function (str, max, opts) {\n  if (typeof str !== 'string' || str.length === 0) return '';\n  if (max === 0) return '';\n  opts = opts || {};\n\n  for (var key in defaults) {\n    if (opts[key] === null || typeof opts[key] === 'undefined') {\n      opts[key] = defaults[key];\n    }\n  }\n\n  opts.max = max || opts.max;\n  return ellipsize(str, opts.max, opts.ellipse, opts.chars, opts.truncate);\n};","import React from 'react';\nimport styled from 'styled-components'\nimport {Link} from 'gatsby'\n\nconst List = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  letter-spacing: 0;\n  font-size: 15px;\n  font-weight: 400;\n  font-style: normal;\n`\nconst ListItem = styled.li`\n    display: inline-block;\n    border: none;\n    color: rgba(0,0,0,.68);\n    background: rgba(0,0,0,.05);\n    border-radius: 3px;\n    margin: 8px;\n    padding: 0 10px;\n    \n    & a {\n      color: black;\n    }\n    \n    & a:hover {\n      opacity: 1;\n    }\n    \n    &:hover {\n      background: rgba(0,0,0,0.1);\n    }\n`\n\nexport default ({tags}) => (\n  <List>\n    {\n      tags.map(t => {\n        return <ListItem key={t}><Link to={`/tags/${t}`}>{t}</Link></ListItem>\n      })\n    }\n  </List>\n)","import React from 'react'\nimport styled from 'styled-components'\nimport ellipsize from 'ellipsize'\nimport memoizeOne from 'memoize-one';\nimport {ContentStyles} from '../utils/sc-utils'\nimport profilePic from '../../src/images/icon-512x512.png'\n\nconst ellipsizeBlurb = (blurb, length) => ellipsize(blurb, length);\nconst memoizedEllipsize = memoizeOne(ellipsizeBlurb);\n\nconst RootDiv = styled.div`\n  display: grid;\n  grid-template-columns: 70px auto;\n  grid-template-rows: 100px;\n  grid-column-gap: 5px;\n  align-items: center;\n  ${ContentStyles}\n`\nconst Bio = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  font-size: 13px;\n  opacity: 0.8;\n`\nconst ProfilePic = styled.div`\n  height: 60px;\n  width: 60px;\n  border-radius: 50%;\n  background-image: url('${profilePic}');\n  background-position: center top;\n  background-size: cover;\n`\nconst Name = styled.div`\n  font-weight: bold;\n  opacity: 1;\n`\nconst Blurb = styled.div`\n  &:after {\n    content: '${({short}) => short}';\n    \n    @media(min-width: 380px) {\n      content: '${({medium}) => medium}';\n    }\n    \n    @media(min-width: 503px) {\n      content: '${({blurb}) => blurb}';\n    }\n  }\n`\nconst DateReadMinutes = styled.div`\n  font-size: 11.5px;\n`\nconst MidDot = styled.span`\n  padding: 0 7px;\n  vertical-align: middle;\n`\n\nexport default ({datePosted, timeToRead, blurb}) => {\n  const blurbShort = memoizedEllipsize(blurb, 60);\n  const blurbMedium = memoizedEllipsize(blurb, 80);\n\n  return (\n    <RootDiv>\n      <ProfilePic/>\n      <Bio>\n        <Name>Yusinto Ngadiman</Name>\n        <Blurb blurb={blurb} short={blurbShort} medium={blurbMedium}/>\n        <DateReadMinutes>{datePosted}<MidDot>&middot;</MidDot>{timeToRead} min read</DateReadMinutes>\n      </Bio>\n    </RootDiv>\n  )\n}\n","import React from 'react'\nimport {graphql} from 'gatsby'\nimport styled from 'styled-components'\nimport Layout from '../components/layout'\nimport TagList from '../components/tagList';\nimport {ContentStyles} from '../utils/sc-utils';\nimport AuthorBio from '../components/authorBio'\n\nconst Title = styled.h1`\n  margin-top: 20px;\n  margin-bottom: 30px;\n`\nconst Content = styled.div`\n  ${ContentStyles}\n`\nconst Hero = styled.img`\n  width: 100%;\n  max-height: 300px;\n  object-fit: cover;\n`\nexport default ({data}) => {\n  const {markdownRemark, site: { siteMetadata: { blurb }}} = data;\n\n  if(markdownRemark) {\n    const {frontmatter: {title, date, tags, files}, html, timeToRead} = markdownRemark;\n    const hero = files && files.find(f => f.name === 'hero');\n\n    return (\n      <Layout>\n        <AuthorBio blurb={blurb} datePosted={date} timeToRead={timeToRead}/>\n        <Content><Title>{title}</Title></Content>\n        {hero ? <Hero alt=\"hero\" src={hero.publicURL}/> : null}\n        <Content dangerouslySetInnerHTML={{__html: html}}/>\n        <Content><TagList tags={tags}/></Content>\n      </Layout>\n    );\n  }\n\n  return 'markdown is null!'\n};\n\nexport const postTemplateQuery = graphql`\n    query postByPath($path: String!) {\n        site {\n          siteMetadata {\n            blurb\n          }\n        }\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            timeToRead\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                files {\n                    name\n                    publicURL\n                }\n                tags\n            }\n        }\n    }\n`;"],"sourceRoot":""}