<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://localhost:3000/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://localhost:3000/" rel="alternate" type="text/html" />
<updated>2016-05-29T00:40:17+10:00</updated>
<id>http://localhost:3000/</id>
<title>React Junkie</title>
<entry>
<title>React and Microservices Architectural Style</title>
<link href="http://localhost:3000/react-and-microservices/" rel="alternate" type="text/html" title="React and Microservices Architectural Style" />
<published>2016-05-28T20:45:00+10:00</published>
<updated>2016-05-28T20:45:00+10:00</updated>
<id>http://localhost:3000/react-and-microservices</id>
<content type="html" xml:base="http://localhost:3000/react-and-microservices/">&lt;p&gt;I am going to digress a little today and talk about how react fits into the microservice architectural style. Of course microservices and 
react are two buzz words we hear all the time these days. While it might look like I am just shamelessly meshing these two things 
together to get more visitors to my site, you can’t be further from the truth (*cough).&lt;/p&gt;

&lt;p&gt;Seriously though, I first learnt of microservices from &lt;a href=&quot;http://udidahan.com&quot;&gt;Udi Dahan&lt;/a&gt;. For those who don’t know him, he is the 
creator of NServiceBus and founder of Particular Software. I have nothing but great respect and admiration for him. So you can 
understand my jubilation and joy when I had the chance to meet him in person today at &lt;a href=&quot;http://dddsydney.com.au&quot;&gt;DDD Sydney&lt;/a&gt;. We talked
about many a thing, one of them microservices and team structure. The two might seem unrelated but they actually are, more so than you think.&lt;/p&gt;

&lt;p&gt;I was very star-struck. He seemed taller than in the videos. Maybe I was imagining things? Anyway I digress (again). So what is a service? 
I am going to shamelessly rip off Udi’s quote and say:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“A service is the technical authority for a specific business capability. It is autonomous. It has an explicit boundary. All data
and business rules reside within the service.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I used to think that a service is just a wcf or a webapi endpoint. For the longest time, I naively thought I was doing soa and microservices just
because I expose wcf and webapi endpoints in my application for consumption by other applications. This is incorrect.&lt;/p&gt;

&lt;p&gt;A service is an autonomous 
piece of your domain that is self contained. For example, you might have a product service and a customer service in your domain. The product
service has its own aggregates and its own database schema separate and independent from the customer service. The two services have explicit
boundaries and are autonomous. Each can use a completely different technology stack from the other.&lt;/p&gt;

&lt;p&gt;For example the product service might use
a relational database like sql server whereas the customer service might use a nosql database like a graph db. This is a very big topic which deserves
an entire blog post or technical course in its own right so I’m going to quit while I’m ahead and point you in the right direction more for information:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Irlw-LGIJO4&quot;&gt;Martin Fowler - Microservices@Sydney Yow!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://udidahan.com/training/&quot;&gt;Udi Dahan - Advanced Distributed Systems Design&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;&lt;small&gt;See &lt;a href=&quot;#freeVideos&quot;&gt;below&lt;/a&gt; for free samples of Udi’s training videos&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wait a minute, what’s all this got to do with React? And what the heck has it got to do with team structure? Why am I still reading this crap when I could 
just easily watch Game of Thrones?&lt;/p&gt;

&lt;p&gt;When you write that react component that displays a product’s image, description, seller details, you become, or I should say you ARE a part of
the Product Service team. That team comprises of you plus the backend guys which implement the endpoint that talks to the product database. So you 
the react developer and the backend guys are all in the same Product Service team.&lt;/p&gt;

&lt;h3 id=&quot;conways-law&quot;&gt;Conway’s Law&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Software architecture follows the organisational structure of people who design it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What does this mean? It means that if you are truly practising microservices, the react/angular guys working on the product widget on the front end,
are in the same team as the backend .net/java guys who implement the wcf/webapi product service endpoints.&lt;/p&gt;

&lt;p&gt;In reality though, this is often not the case. Companies continue to organise teams by physical tiers i.e. front end team, back end services team, 
mobile team, database team, etc irrespective of service orientation.&lt;/p&gt;

&lt;p&gt;This could be because of political reasons or historical reasons, but make no
mistake, you can’t say you are doing microservices unless you are also structurally organised in a service oriented way. Conway’s law is both unambiguous and
definitive. If you try to fight it, you will lose.&lt;/p&gt;

&lt;h3 id=&quot;span-idfreevideosudi-dahans-sample-training-videosspan&quot;&gt;&lt;span id=&quot;freeVideos&quot;&gt;Udi Dahan’s Sample Training Videos&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;If you are inspired by this blog and want to know more about microservices or soa, I highly recommend you watch Udi’s training videos. He
teaches a five day course on soa and for a limited time you can watch 2 full days of the course for free. Go &lt;a href=&quot;http://go.particular.net/DSY16&quot;&gt;here&lt;/a&gt;
and use the activation code &lt;strong&gt;DSYU&lt;/strong&gt;. This free offer expires 12 June 2016.&lt;/p&gt;
</content>
<category term="react" />
<category term="microservices" />
<category term="conway&#39;s law" />
<category term="team structure" />
<summary>I am going to digress a little today and talk about how react fits into the microservice architectural style. Of course microservices and react are two buzz words we hear all the time these days. While it might look like I am just shamelessly meshing these two things together to get more visitors to my site, you can’t be further from the truth (*cough).</summary>
</entry>
<entry>
<title>Return GraphQLEnumType values as a string array</title>
<link href="http://localhost:3000/return-graphqlenumtype-values-as-string-array/" rel="alternate" type="text/html" title="Return GraphQLEnumType values as a string array" />
<published>2016-04-13T22:10:00+10:00</published>
<updated>2016-04-13T22:10:00+10:00</updated>
<id>http://localhost:3000/return-graphqlenumtype-values-as-string-array</id>
<content type="html" xml:base="http://localhost:3000/return-graphqlenumtype-values-as-string-array/">&lt;p&gt;In my attempt to learn Relay and GraphQL, I recently created a simple movie app. It is a single page app in both senses -
it only has one page and it’s all client side (excuse the pun!). This single page displays a list of movie titles and their genres.
It also has a select box to filter the list by genre.&lt;/p&gt;

&lt;p&gt;This blog is not an intro to graphql or relay, that will be covered sometime in the near future. This blog about how we can return
a list of enum values declared in our graphql schema to the client. So in a nutshell:&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Given a GraphQLEnumType in the schema, how do we return all the values in that enum type as an array of string to the client?&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;
&lt;p&gt;The premise is straight-forward. I need to populate the genre select box with all the enum values declared in the schema. However, I can’t seem to
find any posts/articles/documentation that describe how I can do this. So I set out on my own exciting investigation.&lt;/p&gt;

&lt;p&gt;My genre enum type looks like this. You can find the complete schema &lt;a href=&quot;https://github.com/yusinto/movie-time/blob/master/src/graphql/schema.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{% highlight js %}
const genreEnum = new GraphQLEnumType({
  name: ‘Genre’,
  values: {
    ACTION: {
      value: ‘Action’
    },
    ADVENTURE: {
      value: ‘Adventure’
    },
   …
    WESTERN: {
      value: ‘Western’
    }
  }
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The client expects the graphql endpoint to return an array of string like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
[‘Action’, ‘Adventure’ ,’Western’]
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Using the chrome debugger, I discovered the GraphQLEnumType object has a property called &lt;b&gt;_values&lt;/b&gt;. I’m guessing the underscore
prefix means that it’s a private property by convention, so I might not be doing the best thing here! However due to the lack of
alternatives, it will have to do for now. My resolve method then looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
resolve: () =&amp;gt; genreEnum._values.map(e =&amp;gt; e.value)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;And that’s it! You can find the complete code on &lt;a href=&quot;https://github.com/yusinto/movie-time&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="relay" />
<category term="graphql" />
<category term="GraphQLEnumType" />
<summary>In my attempt to learn Relay and GraphQL, I recently created a simple movie app. It is a single page app in both senses -it only has one page and it’s all client side (excuse the pun!). This single page displays a list of movie titles and their genres.It also has a select box to filter the list by genre.</summary>
</entry>
<entry>
<title>Step 3 to React: Speed dev with hot module replacement</title>
<link href="http://localhost:3000/step-three-to-react-speed-dev-with-hot-module-replacement/" rel="alternate" type="text/html" title="Step 3 to React: Speed dev with hot module replacement" />
<published>2016-04-02T17:45:00+11:00</published>
<updated>2016-04-02T17:45:00+11:00</updated>
<id>http://localhost:3000/step-three-to-react-speed-dev-with-hot-module-replacement</id>
<content type="html" xml:base="http://localhost:3000/step-three-to-react-speed-dev-with-hot-module-replacement/">&lt;p&gt;In the &lt;a href=&quot;http://www.reactjunkie.com/step-two-to-react-webpack-and-react/&quot;&gt;previous post&lt;/a&gt; we started writing react code
and that was cool. However having to restart the app and refresh the browser everytime we make a change is a pain. 
There must be a better way to optimise our dev/debug cycle.&lt;/p&gt;

&lt;p&gt;And yes there is. Enter react hot module replacement or hmr created by &lt;a href=&quot;https://github.com/gaearon&quot;&gt;Dan Abramov&lt;/a&gt; the creator of redux. Hmr is a much much better
“version” of liveReload. You don’t need to inject a script tag into your code and there is no browser refresh. When you make
changes to your code, they simply appear in the browser like magic without reload.&lt;/p&gt;

&lt;p&gt;This is a short post just to get hmr working so let’s dive straight into the code now and I’ll explain things along the way.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-31-install-transforms-and-webpack-middlewares&quot;&gt;Step 3.1: Install transforms and webpack middlewares&lt;/h2&gt;
&lt;p&gt;There are 6 packages we need to install:&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
npm install –save-dev babel-plugin-react-transform react-transform-hmr react-transform-catch-errors redbox-react webpack-dev-middleware webpack-hot-middleware
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;babel-plugin-react-transform&quot;&gt;babel-plugin-react-transform&lt;/h4&gt;

&lt;p&gt;This modifies your react components by applying all the transforms we configure in .babelrc.&lt;/p&gt;

&lt;h4 id=&quot;react-transform-hmr-react-transform-catch-errors&quot;&gt;react-transform-hmr, react-transform-catch-errors&lt;/h4&gt;
&lt;p&gt;The babel plugin above applies these transforms to our react components. Each transform modifies your react component in a specific way:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;react-transform-hmr&lt;/b&gt; - This transform enables hot reloading of components
&lt;b&gt;react-transform-catch-errors&lt;/b&gt; - This transform catches errors inside the render() method and renders that error instead of your component.&lt;/p&gt;

&lt;h4 id=&quot;redbox-react&quot;&gt;redbox-react&lt;/h4&gt;
&lt;p&gt;Used by react-transform-catch-errors to display errors in a red screen of death in the browser.&lt;/p&gt;

&lt;h4 id=&quot;webpack-dev-middleware-webpack-hot-middleware&quot;&gt;webpack-dev-middleware, webpack-hot-middleware&lt;/h4&gt;
&lt;p&gt;&lt;b&gt;webpack-dev-middleware&lt;/b&gt; - bundles our js file on the fly, stores it in memory and serves it&lt;/p&gt;

&lt;p&gt;&lt;b&gt;webpack-hot-middleware&lt;/b&gt; - enables hot reloading using webpack-dev-middleware above&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-32-configure-babel&quot;&gt;Step 3.2: Configure babel&lt;/h2&gt;

&lt;p&gt;Your .babelrc file should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
{
    “presets”: [“es2015”, “react”],
    “plugins”: [
        [“react-transform”, {
            “transforms”: [{
                “transform”: “react-transform-hmr”,
                “imports”: [“react”],
                “locals”: [“module”]
            }, {
                “transform”: “react-transform-catch-errors”,
                “imports”: [“react”, “redbox-react”]
            }]
        }]
    ]
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This is the configuration that uses the transform packages above. In short, we instruct the
react-transform plugin to apply 2 transforms: the hmr and catch-errors transforms to our react 
components. In simple terms, transforms are just functions that accepts a react component as input and modifies it. For 
example, &lt;b&gt;&lt;i&gt;react-transform-catch-errors&lt;/i&gt;&lt;/b&gt; adds a try catch block on the original render method to catch exceptions.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-33-configure-webpack&quot;&gt;Step 3.3: Configure webpack&lt;/h2&gt;
&lt;p&gt;Your webpack.config.dev.js should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
var webpack = require(‘webpack’);
var path = require(‘path’);&lt;/p&gt;

&lt;p&gt;module.exports = {
    // Add webpack-hot-middleware/client to our bundle so our app 
    // subscribes to update notifications from the server
    entry: [‘webpack-hot-middleware/client’, path.join(__dirname, ‘src/client/index’)],
    output: {
        path: path.join(__dirname, ‘dist’),
        filename: ‘bundle.js’,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // Add a publicPath property. This is the path referenced in the 
    // script tag in our html template to our bundle.js. We need 
    // this to configure webpack-dev-middleware in server.js
    publicPath: &#39;/dist/&#39; 
},
module: {
    loaders:[{
        test: /\.jsx?$/,
        loader: &#39;babel&#39;,
        include: path.join(__dirname, &#39;src&#39;)
    }]
},

// Enables hot module replacement in webpack
plugins: [
    new webpack.HotModuleReplacementPlugin()
] }; {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-34-modify-express-app-to-support-hmr&quot;&gt;Step 3.4: Modify express app to support hmr&lt;/h2&gt;
&lt;p&gt;Almost there! Now we need to modify server.js to use webpack dev and hot middlewares.&lt;/p&gt;

&lt;p&gt;{% highlight c# %}
…&lt;/p&gt;

&lt;p&gt;import Webpack from ‘webpack’;
import WebpackConfig from ‘../../webpack.config.dev’;
import WebpackDevMiddleware from ‘webpack-dev-middleware’;
import WebPackHotMiddleware from ‘webpack-hot-middleware’;&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;// create a webpack instance from our dev config
const webpackCompiler = Webpack(WebpackConfig);&lt;/p&gt;

&lt;p&gt;// Use webpack dev middleware to bundle our app on the fly and serve it 
// on publicPath. Turn off verbose webpack output in our server console
// by setting noInfo: true
app.use(WebpackDevMiddleware(webpackCompiler, {
    publicPath: WebpackConfig.output.publicPath,
    noInfo: true
}));&lt;/p&gt;

&lt;p&gt;// instruct our webpack instance to use webpack hot middleware
app.use(WebPackHotMiddleware(webpackCompiler));&lt;/p&gt;

&lt;p&gt;// NOTE: delete express static middleware for dist. We don’t need that
// anymore because webpack-dev-middleware serves our bundle.js from memory&lt;/p&gt;

&lt;p&gt;…
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-35-run-the-app&quot;&gt;Step 3.5: Run the app!&lt;/h2&gt;
&lt;p&gt;If you have been following my &lt;a href=&quot;http://www.reactjunkie.com/step-two-to-react-webpack-and-react/&quot;&gt;previous post&lt;/a&gt; up to this point, 
note that you’ll need to delete the prestart command from package.json. We don’t need that anymore because we are using webpack
dev middleware to bundle our app on the fly.&lt;/p&gt;

&lt;p&gt;If you have the physical /dist/ folder, also delete that because
again webpack dev middleware will serve bundle.js from memory.&lt;/p&gt;

&lt;p&gt;At your root directory run “npm start” and browse to localhost:3000. Then make changes to appComponent.js; maybe change
the h1 text. You’ll see your changes in the browser immediately without refresh.&lt;/p&gt;

&lt;p&gt;Download the complete source code from &lt;a href=&quot;https://github.com/yusinto/reactStep3&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="hmr" />
<category term="hot" />
<category term="module" />
<category term="replacement" />
<category term="webpack" />
<category term="babel" />
<summary>In the previous post we started writing react codeand that was cool. However having to restart the app and refresh the browser everytime we make a change is a pain. There must be a better way to optimise our dev/debug cycle.</summary>
</entry>
<entry>
<title>Step 2 to React: Webpack and React</title>
<link href="http://localhost:3000/step-two-to-react-webpack-and-react/" rel="alternate" type="text/html" title="Step 2 to React: Webpack and React" />
<published>2016-03-30T21:25:00+11:00</published>
<updated>2016-03-30T21:25:00+11:00</updated>
<id>http://localhost:3000/step-two-to-react-webpack-and-react</id>
<content type="html" xml:base="http://localhost:3000/step-two-to-react-webpack-and-react/">&lt;p&gt;If you haven’t read my &lt;a href=&quot;http://www.reactjunkie.com/step-one-to-react-es-6-and-express/&quot;&gt;previous post&lt;/a&gt;, 
it might be a good idea to have a quick read before reading this one. We’ll build this example based on that last post.
Let’s get into it!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-21-install-webpack-babel-and-react&quot;&gt;Step 2.1: Install webpack, babel and react&lt;/h2&gt;

&lt;p&gt;{% highlight raw %}
npm install –save-dev webpack babel-loader
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
npm install –save react react-dom babel-preset-react
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;We use webpack to bundle all our javascript code into a single file. We then include this bundled file 
in a script tag in our html just like any other js file. This single file alone will be sufficient to run our app in the browser.&lt;/p&gt;

&lt;p&gt;Our code is in es6 and jsx (we’ll talk about jsx in detail a bit later) which are not (yet) natively understood by browsers. So
we have to transpile (short for transform and compile) it into pure javascript which are understood by all browsers. We use
babel to perform this transpilation.&lt;/p&gt;

&lt;p&gt;react and react-dom are core react modules required to write react apps. babel-preset-react instructs babel (both
babel-register and babel-loader) to transpile jsx into pure javascript.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-22-configure-webpack&quot;&gt;Step 2.2: Configure webpack&lt;/h2&gt;
&lt;p&gt;Create a new file called webpack.config.dev.js at the root directory of your project. The file contents should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
var webpack = require(‘webpack’);
var path = require(‘path’);&lt;/p&gt;

&lt;p&gt;module.exports = {
    entry: [path.join(__dirname, ‘src/client/index’)],
    output: {
        path: path.join(__dirname, ‘dist’),
        filename: ‘bundle.js’
    },
    module: {
        loaders:[{
            test: /.jsx?$/,
            loader: ‘babel’,
            include: path.join(__dirname, ‘src’)
        }]
    }
};
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;There are 3 main parts to this config:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;entry: tells webpack to start bundling from this file&lt;/li&gt;
&lt;li&gt;output: write the resultant bundled file to the dist folder at root&lt;/li&gt;
&lt;li&gt;module.loaders: For all js or jsx files under src folder, use babel-loader to transpile those files prior to bundling&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-23-add-a-build-command-to-packagejson&quot;&gt;Step 2.3: Add a build command to package.json&lt;/h2&gt;

&lt;p&gt;In your package.json, add a scripts.prestart command. This is a natively supported npm command, just like start.
When you run npm start, the prestart command will always get executed first, then the start command, followed by a
poststart command which we don’t use here.&lt;/p&gt;

&lt;p&gt;In prestart, we tell npm to run webpack with the config file above essentially
bundling our app prior to running it.&lt;/p&gt;

&lt;p&gt;{% highlight js %}
{
…
      “scripts”: {
        “prestart”: “webpack –config webpack.config.dev.js –progress”,
        “start”: “node src/server/index.js”,
      }
…
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;When the prestart command completes, a bundle.js file should exist in the dist folder.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-24-write-some-react-code&quot;&gt;Step 2.4: Write some react code&lt;/h2&gt;
&lt;p&gt;Finally we get to write some react code! This is the meatiest part, so it’s a bit longer than the other sections, but
it’s worth it. Let’s create two new files:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;src/common/component/appComponent.js&lt;/li&gt;
    &lt;li&gt;src/client/index.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note about directory structure: All my code are in a src folder to separate it from other elements of the project
like node_modules and dist. This allows me to target only src for transpilation in my webpack build. Under src, my files
are further organised into client, server and common.&lt;/p&gt;

&lt;p&gt;So what’s in common? This is in preparation for building a universal
app (also known as isomorphic app) where the code being run on the client and server are one and the same ergo common
code. But we’ll talk more about this in a later post.&lt;/p&gt;

&lt;p&gt;If you come from an OO background like me, you should be familiar with the syntax here.&lt;/p&gt;

&lt;h5 id=&quot;appcomponentjs&quot;&gt;appComponent.js&lt;/h5&gt;
&lt;p&gt;{% highlight C# %}
/*
 Import react’s default module and assign it to a variable named React. 
 Additionally we also import the Component module and assign it to a 
 variable named Component.
*/
import React, {Component} from ‘react’;&lt;/p&gt;

&lt;p&gt;/*
 Subclass React.Component and implement the render method. This method 
 must return a single child element. A react component at minimum must 
 implement the render method. Also set this class as the default export 
 of this file so we can import it in other files.
*/
export default class App extends Component {
    render() {
        return (
            // Nooo this looks like inline html! Are we back in the land
            // of classic asp/php? Short answer is no we are not. See 
            // below for details.
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Hello world in React!&amp;lt;/h1&amp;gt;
                &amp;lt;p&amp;gt;
                    The time now is { (new Date()).toLocaleString() }
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;It might look like we are writing literal html strings like old school asp/php, 
but under the bonnet these are shorthand syntax to generate ReactElements.&lt;/p&gt;

&lt;p&gt;A ReactElement is the primary basic type in React which constitutes the virtual DOM. In essence, you are
writing virtual DOM. It’s called virtual because it’s not the real DOM. React keeps an in-memory copy
of this “html” ergo virtual dom and only flushes changes to the real DOM in the browser if there is a props or state
change. We’ll talk about props and state more in later posts.&lt;/p&gt;

&lt;p&gt;For now, just understand that you are writing a html-like syntax called jsx which becomes part of the virtual dom.&lt;/p&gt;

&lt;h5 id=&quot;indexjs&quot;&gt;index.js&lt;/h5&gt;
&lt;p&gt;{% highlight C# %}
// Import the render method from react-dom so we can mount our 
// component onto an html element
import React from ‘react’;
import {render} from ‘react-dom’;
import App from ‘../common/component/appComponent’;&lt;/p&gt;

&lt;p&gt;// This is the entry point into our react app on the client side. Again 
// we use jsx to create our ReactElement and mount it onto a div called 
// reactDiv on the html template.
render(&lt;app&gt;&lt;/app&gt;, document.getElementById(‘reactDiv’));
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-25-modify-express-to-serve-react&quot;&gt;Step 2.5: Modify express to serve react&lt;/h2&gt;
&lt;p&gt;Almost there! Now we need to modify server.js to serve a html page with a script reference to our dist/bundled.js generated by webpack.&lt;/p&gt;

&lt;p&gt;We also need to add an express static middleware to serve that static bundle.js file. A middleware is just code that executes
between a request and a response. In this example, a GET request comes in from the client asking for dist/bundled.js. Our
middleware matches the route and executes our code. We use express’ built-in static middleware so we get this for free.&lt;/p&gt;

&lt;p&gt;{% highlight c# %}&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;// This is our html template that contains our target mounting 
// div id=”reactDiv”. Also note the script reference to /dist/bundle.js.
const htmlString = &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack and React&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reactDiv&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dist/bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;// Use express’ built-in static middleware to serve static files in 
// the dist folder
app.use(‘/dist’, Express.static(‘dist’));&lt;/p&gt;

&lt;p&gt;…
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-26-run-the-app&quot;&gt;Step 2.6: Run the app!&lt;/h2&gt;
&lt;p&gt;At your root directory run “npm start” and browse to localhost:3000 to see the output.
Download the complete source code from &lt;a href=&quot;https://github.com/yusinto/reactStep2&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="webpack" />
<category term="babel" />
<summary>If you haven’t read my previous post, it might be a good idea to have a quick read before reading this one. We’ll build this example based on that last post.Let’s get into it!</summary>
</entry>
<entry>
<title>Step 1 to React: Using es6 with Express</title>
<link href="http://localhost:3000/step-one-to-react-es-6-and-express/" rel="alternate" type="text/html" title="Step 1 to React: Using es6 with Express" />
<published>2016-03-27T17:48:00+11:00</published>
<updated>2016-03-27T17:48:00+11:00</updated>
<id>http://localhost:3000/step-one-to-react-es-6-and-express</id>
<content type="html" xml:base="http://localhost:3000/step-one-to-react-es-6-and-express/">&lt;p&gt;I came from a .Net background but I realised quickly how powerful and easy node is and I love it. The advent of es6 has
bridged the gap even further. The introduction of arrow functions, classes and destructuring really make node programming
 that much more enjoyable and fun.&lt;/p&gt;

&lt;p&gt;Enough of my rant! Let’s get to the point. This post is part one of a series of posts about react and the things I
 encountered in the process of learning it. One of the first steps that often get overlooked is how to get es6 to work
 with node on the server side. To me this is a very important step because I want my app to be in es6 as much as possible.&lt;/p&gt;

&lt;p&gt;Note that this is a very basic example of a node app running es6 without any react elements. In my next post, I will
 add react. The following posts will gradually include react router, relay, hot module replacement (hmr), 
 redux, foundation (sass) and many other goodies!&lt;/p&gt;

&lt;p&gt;But first thing first&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-11-install-babel&quot;&gt;Step 1.1: Install babel&lt;/h2&gt;
&lt;p&gt;You’ll need to install express, babel-express and babel-preset-es2015:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
npm install express babel-register babel-preset-es2015 –save
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Where express is the standard web framework for node, babel-register will compile every file that is require’d with babel and
babel-preset-es2015 tells babel to transpile es6 code to es5.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-12-configure-babel---add-a-babelrc-file&quot;&gt;Step 1.2: Configure babel - add a .babelrc file&lt;/h2&gt;
&lt;p&gt;Create a new file called .babelrc at the root directory of your project. The file contents should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
{
    “presets”: [“es2015”]
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This configures babel to transpile es6 code to es5.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-13-configure-an-entry-point-in-packagejson&quot;&gt;Step 1.3: Configure an entry point in package.json&lt;/h2&gt;

&lt;p&gt;In your package.json, add a scripts/start command which tells npm what to do when you run “npm start” in the command line:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
{
…
      “scripts”: {
        “start”: “node src/server/index.js”,
      }
…
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This tells npm to execute src/server/index.js when you run “npm start” at your root project folder. In this case, index.js 
is the entry point to your app. The contents of this file should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
require(‘babel-register’);
require(‘./server’);
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-14-write-es6-code&quot;&gt;Step 1.4: Write es6 code&lt;/h2&gt;
&lt;p&gt;The file server.js contains all your es6 code for your app. It should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
import Express from ‘express’;&lt;/p&gt;

&lt;p&gt;const PORT = 3000;
const app = Express();&lt;/p&gt;

&lt;p&gt;app.use((req, res) =&amp;gt; {
    res.end(‘hello world!’);
});&lt;/p&gt;

&lt;p&gt;app.listen(PORT, () =&amp;gt; {
    console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Listening at ${PORT}&lt;/code&gt;);
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Here we use import statements in place of the classic require statements, const keyword instead of var, 
arrow functions instead of inline function declarations and es6 template strings instead of string concatenations.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;step-15-run-your-app&quot;&gt;Step 1.5: Run your app!&lt;/h2&gt;
&lt;p&gt;Run&lt;/p&gt;

&lt;p&gt;{% highlight js %}
npm start
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;at your root directory and browse to localhost:3000 to see the output of your app. Download the complete source code from
 &lt;a href=&quot;https://github.com/yusinto/reactStep1&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

</content>
<category term="react" />
<category term="es6" />
<category term="express" />
<summary>I came from a .Net background but I realised quickly how powerful and easy node is and I love it. The advent of es6 hasbridged the gap even further. The introduction of arrow functions, classes and destructuring really make node programming that much more enjoyable and fun.</summary>
</entry>
<entry>
<title>Markdown Extra Components</title>
<link href="http://localhost:3000/markdown-extra-components/" rel="alternate" type="text/html" title="Markdown Extra Components" />
<published>2016-02-24T22:48:00+11:00</published>
<updated>2016-02-24T22:48:00+11:00</updated>
<id>http://localhost:3000/markdown-extra-components</id>
<content type="html" xml:base="http://localhost:3000/markdown-extra-components/">&lt;h2 id=&quot;summary&quot;&gt;Summary:&lt;/h2&gt;

&lt;p&gt;You can pick as item to see how to apply in markdown.&lt;/p&gt;

&lt;h4 id=&quot;especial-elements&quot;&gt;Especial Elements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#evidence&quot;&gt;Evidence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#side-by-side&quot;&gt;Side-by-Side&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#star&quot;&gt;Star&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#especial-breaker&quot;&gt;Especial Breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;external-elements&quot;&gt;External Elements&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#gist&quot;&gt;Gist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#codepen&quot;&gt;Codepen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slideshare&quot;&gt;Slideshare&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#videos&quot;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;evidence&quot;&gt;Evidence&lt;/h2&gt;

&lt;p&gt;You can try the evidence!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;evidence&quot;&gt;Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;{% highlight html %}
&lt;span class=&quot;evidence&quot;&gt;Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.&lt;/span&gt;
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;side-by-side&quot;&gt;Side-by-side&lt;/h2&gt;

&lt;p&gt;Like the &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image&lt;/strong&gt; on the left and &lt;strong&gt;Text&lt;/strong&gt; on the right:&lt;/p&gt;

&lt;p&gt;{% highlight html %}&lt;/p&gt;
&lt;div class=&quot;side-by-side&quot;&gt;
    &lt;div class=&quot;toleft&quot;&gt;
        &lt;img class=&quot;image&quot; src=&quot;{{ site.url }}/{{ site.picture }}&quot; alt=&quot;Alt Text&quot; /&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toright&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;div class=&quot;side-by-side&quot;&gt;
    &lt;div class=&quot;toleft&quot;&gt;
        &lt;img class=&quot;image&quot; src=&quot;{{ site.url }}/{{ site.picture }}&quot; alt=&quot;Alt Text&quot; /&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toright&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Text&lt;/strong&gt; on the left and &lt;strong&gt;Image&lt;/strong&gt; on the right:&lt;/p&gt;

&lt;p&gt;{% highlight html %}&lt;/p&gt;
&lt;div class=&quot;side-by-side&quot;&gt;
    &lt;div class=&quot;toleft&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toright&quot;&gt;
        &lt;img class=&quot;image&quot; src=&quot;{{ site.url }}/{{ site.picture }}&quot; alt=&quot;Alt Text&quot; /&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;div class=&quot;side-by-side&quot;&gt;
    &lt;div class=&quot;toleft&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toright&quot;&gt;
        &lt;img class=&quot;image&quot; src=&quot;{{ site.url }}/{{ site.picture }}&quot; alt=&quot;Alt Text&quot; /&gt;
        &lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;star&quot;&gt;Star&lt;/h2&gt;

&lt;p&gt;You can give evidence to a post. Just add the tag to the markdown file.&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
star: true
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;especial-breaker&quot;&gt;Especial Breaker&lt;/h2&gt;

&lt;p&gt;You can add a especial &lt;em&gt;hr&lt;/em&gt; to your text.&lt;/p&gt;

&lt;p&gt;{% highlight html %}&lt;/p&gt;
&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;div class=&quot;breaker&quot;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gist&quot;&gt;Gist&lt;/h2&gt;

&lt;p&gt;You can add Gists from github.&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
{ % gist sergiokopplin/5afb058da029a13de73e % }
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;{% gist sergiokopplin/5afb058da029a13de73e %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;codepen&quot;&gt;Codepen&lt;/h2&gt;

&lt;p&gt;You can add Pens from Codepen.&lt;/p&gt;

&lt;p&gt;{% highlight html %}&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;gfdDu&quot; data-default-tab=&quot;result&quot; data-user=&quot;chriscoyier&quot; class=&quot;codepen&quot;&gt;
    See the Pen &lt;a href=&quot;http://codepen.io/chriscoyier/pen/gfdDu/&quot;&gt;Crappy Recreation of the Book Cover of *The Flame Alphabet*&lt;/a&gt; by Chris Coyier (&lt;a href=&quot;http://codepen.io/chriscoyier&quot;&gt;&lt;a href=&quot;https://github.com/chriscoyier&quot; class=&quot;user-mention&quot;&gt;@chriscoyier&lt;/a&gt;&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;gfdDu&quot; data-default-tab=&quot;result&quot; data-user=&quot;chriscoyier&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/chriscoyier/pen/gfdDu/&quot;&gt;Crappy Recreation of the Book Cover of *The Flame Alphabet*&lt;/a&gt; by Chris Coyier (&lt;a href=&quot;http://codepen.io/chriscoyier&quot;&gt;&lt;a href=&quot;https://github.com/chriscoyier&quot; class=&quot;user-mention&quot;&gt;@chriscoyier&lt;/a&gt;&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;slideshare&quot;&gt;Slideshare&lt;/h2&gt;

&lt;p&gt;Add your presentations here!&lt;/p&gt;

&lt;p&gt;{% highlight html %}&lt;/p&gt;
&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l&quot; width=&quot;560&quot; height=&quot;310&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l&quot; width=&quot;560&quot; height=&quot;310&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;/h2&gt;

&lt;p&gt;Do you want some videos? Youtube, Vimeo or Vevo? Copy the embed code and paste on your post!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;{% highlight html %}&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/r7XhWUDj-Ts&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/r7XhWUDj-Ts&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</content>
<category term="markdown" />
<category term="components" />
<category term="extra" />
<summary>Summary:</summary>
</entry>
<entry>
<title>Markdown Common Elements</title>
<link href="http://localhost:3000/markdown-common-elements/" rel="alternate" type="text/html" title="Markdown Common Elements" />
<published>2016-02-24T22:44:00+11:00</published>
<updated>2016-02-24T22:44:00+11:00</updated>
<id>http://localhost:3000/markdown-common-elements</id>
<content type="html" xml:base="http://localhost:3000/markdown-common-elements/">&lt;h2 id=&quot;summary&quot;&gt;Summary:&lt;/h2&gt;

&lt;p&gt;You can pick as item to see how to apply in markdown.&lt;/p&gt;

&lt;h3 id=&quot;comum-elements&quot;&gt;Comum Elements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-formatting&quot;&gt;Basic formatting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#headings&quot;&gt;Headings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lists&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#paragraph-modifiers&quot;&gt;Paragraph Modifiers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#urls&quot;&gt;Urls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#horizontal-rule&quot;&gt;Horizontal Rule&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#images&quot;&gt;Images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;basic-formatting&quot;&gt;Basic formatting&lt;/h2&gt;

&lt;p&gt;This note &lt;strong&gt;demonstrates&lt;/strong&gt; some of what &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; is &lt;em&gt;capable of doing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And that’s how to do it.&lt;/p&gt;

&lt;p&gt;{% highlight html %}
This note &lt;strong&gt;demonstrates&lt;/strong&gt; some of what [Markdown][some/link] is &lt;em&gt;capable of doing&lt;/em&gt;.
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;headings&quot;&gt;Headings&lt;/h2&gt;

&lt;p&gt;There are six levels of headings. They correspond with the six levels of HTML headings. You’ve probably noticed them already in the page. Each level down uses one more hash character. But we are using just 4 of them.&lt;/p&gt;

&lt;h1 id=&quot;headings-can-be-small&quot;&gt;Headings can be small&lt;/h1&gt;

&lt;h2 id=&quot;headings-can-be-small-1&quot;&gt;Headings can be small&lt;/h2&gt;

&lt;h3 id=&quot;headings-can-be-small-2&quot;&gt;Headings can be small&lt;/h3&gt;

&lt;h4 id=&quot;headings-can-be-small-3&quot;&gt;Headings can be small&lt;/h4&gt;

&lt;p&gt;{% highlight raw %}
# Heading
## Heading
### Heading
#### Heading
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;h3 id=&quot;ordered-list&quot;&gt;Ordered list&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;A second item&lt;/li&gt;
  &lt;li&gt;Number 3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;{% highlight raw %}
1. Item 1
2. A second item
3. Number 3
{% endhighlight %}&lt;/p&gt;

&lt;h3 id=&quot;unordered-list&quot;&gt;Unordered list&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;An item&lt;/li&gt;
  &lt;li&gt;Another item&lt;/li&gt;
  &lt;li&gt;Yet another item&lt;/li&gt;
  &lt;li&gt;And there’s more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{% highlight raw %}
* An item
* Another item
* Yet another item
* And there’s more…
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;paragraph-modifiers&quot;&gt;Paragraph modifiers&lt;/h2&gt;

&lt;h3 id=&quot;quote&quot;&gt;Quote&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here is a quote. What this is should be self explanatory. Quotes are automatically indented when they are used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;{% highlight raw %}
&amp;gt; Here is a quote. What this is should be self explanatory.
{% endhighlight raw %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;urls&quot;&gt;URLs&lt;/h2&gt;

&lt;p&gt;URLs can be made in a handful of ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A named link to &lt;a href=&quot;http://www.markitdown.net/&quot;&gt;Mark It Down&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Another named link to &lt;a href=&quot;http://markitdown.net/&quot;&gt;Mark It Down&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sometimes you just want a URL like &lt;a href=&quot;http://markitdown.net/&quot;&gt;http://markitdown.net/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{% highlight raw %}
* A named link to &lt;a href=&quot;http://www.markitdown.net/&quot;&gt;MarkItDown&lt;/a&gt;.
* Another named link to &lt;a href=&quot;http://markitdown.net/&quot;&gt;MarkItDown&lt;/a&gt;
* Sometimes you just want a URL like &lt;a href=&quot;http://markitdown.net/&quot;&gt;http://markitdown.net/&lt;/a&gt;.
{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;horizontal-rule&quot;&gt;Horizontal rule&lt;/h2&gt;

&lt;p&gt;A horizontal rule is a line that goes across the middle of the page.
It’s sometimes handy for breaking things up.&lt;/p&gt;

&lt;h2 id=&quot;highlight-raw-&quot;&gt;{% highlight raw %}&lt;/h2&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;

&lt;p&gt;Markdown can also contain images. I’ll need to add something here sometime.&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
![Markdowm Image][/image/url]
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kune.fr/wp-content/uploads/2013/10/ghost-blog.jpg&quot; alt=&quot;Markdowm Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure Caption&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
![Markdowm Image][/image/url]&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kune.fr/wp-content/uploads/2013/10/ghost-blog.jpg&quot; alt=&quot;Markdowm Image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Photo by John Doe&lt;/figcaption&gt;

&lt;p&gt;&lt;em&gt;Bigger Images&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;{% highlight raw %}
![Markdowm Image][/image/url]{: class=”bigger-image” }
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kune.fr/wp-content/uploads/2013/10/ghost-blog.jpg&quot; alt=&quot;Markdowm Image&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;A HTML Example:&lt;/p&gt;

&lt;p&gt;{% highlight html %}
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Just a test&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A CSS Example:&lt;/p&gt;

&lt;p&gt;{% highlight css %}
pre {
    padding: 10px;
    font-size: .8em;
    white-space: pre;
}&lt;/p&gt;

&lt;p&gt;pre, table {
    width: 100%;
}&lt;/p&gt;

&lt;p&gt;code, pre, tt {
    font-family: Monaco, Consolas, Inconsolata, monospace, sans-serif;
    background: rgba(0,0,0,.05);
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;A JS Example:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
// Sticky Header
$(window).scroll(function() {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ($(window).scrollTop() &amp;gt; 900 &amp;amp;&amp;amp; !$(&quot;body&quot;).hasClass(&#39;show-menu&#39;)) {
    $(&#39;#hamburguer__open&#39;).fadeOut(&#39;fast&#39;);
} else if (!$(&quot;body&quot;).hasClass(&#39;show-menu&#39;)) {
    $(&#39;#hamburguer__open&#39;).fadeIn(&#39;fast&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;});
{% endhighlight %}&lt;/p&gt;

</content>
<category term="markdown" />
<category term="elements" />
<summary>Summary:</summary>
</entry>
</feed>
