<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://reactjunkie.com/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://reactjunkie.com/" rel="alternate" type="text/html" />
<updated>2017-09-20T20:24:33+10:00</updated>
<id>http://reactjunkie.com/</id>
<title>React Junkie</title>
<entry>
<title>Javascript Job Queues and Promises</title>
<link href="http://reactjunkie.com/promises-promises/" rel="alternate" type="text/html" title="Javascript Job Queues and Promises" />
<published>2017-09-18T07:30:00+10:00</published>
<updated>2017-09-18T07:30:00+10:00</updated>
<id>http://reactjunkie.com/promises-promises</id>
<content type="html" xml:base="http://reactjunkie.com/promises-promises/">&lt;p&gt;So you think you know how promises work? Someone ever comes to you
with a little trivia called “what’s the sequence of console logs from this
piece of async code”? And no matter how hard you try you never get
it right?&lt;/p&gt;

&lt;p&gt;I experienced this at work last week and in process learnt something new about
promises which I would like to share.&lt;/p&gt;

&lt;p&gt;There are few sites (if any) that explain the scheduling aspects of Promises.
Perhaps it’s not a hot topic. It’s too low level. You need a
shot of vodka to understand it. Bla bla.. so here goes nothing.&lt;/p&gt;

&lt;p&gt;This is not an intro to promises or how to use them. There are plenty
of blogs out there explaining that in complete pornographic detail (give me
that vodka!). No sir, today I’ll be talking about the temporal aspects
of promises i.e. “when” your code gets executed and why.&lt;/p&gt;

&lt;p&gt;It’s actually very interesting!&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;p&gt;Understand when parts of your promise gets executed and why.&lt;/p&gt;

&lt;h2 id=&quot;step-1-anatomy-of-a-promise&quot;&gt;Step 1: Anatomy of a Promise&lt;/h2&gt;
&lt;p&gt;{% highlight javascript %}
const p = new Promise(
    // this is called the “executor”
    (resolve, reject) =&amp;gt; {
        console.log(1);
        resolve(2);
        console.log(3);
    }
);&lt;/p&gt;

&lt;p&gt;console.log(4);&lt;/p&gt;

&lt;p&gt;p.then(
    // this is called the success handler
    result =&amp;gt; console.log(result)
);&lt;/p&gt;

&lt;p&gt;setTimeout(() =&amp;gt; console.log(5), 0);&lt;/p&gt;

&lt;p&gt;console.log(6);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Wanna guess what the output is? You can run the code &lt;a href=&quot;https://repl.it/LVTG/1&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;
and see for yourself. Or I can just tell you. It is: 1 3 4 6 2 5.&lt;/p&gt;

&lt;p&gt;It doesn’t matter if you guessed right or wrong. It matters if you understand
why this is the output.&lt;/p&gt;

&lt;h2 id=&quot;step-2-the-executor&quot;&gt;Step 2: The executor&lt;/h2&gt;
&lt;p&gt;It is always run immediately! The moment you new up a Promise, the function
you specify in the constructor i.e. the executor gets run immediately
in the current tick.&lt;/p&gt;

&lt;p&gt;So 1 gets printed, then resolve gets called. Calling resolve marks the 
promise as fulfilled and that’s it. It does not trigger anything else.&lt;/p&gt;

&lt;p&gt;Then 3 gets printed. The current tick continues out of the promise constructor
and prints 4.&lt;/p&gt;

&lt;h2 id=&quot;step-3-then&quot;&gt;Step 3: .then&lt;/h2&gt;
&lt;p&gt;This is the interesting part. Remember the promise was resolved?
When you call .then on a resolved promise, the success handler gets scheduled
in the &lt;strong&gt;job queue&lt;/strong&gt;. What the hell? What’s a job queue? Never heard of it.
Am I making this shit up? &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues&quot; target=&quot;blank&quot;&gt;It’s real&lt;/a&gt;
my friend. Keep reading.&lt;/p&gt;

&lt;h2 id=&quot;step-4-the-job-queue&quot;&gt;Step 4: The job queue&lt;/h2&gt;
&lt;p&gt;You must be familiar with the event loop and the event queue (if not, google them!)? 
This gives javascript that infamous single-threaded reputation. Each 
iteration of this loop is called a “tick”. Each tick processes a message from
the event queue. So is the event queue the same as the job queue?&lt;/p&gt;

&lt;p&gt;No it is not. The job queue is a completely separate queue. More importantly,
messages in this queue are processed &lt;strong&gt;immediately at the end of each tick before&lt;/strong&gt; 
the beginning of the next tick. Each tick has its own job queue.&lt;/p&gt;

&lt;p&gt;It’s like jumping the event queue. Success handlers for promises are
scheduled into this job queue. They get executed before the next message
in the event queue.&lt;/p&gt;

&lt;p&gt;So with this newfound wisdom, our success handler above gets
scheduled in the job queue, to be run at the end of the tick.&lt;/p&gt;

&lt;h2 id=&quot;step-5-what-goes-into-the-event-queue&quot;&gt;Step 5: What goes into the event queue?&lt;/h2&gt;
&lt;p&gt;Glad you asked. Things like setTimeout callbacks and event listeners are
scheduled into the event queue. So in our example above, console.log(5)
is scheduled into the event queue, even when the delay is 0ms. That means
this gets run &lt;strong&gt;after&lt;/strong&gt; the success handler because the event queue is
processed in the next tick.&lt;/p&gt;

&lt;h2 id=&quot;step-6-booooringg&quot;&gt;Step 6: Booooringg&lt;/h2&gt;
&lt;p&gt;Ok ok last we saw our program, it output 4, so what’s next? We saw
.then and setTimeout are asynchronous i.e. they get scheduled into the
job queue and the event queue respectively, so the current tick continues
and executes console.log(6). The tick ends, or has it? We still have
the job queue at the of the tick, so no it has not ended yet.&lt;/p&gt;

&lt;p&gt;Our program then executes the success handler, which is the first and only job
in the job queue. This outputs 2. Then the tick ends.&lt;/p&gt;

&lt;p&gt;Finally our program continues to the next tick and executes console.log(5). The end!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Best have lotsa vodka when talking about promises. Thanks for reading!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="javascript" />
<category term="promises" />
<category term="job" />
<category term="queues" />
<category term="js" />
<category term="asynchronous" />
<summary>So you think you know how promises work? Someone ever comes to youwith a little trivia called “what’s the sequence of console logs from thispiece of async code”? And no matter how hard you try you never getit right?</summary>
</entry>
<entry>
<title>WebAssembly and React</title>
<link href="http://reactjunkie.com/webassembly-react/" rel="alternate" type="text/html" title="WebAssembly and React" />
<published>2017-08-04T07:30:00+10:00</published>
<updated>2017-08-04T07:30:00+10:00</updated>
<id>http://reactjunkie.com/webassembly-react</id>
<content type="html" xml:base="http://reactjunkie.com/webassembly-react/">&lt;p&gt;WebAssembly is the next big thing. So they say. Who knows. All I know is
that it’s fast and it can make my app goes faster, like native fast. So
naturally I am interested.&lt;/p&gt;

&lt;p&gt;I looked around for a quick guide to get WebAssembly up and running in
node, express and react but couldn’t find one. So I decided to do it myself.&lt;/p&gt;

&lt;p&gt;Let’s begin!&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;p&gt;Run a C function from a .wasm file in a react component.&lt;/p&gt;

&lt;h2 id=&quot;step-1-install-emscripten&quot;&gt;Step 1: Install emscripten&lt;/h2&gt;
&lt;p&gt;Emscripten compiles C/C++ code to web assembly. Given a C file,
emscripten produces a .wasm and a .js file.&lt;/p&gt;

&lt;p&gt;.wasm is a binary file. You can’t easily
import .wasm files directly into js (&lt;a href=&quot;https://medium.com/webpack/webpack-awarded-125-000-from-moss-program-f63eeaaf4e15&quot; target=&quot;_blank&quot;&gt;yet!&lt;/a&gt;) so 
emscripten also produces a js file which acts as a proxy. You add a 
script reference to this file in your html so you can use wasm in your 
js app. They call this js file the “glue” code. Personally I prefer to call
it proxy code.&lt;/p&gt;

&lt;p&gt;Here are the steps to install emscripten:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz&quot;&gt;emscripten portable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Unzip and cd into the dir and execute these:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{% highlight bash %}
./emsdk update
./emsdk install latest
./emsdk activate latest
source ./emsdk_env.sh
{% endhighlight %}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add the emcc executable to your /etc/paths file. Mine is
located at /your_download_dir/emsdk-portable/emscripten/1.37.16&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-2-write-c-code&quot;&gt;Step 2: Write C code&lt;/h2&gt;
&lt;p&gt;Create a file called utils.c under your src folder.&lt;/p&gt;

&lt;h4 id=&quot;utilsc&quot;&gt;utils.c&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include &amp;lt;emscripten/emscripten.h&amp;gt;&lt;/time.h&gt;&lt;/stdlib.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;int main(int argc, char ** argv) {
    // gets translated to console.log
    printf(“WebAssembly successfully loaded!\n”);
}&lt;/p&gt;

&lt;p&gt;// Emscripten does dead code elimination during compilation.
// This decorator ensures our code does not get removed.
EMSCRIPTEN_KEEPALIVE
int generateRandom() {
    srand ( time(NULL) );
    return rand();
}
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-3-compile-your-c-code&quot;&gt;Step 3: Compile your C code&lt;/h2&gt;

&lt;p&gt;{% highlight bash %}
emcc utils.c -s WASM=1 -o utils.js -O3
{% endhighlight %}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;-s Specify settings which gets passed down to the emscripten compiler. Here
we specify we want to compile to wasm. The default is asm. This will
produce utils.wasm.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-o Specify the filename for the glue code. This will produce utils.js.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;-O3 The first character is the upper case letter ‘O’ not zero! Sets the optimisation
level for your wasm and js files. You can check the various optimisation levels
&lt;a href=&quot;https://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o0&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-4-add-the-glue-code-to-your-html&quot;&gt;Step 4: Add the glue code to your html&lt;/h2&gt;

&lt;p&gt;{% highlight html %}
&amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html&amp;gt;
         &amp;lt;head&amp;gt;
            &lt;title&gt;Hasta la vista JS!&lt;/title&gt;
            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
          &amp;lt;/head&amp;gt;
          &amp;lt;body&amp;gt;
            &amp;lt;div id=&quot;reactDiv&quot;/&amp;gt;
            &lt;script src=&quot;/dist/utils.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;/dist/bundle.js&quot;&gt;&lt;/script&gt;
          &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-5-add-an-express-route-to-serve-wasm-files&quot;&gt;Step 5: Add an express route to serve wasm files&lt;/h2&gt;

&lt;p&gt;Express does not serve .wasm files by default so we have to add a custom route.&lt;/p&gt;

&lt;h4 id=&quot;serverjs&quot;&gt;server.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
app.get(‘/:filename.wasm’, (req, res) =&amp;gt; {
  const wasmFilePath = path.resolve(__dirname, 
    &lt;code class=&quot;highlighter-rouge&quot;&gt;../../dist/${req.params.filename}.wasm&lt;/code&gt;);&lt;/p&gt;

&lt;p&gt;console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Wasm request ${wasmFilePath}&lt;/code&gt;);&lt;/p&gt;

&lt;p&gt;fs.readFile(wasmFilePath, (err, data) =&amp;gt; {
    const errorMessage = &lt;code class=&quot;highlighter-rouge&quot;&gt;Error ${wasmFilePath} not found. ${JSON.stringify(err)}&lt;/code&gt;;
    if (err) {
      console.log(errorMessage);
      res.status(404).send(errorMessage);
      return;
    }
    res.send(data);
  });
});
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-6-call-wasm-from-react&quot;&gt;Step 6: Call wasm from React!&lt;/h2&gt;

&lt;p&gt;Finally! You can now use your C function from React by prefixing an underscore
in front of the C function’s name. We included the glue code in our app html, so
all your C methods are exposed globally. This is not the best way, but 
in the future, webpack will rescue us. There is &lt;a href=&quot;https://medium.com/webpack/webpack-awarded-125-000-from-moss-program-f63eeaaf4e15&quot; target=&quot;_blank&quot;&gt;wip&lt;/a&gt;
right now sponsored by Mozilla to develop first class support for WebAssembly in webpack. 
This means we’ll be able to import C/C++ files directly in js files and
call wasm functions directly!&lt;/p&gt;

&lt;p&gt;Till that day arrives, a global script tag will have to do for now.&lt;/p&gt;

&lt;h4 id=&quot;appjs&quot;&gt;app.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}&lt;/p&gt;

&lt;p&gt;export default class App extends Component {
    state = {randomNumber: -1};&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onClickGenerateRandom = () =&amp;gt; {
  // EUREKA! Call our C function with an underscore prefix!
  // All the methods in utils.c are exposed globally because utils.js
  // is included as a script tag in our html.
  const randomNumber = _generateRandom();
  console.log(`onClickGenerateRandom: ${randomNumber}`);
  this.setState({randomNumber});
}; 
  
render() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button onClick={this.onClickGenerateRandom}&amp;gt;
        Generate random
      &amp;lt;/button&amp;gt;
      {this.state.randomNumber}
    &amp;lt;/div&amp;gt;
  );
} } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The next step is to help Sean Larkin and co to get webpack support WebAssembly!&lt;/p&gt;

&lt;p&gt;The complete code is &lt;a href=&quot;https://github.com/yusinto/wasm-playground&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;
as usual. Start learning C/C++. Enjoy!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="webAssembly" />
<category term="react" />
<category term="wasm" />
<category term="web" />
<category term="assembly" />
<category term="javascript" />
<category term="c" />
<category term="c++" />
<category term="emscripten" />
<summary>WebAssembly is the next big thing. So they say. Who knows. All I know isthat it’s fast and it can make my app goes faster, like native fast. Sonaturally I am interested.</summary>
</entry>
<entry>
<title>Writing Graphcool functions in es6 with async await and jest</title>
<link href="http://reactjunkie.com/graphcool-functions-in-es6-with-async-await/" rel="alternate" type="text/html" title="Writing Graphcool functions in es6 with async await and jest" />
<published>2017-06-30T08:30:00+10:00</published>
<updated>2017-06-30T08:30:00+10:00</updated>
<id>http://reactjunkie.com/graphcool-functions-in-es6-with-async-await</id>
<content type="html" xml:base="http://reactjunkie.com/graphcool-functions-in-es6-with-async-await/">&lt;p&gt;Graphcool is cool. Graphcool functions are even cooler. There are two types of functions:
request pipeline and server side subscription. Request pipeline function gets triggered
at a specified stage of a crud request. You write custom business logic you want to execute
as part of your api requests here. It is synchronous.&lt;/p&gt;

&lt;p&gt;The second type of function is server side subscription. These get triggered
&lt;b&gt;after&lt;/b&gt; crud operations. Your write custom business logic here to
react to crud events in your database. Server side subscriptions are
asynchronous.&lt;/p&gt;

&lt;p&gt;In this blog, I will talk about server side subscriptions. A crud occurs
on the server and we want to execute some business logic after that happens.
The traditional solution is to do it in our own backend in node/java/.net
probably in the business logic layer. But that means we need to host our
own backend server which means we have to worry about infrastructure.
Can we do better?&lt;/p&gt;

&lt;p&gt;Yes we can. Enter Graphcool server side subscriptions. You write your business logic directly in
the Graphcool console and specify the event which will trigger this logic.&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;p&gt;The goal is to create a stripe customer when a Graphcool customer is created. It’s a very common
use case. The complete code is &lt;a href=&quot;https://github.com/graphcool-examples/functions/tree/master/stripe-create-customer-es6&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enough talk, let’s code!&lt;/p&gt;

&lt;h2 id=&quot;step-1-create-graphcool-schema&quot;&gt;Step 1: Create Graphcool schema&lt;/h2&gt;
&lt;p&gt;Create a Customer type in your Graphcool backend so we have something to crud with.&lt;/p&gt;

&lt;h4 id=&quot;customergraphql&quot;&gt;customer.graphql&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
type Customer implements Node {
  email: String!
  stripeCustomerId: String
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Use the graphcool cli to create a new Graphcool project and create the Customer type.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
npm -g install graphcool
graphcool init –schema customer.graphql
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-2-create-graphcool-server-side-subscription&quot;&gt;Step 2: Create Graphcool server side subscription&lt;/h2&gt;
&lt;p&gt;The cli is powerful but it is still work in progress. You can’t create functions
via the cli at this stage (yet). We’ll create our ssr function via the console
for now. You can open the console using the cli:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
graphcool console
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Go to functions -&amp;gt; new function -&amp;gt; server-side subscription -&amp;gt; select Customer type
as the trigger and click define function. Copy paste the subscription query
below into the left window pane under subscription query.&lt;/p&gt;

&lt;h4 id=&quot;subscriptiongraphql&quot;&gt;subscription.graphql&lt;/h4&gt;
&lt;p&gt;{% highlight C# %}
subscription {
  Customer(filter: {
    mutation_in: [CREATED]
  }) {
    updatedFields
    node {
      id
      email
    }
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Let’s look at this in detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
The &lt;b&gt;&lt;i&gt;subscription&lt;/i&gt;&lt;/b&gt; keyword is a third operation recently added to
graphql in addition to query and mutation.
&lt;/li&gt;
&lt;li&gt;The subscription above means we are subscribing only to Customer create events.
You can also listen to UPDATED and DELETED events but we don&#39;t need those here.
&lt;/li&gt;
&lt;li&gt;When a Customer is created, return the id and email of that newly created customer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back in the console click “Create Function”. Leave inline code on the right pane
as is for now, we’ll write the code for this in the next section.&lt;/p&gt;

&lt;h2 id=&quot;step-3-write-code&quot;&gt;Step 3: Write code!&lt;/h2&gt;
&lt;p&gt;Finally we get to write some code! You can code directly
in the console inline editor, but doing so forgoes a lot of the benefit
of your IDE. Furthermore, behind the scenes inline functions are deployed
to &lt;a href=&quot;https://webtask.io/&quot;&gt;webtask&lt;/a&gt; which is cool
but does not support async await.&lt;/p&gt;

&lt;p&gt;Optionally you can also write and host your code elsewhere (like aws lambda) and
specify that as a webhook. But this means you have to worry about hosting
your code elsewhere.&lt;/p&gt;

&lt;p&gt;In this blog, we want to be able to write es6 code with async await, linting, unit tests,
strong typing, etc in the comfort of our favourite IDE and be able to
deploy that to graphcool. To do this we have to bite the bullet and use
webpack to transpile our code. Luckily for you fellow js devs, readers and
oss fans, I’ve done all the hard work! I have worked out the minimal webpack
config to support async await and the latest es6 features to write Graphcool
functions. There’s a &lt;a href=&quot;#bonus-webpack-configuration&quot;&gt;bonus section&lt;/a&gt; at the
end of this blog if you are interested in how the webpack config works.&lt;/p&gt;

&lt;h3 id=&quot;step-31-copy-packagejson&quot;&gt;Step 3.1: Copy package.json&lt;/h3&gt;
&lt;p&gt;Copy package.json from &lt;a href=&quot;https://github.com/graphcool-examples/functions/tree/master/stripe-create-customer-es6&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;
to your root directory. Then do yarn.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
yarn
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The devDependencies are mostly used by webpack to transpile our code. We also
use jest for unit tests so that’s in there too. We also need the stripe
library and a fetch library so those are included as dependencies.&lt;/p&gt;

&lt;h3 id=&quot;step-32-copy-webpackconfigjs-and-babelrc-and-create-src-dir&quot;&gt;Step 3.2: Copy webpack.config.js and .babelrc and create src dir&lt;/h3&gt;
&lt;p&gt;Copy webpack.config.js and .babelrc files from &lt;a href=&quot;https://github.com/graphcool-examples/functions/tree/master/stripe-create-customer-es6&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;
into the root directory of your project. Check the
&lt;a href=&quot;#bonus-webpack-configuration&quot;&gt;bonus section&lt;/a&gt; below if you want to dig
into the webpack config.&lt;/p&gt;

&lt;p&gt;Also at the root of your project, create a src directory where all your code lives.&lt;/p&gt;

&lt;h2 id=&quot;step-33&quot;&gt;Step 3.3:&lt;/h2&gt;
&lt;p&gt;Create a file called src/createStripeCustomer.js. This file contains all
of our function code. Note that the webpack config you copied is hardcoded to
look for this file under src/createStripeCustomer.js. You can change this
in webpack.config.js if you wish.&lt;/p&gt;

&lt;h4 id=&quot;main-method&quot;&gt;main method&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
const main = event =&amp;gt; {
  const {id, email} = event.data.Customer.node;&lt;/p&gt;

&lt;p&gt;return new Promise(async (resolve, reject) =&amp;gt; {
    try {
      const stripeCustomer = await createStripeCustomer(email);
      const graphCoolCustomer = await updateGraphCoolCustomer(id, stripeCustomer.id);
      console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Successfully updated GraphCool customer: ${JSON.stringify(graphCoolCustomer)}&lt;/code&gt;);
      resolve(event);
    }
    catch (err) {
      console.log(err);
      reject(err);
    }
  });
};
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;createstripecustomer-method&quot;&gt;createStripeCustomer method&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
const createStripeCustomer = async email =&amp;gt; {
  console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Creating stripe customer for ${email}&lt;/code&gt;);
  let stripeCustomer;&lt;/p&gt;

&lt;p&gt;try {
    stripeCustomer = await stripe.customers.create({email});
    console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Successfully created Stripe customer: ${stripeCustomer.id}&lt;/code&gt;);
    return stripeCustomer;
  }
  catch (err) {
    console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Error creating Stripe customer: ${JSON.stringify(err)}&lt;/code&gt;);
    throw err;
  }
};
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;updategraphcoolcustomer-method&quot;&gt;updateGraphCoolCustomer method&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
const updateGraphCoolCustomer = async (id, stripeCustomerId) =&amp;gt; {
  const updateCustomer = JSON.stringify({
    query: `
        mutation {
          updateCustomer(
            id: “${id}”,
            stripeCustomerId: “${stripeCustomerId}”,
          ) {
            id
            stripeCustomerId
            email
          }
        }
      `
  });&lt;/p&gt;

&lt;p&gt;try {
    const response = await fetch(graphCoolEndpoint, {
      headers: {‘content-type’: ‘application/json’},
      method: ‘POST’,
      body: updateCustomer,
    });
    return await response.json();
  }
  catch (err) {
    console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Error updating GraphCool customer: ${JSON.stringify(err)}&lt;/code&gt;);
    throw err;
  }
};
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The entire file is available &lt;a href=&quot;https://github.com/graphcool-examples/functions/blob/master/stripe-create-customer-es6/src/createStripeCustomer.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;
on github.&lt;/p&gt;

&lt;h2 id=&quot;step-4-deploy-and-test&quot;&gt;Step 4: Deploy and test&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&quot;bonus-webpack-configuration&quot;&gt;Bonus: webpack configuration&lt;/h2&gt;
&lt;p&gt;This is not a webpack tutorial but I want to share a few interesting things I
discovered while working on this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
We will export our function by setting module.exports so we need to set
output.libraryTarget to commonjs2.
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;DO NOT BUNDLE THIRD PARTY LIBRARIES!&lt;/b&gt; This will blow up your code size, and it&#39;s
not necessary. Your Graphcool function is executed in webtask
and it supports most of the npm packages you&#39;ll need. Check [here](https://tehsis.github.io/webtaskio-canirequire/){:target=&quot;_blank&quot;}
for packages webtask supports.
&lt;/li&gt;
&lt;li&gt;As a result of the point above, use
[webpack-node-externals](https://github.com/liady/webpack-node-externals){:target=&quot;_blank&quot;} to exclude all npm packages.
&lt;/li&gt;
&lt;li&gt;
GOTCHA: To enable latest es6 features and async await, we have to include two npm packages: babel-polyfill and regenerator-runtime/runtime
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested, you can check the complete webpack config &lt;a href=&quot;https://github.com/graphcool-examples/functions/blob/master/stripe-create-customer-es6/webpack.config.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With client side subscriptions, you’ll use apollo with
the &lt;a href=&quot;https://github.com/apollographql/subscriptions-transport-ws&quot; target=&quot;_blank&quot;&gt;subscriptions-transport-ws&lt;/a&gt;
to enable your js client app to “hot listen” to server changes. The server pushes notifications
to the client, which reacts to these notifications in real-time. It’s super cool!&lt;/p&gt;

&lt;p&gt;This approach incurs a little more time to setup, but I think it’s worth it. We leave the code fully testable, encapsulation intact. 
This feels right for me. Also, you can apply the same technique to test react components wrapped in relay containers. It works!&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/test-react&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="graphcool" />
<category term="functions" />
<category term="server" />
<category term="side" />
<category term="subscription" />
<category term="async" />
<category term="await" />
<category term="es6" />
<category term="graphql" />
<category term="jest" />
<summary>Graphcool is cool. Graphcool functions are even cooler. There are two types of functions:request pipeline and server side subscription. Request pipeline function gets triggeredat a specified stage of a crud request. You write custom business logic you want to executeas part of your api requests here. It is synchronous.</summary>
</entry>
<entry>
<title>React Europe</title>
<link href="http://reactjunkie.com/react-europe/" rel="alternate" type="text/html" title="React Europe" />
<published>2017-05-20T09:30:00+10:00</published>
<updated>2017-05-20T09:30:00+10:00</updated>
<id>http://reactjunkie.com/react-europe</id>
<content type="html" xml:base="http://reactjunkie.com/react-europe/">&lt;p&gt;As I stared at the partially cloudy Parisian sky from my seat at Gare du Nord, 
I had a chance to reflect on the week that was. 4 days jam packed with 
javascript and react from morning till night followed by socialising afterwards 
(my fave), it’s definitely not for the faint-hearted. I admit I was a little 
overwhelmed by the intensity of the schedule.&lt;/p&gt;

&lt;h2 id=&quot;workshops&quot;&gt;Workshops&lt;/h2&gt;
&lt;p&gt;I attended a 2-day advanced react workshop with &lt;a href=&quot;https://github.com/nikgraf&quot; target=&quot;_blank&quot;&gt;Nik Graf (serverless)&lt;/a&gt;
and &lt;a href=&quot;https://github.com/mxstbr&quot; target=&quot;_blank&quot;&gt;Max Stoiber (styled components)&lt;/a&gt;. 
I learnt loads about the react children api which I never really used before from Max and about
the apollo graphql client for react from both Nik and Max. The exercises were very hands-on and realistic.
In one exercise we had to implement a graphql backend and apollo front end for a recipe application.
This involves setting up the graphql types, queries and mutations.&lt;/p&gt;

&lt;p&gt;I am already using graphql and relay at work (qantasassure.com) so I thought this would be a piece of cake.
Not exactly. It turns out the tools for graphql in the backend and frontend have
evolved so much since I set it up 6 months ago, it was almost foreign to me. In a good way.
I learnt it’s so much easier and simpler now to setup a graphql server with types and queries and mutations.
Apollo really has done a lot of work to simplify the integration of graphql into react.&lt;/p&gt;

&lt;p&gt;It’s so good to finally see the face behind the code! I am both a fan and user of serverless
and styled components, so thanks for teaching me so much guys!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/max_nik.png&quot; alt=&quot;Max Stoiber and Nik Graf&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-main-event&quot;&gt;The main event&lt;/h2&gt;
&lt;p&gt;Prior to the start of the conference we heard word that Dan Abramov will not make it to Paris.
He had some visa issues which didn’t allow him to enter Paris. Fuck. I should really ask for
a refund.&lt;/p&gt;

&lt;p&gt;Anyway the conference started with Andrew Clark (recompose) announcing the imminent release
of react fiber (eta end of year). He’s one of the better speakers in the conference. I tend to
pay more attention to people who use the stage and are comfortable moving about on the stage.
The delivery style of the presentation is also important. Some speakers tend to just read off
the screen and narrate, just the recipe to put people to sleep. Think kids and bedtime 
story time. I expected more from all the speakers in this regard.&lt;/p&gt;

&lt;p&gt;Andrew and a few others like Lee Byron, Kevin Lacker, Sunil Pai were excellent though. Part improvised 
part narratted, I really enjoy their presentations. Sunil in particular is my favourite speaker,
he’s really funny. His name reminds of the movie Life of Pi (of course his name is Pai, not Pi).&lt;/p&gt;

&lt;p&gt;My picks:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Lee Byron&lt;/b&gt; - released &lt;a href=&quot;https://facebook.github.io/relay/docs/relay-modern.html&quot; target=&quot;_blank&quot;&gt;Relay Modern v1.0&lt;/a&gt; 
live on stage. Relay Modern now supports static queries, client side only fields and subscriptions. 
Client side only fields mean that you can use relay to replace redux. Relay classic will still be supported in npm under
react-relay/classic.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Sunil Pai&lt;/b&gt; - author of glamour, glam and rakt. Rakt is an ambitious project which aims to umm do everything. By everything I mean
taking care of code splitting, data fetching, inline styling (via glamour) and more. It is still not finished yet, so check
&lt;a href=&quot;https://github.com/threepointone/rakt&quot; target=&quot;_blank&quot;&gt;Sunil’s page&lt;/a&gt; often. Sunil is my favourite speaker at the conference, he’s
engaging, impromptu and funny. All ingredients for a captivating talk.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Andrew Clarke&lt;/b&gt; - talks about React Fiber which will be released with React 16 at the end of the year. He also
briefly talked about react portals, which are components which don’t quite fit in the dom tree like modals
and overlays.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Sarah Drasner&lt;/b&gt; - shows really cool css animations/transforms using &lt;a href=&quot;https://greensock.com/get-started-js&quot; target=&quot;_blank&quot;&gt;GreenSock&lt;/a&gt;. 
It’s so cool and easy to use.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Wix lightning talk&lt;/b&gt; - introduces &lt;a href=&quot;https://github.com/wix/detox&quot; target=&quot;_blank&quot;&gt;detox&lt;/a&gt; which is a functional 
testing framework for react native. It’s super cool! It does grey box e2e testing of your react native apps automatically and it’s super fast!
If you use react native you must check it out.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Apollo lightning talk&lt;/b&gt; - Apollo has released a &lt;a href=&quot;https://github.com/apollographql/apollo-client-devtools&quot; target=&quot;_blank&quot;&gt;chrome devtool plugin&lt;/a&gt;
for graphql. It runs graphiql in chrome devtools! It also has a query inspector and a store inspector. Check it out!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expo lightning talk&lt;/b&gt; - Expo has created a playground for react native at &lt;a href=&quot;http://snack.expo.io&quot; target=&quot;_blank&quot;&gt;snack.expo.io&lt;/a&gt;.
You can run your react native code on the web without the simulator! It’s like jsfiddle for react native.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Sasha Aickin&lt;/b&gt; - talks about streaming react dom to the client in chunks to boost performance. This involves chunk rendering, which is a
technique involving breaking up a page into different chunks, each with its own html, js, css and data. Each chunk
gets flushed to the client side separately, increasing parallelism and hence performance. Check out his github package 
&lt;a href=&quot;https://github.com/aickin/react-dom-stream&quot; target=&quot;_blank&quot;&gt;react-dom-stream&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;social-insights&quot;&gt;Social Insights&lt;/h2&gt;
&lt;p&gt;Perhaps the best lessons I learnt from the conference are not from the speakers, but from the people I met. There
were many like me, all keen to share their views, opinions and experience and also to listen. Talking to these
developers gave me a chance to validate some of the assumptions I make in my projects and to see the tools and 
techniques others use in their apps.&lt;/p&gt;

&lt;p&gt;These are some of the people I met and the insights I gathered from them:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Dafeng Guo cofounder of strikingly&lt;/b&gt; - started strikingly with 2 other founders in YCombinator in 2012. They had 0 paying customers
in 2012, now they have over 130 employees and a lot more customers :). I am a user of strikingly and I can’t recommend it enough. He also
showed me strikingly’s latest wechat feature where strikingly websites now are automatically converted to wechat apps. That’s super cool!
&lt;img src=&quot;/assets/images/dafeng.png&quot; alt=&quot;Dafeng&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Griffith Tchen Pan&lt;/b&gt; - works at myworkpapers.com. Started in Gold Coast Australia and now has offices in USA and London. 8 years of
 dedication and commitment to a product pays off. That’s what I learned from him.
 &lt;img src=&quot;/assets/images/griffith.png&quot; alt=&quot;Griffith&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Brian Christensen&lt;/b&gt; Danish guy I met at the workshop. Arguably the smartest guy in Denmark, he knows everything from docker to glam to
elm, and does not have a CI in place at his workplace. Just kidding Brian :). He drinks a lot.
&lt;img src=&quot;/assets/images/brian.png&quot; alt=&quot;Brian&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It’s not the best organised conference I’ve been for a few reasons.&lt;/p&gt;

&lt;p&gt;Firstly as I mentioned above, some of the speakers weren’t really very engaging. 
It was really tough to keep awake at times. Second the food was really really bad. 
During the workshops, there was no protein whatsoever for lunch. It was only 
salad, quinoa, rice, pasta. Where’s the meat!!?! Or fish??!? Thirdly the cancellation of Dan Abramov was 
disappointing. Even Max Stoiber didn’t stick around to give his presentation (no reason given). 
Maybe they were put off by the food…&lt;/p&gt;

&lt;p&gt;I travelled 26 hours from Sydney Australia, stopping at 3 different countries en route to Paris, 
and then back. Is it worth it? Yes. I definitely won’t forget it. Here are more pics from all
the great people I met. Till next time!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/react_conference_collage.png&quot; alt=&quot;Brian&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="europe" />
<category term="conference" />
<category term="paris" />
<category term="france" />
<summary>As I stared at the partially cloudy Parisian sky from my seat at Gare du Nord, I had a chance to reflect on the week that was. 4 days jam packed with javascript and react from morning till night followed by socialising afterwards (my fave), it’s definitely not for the faint-hearted. I admit I was a little overwhelmed by the intensity of the schedule.</summary>
</entry>
<entry>
<title>Change marker image onPress in react-native-maps</title>
<link href="http://reactjunkie.com/react-native-maps-change-marker-image-onpress/" rel="alternate" type="text/html" title="Change marker image onPress in react-native-maps" />
<published>2017-04-25T09:30:00+10:00</published>
<updated>2017-04-25T09:30:00+10:00</updated>
<id>http://reactjunkie.com/react-native-maps-change-marker-image-onpress</id>
<content type="html" xml:base="http://reactjunkie.com/react-native-maps-change-marker-image-onpress/">&lt;p&gt;Recently I started a new pet project which involves maps and markers on ios and android. Of course I started
this new project in react native. I was expecting a somewhat challenging times ahead because it has been
a few months since I last did react native development. The landscape has definitely improved, and I feel
so fortunate to be a javascript developer at this present moment because of awesome tools like react-native
at our disposal. The possibilities are truly endless.&lt;/p&gt;

&lt;p&gt;Airbnb has open sourced &lt;a href=&quot;https://github.com/airbnb/react-native-maps&quot; target=&quot;_blank&quot;&gt;react-native-maps&lt;/a&gt; which 
made it so easy to integrate mapping capabilities with your app. There are steps to follow to set it all up but 
it’s not that hard.&lt;/p&gt;

&lt;p&gt;All the code in this blog are available on &lt;a href=&quot;https://github.com/yusinto/react-native-map-markers&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Need to display custom map markers on react-native-maps. Then, onPress of a 
marker, change that marker image so the user can see it has 
been selected. The problem is there is no direct way to get the ref of 
the selected marker. Even if there is, there is no setImage method to
change the marker image.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;Out of the box, there’s already an onPress event handler with MapView.Marker
which is a good starting point. We will use this along with the ref and 
image props (also supported out of the box) to solve our problem.&lt;/p&gt;

&lt;h2 id=&quot;are-you-done-talking-show-me-some-code&quot;&gt;Are you done talking? Show me some code!&lt;/h2&gt;
&lt;p&gt;So first things first, you need to install and link react-native-maps:&lt;/p&gt;

&lt;p&gt;{% highlight shell %}
# stick with 0.13.0 to avoid unresolved issues in ^0.14.0
yarn add react-native-maps@0.13.0
{% endhighlight %}
then link it
{% highlight shell %}
react-native link react-native-maps
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;b&gt;GOTCHA&lt;/b&gt; react-native-maps requires babel-plugin-module-resolver as well
otherwise you’ll get this error: Unknown plugin module-resolver. This is a bug
which should be fixed in a later version.&lt;/p&gt;

&lt;p&gt;{% highlight shell %}
yarn add babel-plugin-module-resolver
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Then we can write some code to render a basic map like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
import React, { Component } from ‘react’;
import {AppRegistry, StyleSheet, View} from ‘react-native’;
import MapView from ‘react-native-maps’;&lt;/p&gt;

&lt;p&gt;export default class MapMarkers extends Component {
  state = {
    region: {
      latitude: 1,
      longitude: 1,
      latitudeDelta: 0.0043, // hardcode zoom levels just for example
      longitudeDelta: 0.0034,
    },
  };&lt;/p&gt;

&lt;p&gt;componentDidMount() {
    navigator.geolocation.getCurrentPosition(
      position =&amp;gt; this.setState({
        region: {
          …this.state.region,
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        }
      }),
      error =&amp;gt; alert(JSON.stringify(error)), {
        enableHighAccuracy: true,
        timeout: 20000,
        maximumAge: 1000
      }
    );
  }&lt;/p&gt;

&lt;p&gt;// note that you need to style the map, otherwise you’ll get
  // a blank screen
  render() {
    return (
      &amp;lt;View style={styles.root}&amp;gt;
        &amp;lt;MapView style={styles.map}
                 showsUserLocation={true}
                 followsUserLocation={true}
                 initialRegion={this.state.region}
        /&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
}&lt;/p&gt;

&lt;p&gt;const styles = StyleSheet.create({
  root: {
    flex: 1,
    justifyContent: ‘center’,
    alignItems: ‘center’,
  },
  map: {
    position: ‘absolute’,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
});&lt;/p&gt;

&lt;p&gt;AppRegistry.registerComponent(‘mapMarkers’, () =&amp;gt; MapMarkers);&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;ios-simulator-setup&quot;&gt;iOS Simulator Setup&lt;/h2&gt;
&lt;p&gt;Before you run this in the simulator, you’ll need to set a custom location
in the ios simulator. We’ll only be demoing on ios only for this blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/simulator_location_menu.png&quot; alt=&quot;Simulator Location Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the custom location to Cafe Sydney -33.861924, 151.210891. If you haven’t
been, you have to! It’s an awesome restaurant!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/custom_location.png&quot; alt=&quot;Set Custom Location&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-the-project&quot;&gt;Run the project&lt;/h2&gt;

&lt;p&gt;{% highlight shell %}
react-native run-ios
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You should see a map view with the user location set to Cafe Sydney in Australia.
Now let’s add a few markers.&lt;/p&gt;

&lt;p&gt;{% highlight js%}
// Add these at the top of the file, straight after the imports
const RESTAURANTS = [
  {
    key: ‘Cafe Sydney’,
    title: ‘Cafe Sydney’,
    description: ‘Customs House, 31 Alfred St, Sydney NSW 2000’,
    latLong: {
      latitude: -33.861924,
      longitude: 151.210891,
    },
  },
  {
    key: ‘Four Frogs Creperie’,
    title: ‘Four Frogs Creperie’,
    description: ‘1 Macquarie Pl, Sydney NSW 2000’,
    latLong: {
      latitude: -33.861755,
      longitude: 151.209941,
    },
  },
  {
    key: ‘Tapavino’,
    title: ‘Tapavino’,
    description: ‘6 Bulletin Pl, Sydney NSW 2000’,
    latLong: {
      latitude: -33.862512,
      longitude: 151.209490,
    },
  },
];&lt;/p&gt;

&lt;p&gt;// then modify your render method to look like this
  render() {
    return (
      &amp;lt;View style={styles.root}&amp;gt;
        &amp;lt;MapView style={styles.map}
                 showsUserLocation={true}
                 followsUserLocation={true}
                 initialRegion={this.state.region}
        &amp;gt;
          {
            RESTAURANTS.map((m, i) =&amp;gt;
              &amp;lt;MapView.Marker
                coordinate={m.latLong}
                title={m.title}
                description={m.description}
                key={&lt;code class=&quot;highlighter-rouge&quot;&gt;marker-${i}&lt;/code&gt;}
              /&amp;gt;
            )
          }
        &amp;lt;/MapView&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You should see 3 markers on the map. Now we want to use a custom image 
for our marker. MapView has an image prop we can set so that’s easy. 
Then onPress of a marker, we want to change this image to a different 
one to show the user that it has been selected. Again MapView has an 
onPress prop which we can use to set a custom callback when a marker gets pressed.&lt;/p&gt;

&lt;p&gt;Here’s the trick, onpress of a marker, we have to pass the index of the selected
marker and save that to state. Then on the image prop, we can inspect
if the marker being rendered matches the selected index in state, and use
a different image if so.&lt;/p&gt;

&lt;p&gt;{% highlight js%}
// At the top of the file after imports, we require our marker images
const marker = require(‘./assets/images/marker.png’);
const selectedMarker = require(‘./assets/images/marker-selected.png’);&lt;/p&gt;

&lt;p&gt;// Then in our class
onPressMarker(e, index) {
    this.setState({selectedMarkerIndex: index});
}&lt;/p&gt;

&lt;p&gt;// Then in our render method, we specify onPress and image props.
// For brevity, I only include the relevant bits of code here
RESTAURANTS.map((m, i) =&amp;gt;
  &amp;lt;MapView.Marker
    coordinate={m.latLong}
    title={m.title}
    description={m.description}
    key={&lt;code class=&quot;highlighter-rouge&quot;&gt;marker-${i}&lt;/code&gt;}
    onPress={(e) =&amp;gt; this.onPressMarker(e, i)}
    image={this.state.selectedMarkerIndex === i ? selectedMarker : marker} // this is the crux of the blog
  /&amp;gt;
)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/react-native-map-markers&quot; target=&quot;_blank&quot;&gt;complete code&lt;/a&gt; on 
github. Let me know if this helps!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="native" />
<category term="maps" />
<category term="change" />
<category term="marker" />
<category term="image" />
<category term="onpress" />
<summary>Recently I started a new pet project which involves maps and markers on ios and android. Of course I startedthis new project in react native. I was expecting a somewhat challenging times ahead because it has beena few months since I last did react native development. The landscape has definitely improved, and I feelso fortunate to be a javascript developer at this present moment because of awesome tools like react-nativeat our disposal. The possibilities are truly endless.</summary>
</entry>
<entry>
<title>Scheduling Feature Flag Deployment</title>
<link href="http://reactjunkie.com/scheduling-feature-flag-deployment/" rel="alternate" type="text/html" title="Scheduling Feature Flag Deployment" />
<published>2017-02-28T08:30:00+11:00</published>
<updated>2017-02-28T08:30:00+11:00</updated>
<id>http://reactjunkie.com/scheduling-feature-flag-deployment</id>
<content type="html" xml:base="http://reactjunkie.com/scheduling-feature-flag-deployment/">&lt;h4 id=&quot;updated-mon-13-march-2017&quot;&gt;Updated Mon 13 March 2017&lt;/h4&gt;

&lt;p&gt;Use Launch Darkly? Love their feature flagging and a/b testing features? Like reading blog posts that sounds like an informercial? Umm…&lt;/p&gt;

&lt;p&gt;Anyway I use Launch Darkly at my workplace (I work at an airline company spelt with a Q and I live in Sydney Australia) and I recently faced a
challenge with zero dark thirty deployments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tropic.jpg&quot; alt=&quot;Zero dark what?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No no what I meant was I had feature flagging in place in my app, and I had to turn flags on (and off) at unearthly hours like 12:01 AM. So being a hacker,
I wasn’t going to lie down and wait for 12:01 AM to come by and turn on a switch. No sir! I am much much smarter than that. Instead, I spent sleepless nights
doing 30 hour days to write a node app that will do it for me. Take that zero dark thirty deployments!&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Need to turn flags on/off automatically at a specified scheduled time.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;A cron job that uses &lt;a href=&quot;http://apidocs.launchdarkly.com/docs/update-feature-flag&quot; target=&quot;_blank&quot;&gt;launch darkly apis&lt;/a&gt; to automatically turn on/off flags.&lt;/p&gt;

&lt;h2 id=&quot;enough-talk-show-me-some-code&quot;&gt;Enough talk, show me some code&lt;/h2&gt;
&lt;p&gt;Using the rest apis, you can update your flag with something  like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
const headers = {
  Accept: ‘&lt;em&gt;/&lt;/em&gt;’,
  ‘Content-Type’: ‘application/json’,
  Authorization: ‘your-api-key’,
  ‘accept-encoding’: ‘gzip, deflate’
};
const body = JSON.stringify([{
  op: ‘replace’,
  path: ‘/environments/test’;,
  value: true,
}]);
const url = ‘https://app.launchdarkly.com/api/v2/flags/default/your-key’;
const response = await fetch(url, {
    method: ‘PATCH’,
    headers,
    body
});&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Of course you’ll need to add some defensive programming for error catching
and retries plus configuration for test and production environments
plus notifications when updates are successful/not successful, and the
list goes on.&lt;/p&gt;

&lt;p&gt;If you go down this path, you soon realise that this is not a trivial 
task by any means. An ad-hoc solution like this involves hard coding
flag names and continual updates which are almost as bad as waking up at 
12:01 AM to do the deployments manually.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://github.com/yusinto/ld-scheduler&quot; target=&quot;_blank&quot;&gt;ld-scheduler&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ld-scheduler&quot;&gt;ld-scheduler&lt;/h2&gt;
&lt;p&gt;With ld-scheduler, you do this from your node app:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
yarn add ld-scheduler
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
import ldScheduler from ‘ld-scheduler’;&lt;/p&gt;

&lt;p&gt;ldScheduler.runEveryXSeconds({
  environment: ‘test’,
  apiKey: ‘your-secret-api-key’,
  slack: ‘your-slack-webhook-url’
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;and you schedule your flags through launch darkly’s dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ld-scheduler-flag-settings-resized.png&quot; alt=&quot;LaunchDarkly dashboard scheduling config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HACK&lt;/strong&gt;: We hijack the description field to store our scheduling config as a json object where:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;taskType is killSwitch&lt;/li&gt;
    &lt;li&gt;value is true (kill switch on) or false (kill switch off)&lt;/li&gt;
    &lt;li&gt;
        targetDeploymentDateTime must be in YYYY-MM-DD HH:mm Z
        &lt;p&gt;
            &lt;b&gt;NOTE:&lt;/b&gt; the UTC offset at the end is especially important because ld-scheduler uses moment which will use the host&#39;s timezone if it is not specified.
             That means if you deploy ld-scheduler to the cloud say on aws lambda where the machine clock is set to UTC timezone, then your flag will be deployed at
             UTC time, which is probably not what you want unless you are living in London!
        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;description is a textual string for the purpose of human readability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;AND&lt;/em&gt;&lt;/strong&gt; you need to set a tag called “${yourEnv}-scheduled”. For example, if you are scheduling a flag in the test environment,
your tag should be called “test-scheduled”. Likewise if you are scheduling it in production, you need to add a “production-scheduled” tag.&lt;/p&gt;

&lt;p&gt;When ld-scheduler runs, it will set your flag on/off according the the json configuration. It will also remove the “${yourEnv}-scheduled” tag so
it does not get reprocessed. If there’s no other scheduled tags, then ld-scheduler also sets the “Description” field
to the json.description string, thereby deleting the json config replacing it with the description string.&lt;/p&gt;

&lt;p&gt;This way, you can safely run 2 instances of ld-scheduler; one for each environment without having to worry about race conditions.&lt;/p&gt;

&lt;h2 id=&quot;extra&quot;&gt;Extra&lt;/h2&gt;
&lt;p&gt;ld-scheduler supports a second taskType “fallThoughRollout” which you can use to set the default fallThrough rollout percentage:&lt;/p&gt;

&lt;p&gt;{% highlight json %}
{
    “taskType”: “fallThroughRollout”,
    “targetDeploymentDateTime”: “2017-03-3 02:33”,
    “description”: “Human readable flag description”,
    “value”: [
        {
            “variation”: 0,
            “weight”: 90000
        },
        {
            “variation”: 1,
            “weight”: 10000
        }
    ]
}
{% endhighlight %}
where variation 0 is true and variation 1 is false. Weight is in mili-percentage (if there’s such a word) i.e. 90000 === 90% and 10000 === 10%.
Of course you would enter this json object in the “Description” field of your flag settings in launch darkly’s dashboard
&lt;strong&gt;&lt;em&gt;AND&lt;/em&gt;&lt;/strong&gt; set a “${yourEnv}-scheduled” tag.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/ld-scheduler/tree/master/example&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="schedule" />
<category term="feature" />
<category term="flag" />
<category term="deployment" />
<category term="ld" />
<category term="scheduler" />
<category term="automate" />
<category term="automation" />
<category term="scheduling" />
<summary>Updated Mon 13 March 2017</summary>
</entry>
<entry>
<title>Testing Connected Redux and Relay Components</title>
<link href="http://reactjunkie.com/testing-connected-redux-relay-components/" rel="alternate" type="text/html" title="Testing Connected Redux and Relay Components" />
<published>2017-01-28T08:30:00+11:00</published>
<updated>2017-01-28T08:30:00+11:00</updated>
<id>http://reactjunkie.com/testing-connected-redux-relay-components</id>
<content type="html" xml:base="http://reactjunkie.com/testing-connected-redux-relay-components/">&lt;p&gt;Happy chinese new year everyone! In the spirit of the year of the cock, I shall write the rest of this post in chinese. 
中国著名的大思想家、大教育家。孔子开创了私人讲学的风气，是儒家学派的创始人。孔子曾受业于老子 (roughly translates to… I don’t know).
Did I say Cock? I mean Rooster. Apologies my dear chinese readers… I don’t think there’s a difference anyway?&lt;/p&gt;

&lt;p&gt;I’m gonna talk about testing redux components today. If you use react-redux, you are probably connecting
your components to redux using the connect method. If you do this in one file with a single default export (which is the connected component)
you have a problem. You’ll find that you can’t test your component directly because the default export of your module is not the component
itself, rather it’s the redux connected component. What you want to test is the presentational component, not the connected component. Redux
itself is already tested!&lt;/p&gt;

&lt;p&gt;You have two options at this point; you can either bite the bullet and test the redux component meaning mocking a lot of the redux stuff OR 
you can modify your code to be testable by exporting the private presentational component. This second approach is the one recommended by the 
&lt;a href=&quot;https://github.com/reactjs/redux/blob/master/docs/recipes/WritingTests.md&quot; target=&quot;_blank&quot;&gt;official redux documentation&lt;/a&gt;. I find that although 
this works it does so at the expense of encapsulation. I believe code should be driven by design and requirements, not testing restrictions. 
So I set out to find a better approach.&lt;/p&gt;

&lt;p&gt;There is a popular npm package &lt;a href=&quot;https://github.com/jhnns/rewire&quot; target=&quot;_blank&quot;&gt;rewire&lt;/a&gt; which seems to be promising. I failed to make it work
quickly though, because it does not work with es6 so a little more googling reveals &lt;a href=&quot;https://github.com/speedskater/babel-plugin-rewire&quot; target=&quot;_blank&quot;&gt;babel-plugin-rewire&lt;/a&gt; 
which is based on rewire and works with es6. Armed with this library, I embarked on a journey towards a better cock year oops I mean better unit tests.&lt;/p&gt;

&lt;h2 id=&quot;enough-talk-show-me-some-code&quot;&gt;Enough talk, show me some code&lt;/h2&gt;
&lt;p&gt;Consider the following code (which you can see in entirety &lt;a href=&quot;https://github.com/yusinto/test-react/blob/master/src/universal/home/home.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;h4 id=&quot;homejs&quot;&gt;home.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
import React, {Component} from ‘react’;
import {connect} from ‘react-redux’;
import * as Actions from ‘./homeAction’;&lt;/p&gt;

&lt;p&gt;// private class
class Home extends Component {
  constructor(props) {
    super(props);
    this.onClickGenerateRandom = ::this.onClickGenerateRandom;
  }&lt;/p&gt;

&lt;p&gt;onClickGenerateRandom() {
    this.props.generateRandom();
  }&lt;/p&gt;

&lt;p&gt;render() {
    let homeText = ‘Click button below to generate a random number!’;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return (
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;{ homeText }&amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;{this.props.randomNumber}&amp;lt;/div&amp;gt;
    &amp;lt;button onClick={this.onClickGenerateRandom}&amp;gt;
        Generate random number
    &amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
);   } }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;const mapStateToProps = (state) =&amp;gt; {
  const homeState = state.Home;&lt;/p&gt;

&lt;p&gt;return {
    randomNumber: homeState.randomNumber
  };
};&lt;/p&gt;

&lt;p&gt;export default connect(mapStateToProps, Actions)(Home);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The Home class is private and that’s what we want to test. It is not exported at all, so we can’t access it directly. 
As mentioned above, the official redux documentation recommends exporting this class, but that breaks encapsulation.
So what do we do? Enter &lt;a href=&quot;https://github.com/speedskater/babel-plugin-rewire&quot; target=&quot;_blank&quot;&gt;babel-plugin-rewire&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-rewire&quot;&gt;Using rewire&lt;/h2&gt;
&lt;p&gt;You need to install the following npm packages:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
yarn add –dev jest babel-plugin-rewire enzyme react-addons-test-utils
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://facebook.github.io/jest/&quot; target=&quot;_blank&quot;&gt;jest&lt;/a&gt; for my test framework and you should too, it kicks butt. 
I also use &lt;a href=&quot;https://github.com/airbnb/enzyme&quot; target=&quot;_blank&quot;&gt;enzyme&lt;/a&gt; which is a utility library for testing react components. 
Enzyme requires the official &lt;a href=&quot;https://facebook.github.io/react/docs/test-utils.html&quot; target=&quot;_blank&quot;&gt;react-addons-test-utils&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;In your .babelrc, add an “env” block to include babel-plugin-rewire when running tests:&lt;/p&gt;

&lt;h4 id=&quot;babelrc&quot;&gt;.babelrc&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
{
    “presets”: [“es2015”, “react”, “stage-0”],&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* etc your other config */

&quot;env&quot;: {
  &quot;test&quot;: {
    &quot;plugins&quot;: [&quot;babel-plugin-rewire&quot;]
  }
} } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;write-the-tests&quot;&gt;Write the tests!&lt;/h2&gt;
&lt;p&gt;Now we can write the tests! The complete file is &lt;a href=&quot;https://github.com/yusinto/test-react/blob/master/src/universal/home/home.test.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;h4 id=&quot;hometestjs&quot;&gt;home.test.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
import React from ‘react’;
import {shallow} from ‘enzyme’;
import HomeRedux from ‘./home’;&lt;/p&gt;

&lt;p&gt;describe(‘Home component tests’, () =&amp;gt; {
  // rewire injects &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; methods to all our modules.
  // These can then be used to extract and set top level private variables.
  // In this instance, we extract the private Home class
  const Home = HomeRedux.&lt;strong&gt;get&lt;/strong&gt;(‘Home’);&lt;/p&gt;

&lt;p&gt;it(‘should render correctly’, () =&amp;gt; {
    // Yayy! We can now render the presentational component directly! 
    const output = shallow(&amp;lt;Home randomNumber={45}/&amp;gt;);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Use jest snapshot testing for convenience
expect(output).toMatchSnapshot();   }); }); {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This approach incurs a little more time to setup, but I think it’s worth it. We leave the code fully testable, encapsulation intact. 
This feels right for me. Also, you can apply the same technique to test react components wrapped in relay containers. It works!&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/test-react&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="redux" />
<category term="relay" />
<category term="connected" />
<category term="unit" />
<category term="tests" />
<category term="testing" />
<category term="encapsulation" />
<category term="jest" />
<category term="rewire" />
<summary>Happy chinese new year everyone! In the spirit of the year of the cock, I shall write the rest of this post in chinese. 中国著名的大思想家、大教育家。孔子开创了私人讲学的风气，是儒家学派的创始人。孔子曾受业于老子 (roughly translates to… I don’t know).Did I say Cock? I mean Rooster. Apologies my dear chinese readers… I don’t think there’s a difference anyway?I’m gonna talk about testing redux components today. If you use react-redux, you are probably connectingyour components to redux using the connect method. If you do this in one file with a single default export (which is the connected component)you have a problem. You’ll find that you can’t test your component directly because the default export of your module is not the componentitself, rather it’s the redux connected component. What you want to test is the presentational component, not the connected component. Reduxitself is already tested!</summary>
</entry>
<entry>
<title>Building graphql schema without babelrc</title>
<link href="http://reactjunkie.com/build-graphql-schema-without-babelrc/" rel="alternate" type="text/html" title="Building graphql schema without babelrc" />
<published>2016-12-12T19:30:00+11:00</published>
<updated>2016-12-12T19:30:00+11:00</updated>
<id>http://reactjunkie.com/build-graphql-schema-without-babelrc</id>
<content type="html" xml:base="http://reactjunkie.com/build-graphql-schema-without-babelrc/">&lt;p&gt;Man it has been a busy month! It’s been a while since I blogged, I have to say I miss it a lot. Almost as much as I 
miss drinking..&lt;/p&gt;

&lt;p&gt;Today I’ll be talking about graphql and relay, specifically about building the schema. Warning this is not a beginner’s
guide to graphql and relay, there are tons of other tutorials which can help you with that. This blog is about
decoupling your graphql schema build from your project’s .babelrc file.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Your project has a .babelrc file which contains presets, plugins, etc used by babel when you run your app. You need 
to include babelRelayPlugin in your .babelrc plugins section so your relay app can comprehend your graphql schema.&lt;/p&gt;

&lt;p&gt;However, babelRelayPlugin.js contains a reference to schema.json which is generated by babel-node &lt;a href=&quot;https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js&quot; target=&quot;_blank&quot;&gt;updateSchema.js&lt;/a&gt; 
which in turn uses .babelrc which has a dependency on babelRelayPlugin which is a cyclic dependency which gives me a 
migraine.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;We need to decouple graphql schema generation from app runtime. The standard .babelrc file is required for our app runtime so that stays.
That means we cannot depend on .babelrc for our schema generation i.e. when running &lt;a href=&quot;https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js&quot; target=&quot;_blank&quot;&gt;updateSchema.js&lt;/a&gt;
we can’t use babel-node. Instead we use plain vanilla node in combination with babel-register with inline
config when running updateSchema.&lt;/p&gt;

&lt;h2 id=&quot;enough-talk-show-me-some-code&quot;&gt;Enough talk, show me some code&lt;/h2&gt;
&lt;p&gt;You need the following babel packages:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
sudo yarn add –dev babel-polyfill babel-preset-latest
sudo yarn add babel-register babel-preset-stage-0
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;In your package.json, you declare an npm run command update-schema which points an index.js file:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
“scripts”: {
    “update-schema”: “node ./src/graphql/index.js”,
    …
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Your src/graphql/index.js then looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
require(‘babel-register’)({
  babelrc: false,
  presets: [
    “latest”
  ]
});
require(“babel-polyfill”); // required for async generators
require(‘./updateSchema’);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;where updateSchema.js is provided by facebook &lt;a href=&quot;https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/movie-time&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="graphql" />
<category term="schema" />
<category term="relay" />
<category term="react" />
<category term="babel" />
<category term="babelrc" />
<category term="build" />
<category term="babelrelayplugin" />
<summary>Man it has been a busy month! It’s been a while since I blogged, I have to say I miss it a lot. Almost as much as I miss drinking..</summary>
</entry>
<entry>
<title>Targeting users with React Redux and Launch Darkly</title>
<link href="http://reactjunkie.com/launch-darkly-part-two/" rel="alternate" type="text/html" title="Targeting users with React Redux and Launch Darkly" />
<published>2016-11-01T19:30:00+11:00</published>
<updated>2016-11-01T19:30:00+11:00</updated>
<id>http://reactjunkie.com/launch-darkly-part-two</id>
<content type="html" xml:base="http://reactjunkie.com/launch-darkly-part-two/">&lt;p&gt;In my &lt;a href=&quot;http://www.reactjunkie.com/react-feature-toggle-launch-darkly/&quot; target=&quot;_blank&quot;&gt;previous previous post&lt;/a&gt; 
I introduced launch darkly as a feature toggling platform and how to use it with react redux. In this post I
will explain how you can further leverage the power of feature toggling with user targeting.&lt;/p&gt;

&lt;h2 id=&quot;whats-user-targeting&quot;&gt;What’s user targeting?&lt;/h2&gt;
&lt;p&gt;You have a feature or functionality you only want to display to a select group of audience. For example 
releasing a beta feature to users who have signed up. Kinda like a sneak preview for early adopters. 
Or perhaps you want to show special offers only to premium members of your website. This is user targeting.&lt;/p&gt;

&lt;h2 id=&quot;ok-sounds-interesting-how-do-i-do-it&quot;&gt;Ok sounds interesting. How do I do it?&lt;/h2&gt;
&lt;p&gt;On init, you’ll need to pass a user object to Launch Darkly so it has something to work with:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
import ldClient from ‘ldclient-js’;&lt;/p&gt;

&lt;p&gt;// Launch Darkly supports the following user attributes by default
const user = {
   key: ‘some-unique-key’, // mandatory, the only mandatory property
   ip: ‘111.222.3.4’,
   email: ‘some@email.com’,
   name: ‘React Junkie’,
   firstName: ‘React’,
   lastName: ‘Junkie’,
   country: ‘Australia’
};&lt;/p&gt;

&lt;p&gt;ldClient.initialize(‘your/client/side/id’, user);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You’ll need to pass a user object containing at least a key property to Launch Darkly.&lt;/p&gt;

&lt;h2 id=&quot;configure-the-dashboard&quot;&gt;Configure the dashboard&lt;/h2&gt;
&lt;p&gt;Login to Launch Darkly and in the Feature Flags section select a feature flag. In the targeting section,
you can target individual users, use rules to target a group of users or default to a blanket rule for 
all users.&lt;/p&gt;

&lt;p&gt;I will delve into using rules to target a group of users because I think that’s a more common use case 
compared to targeting individual users.&lt;/p&gt;

&lt;p&gt;For example, the settings below will target users in Australia:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/user_targeting_by_country.png&quot; alt=&quot;Targeting user by country?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also serve true to a percentage of Australian users using the “percentage rollout” serve option.
For example the settings below will rollout true to 50% of Australian users:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/user_targeting_percentage_rollout.png&quot; alt=&quot;Targeting user by country percentage rollout?&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;advanced-targeting&quot;&gt;Advanced targeting&lt;/h3&gt;
&lt;p&gt;If you look carefully there’s an Advanced option if you select percentage rollout. The purpose of this 
option is not very obvious. In our example above you can use this advanced option to further group 
Australian users by (say) their browser.&lt;/p&gt;

&lt;p&gt;For example, the settings below will serve true to half of chrome users, half of safari users, 
half of firefox users, etc. It’s a way of “bucketing” your users so each bucket receives the 
percentage rollout you specified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/user_targeting_advanced.png&quot; alt=&quot;Targeting user by country percentage rollout?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage-with-ld-redux&quot;&gt;Usage with ld-redux&lt;/h2&gt;
&lt;p&gt;If you use &lt;a href=&quot;https://github.com/yusinto/ld-redux&quot; target=&quot;_blank&quot;&gt;ld-redux&lt;/a&gt;, you pass the user object
as the third parameter to ldRedux.init method:
{% highlight javascript %}
import createStore from ‘&lt;your-project&gt;/store&#39;;
import ldRedux from &#39;ld-redux&#39;;&lt;/your-project&gt;&lt;/p&gt;

&lt;p&gt;// standard redux createStore
const store = createStore();&lt;/p&gt;

&lt;p&gt;const user = {
   key: ‘some-unique-key’,
   ip: ‘111.222.3.4’,
   email: ‘some@email.com’,
   name: ‘React Junkie’,
   firstName: ‘React’,
   lastName: ‘Junkie’,
   country: ‘Australia’
};&lt;/p&gt;

&lt;p&gt;// Pass the user object after store to the init method
ldRedux.init(‘yourClientSideId’, store, user);&lt;/p&gt;

&lt;p&gt;render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Router routes={routes} history={browserHistory}/&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(‘reactDiv’)
);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;By default, if you don’t specify a user object, ld-redux will create a default
user like below:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
user = {
   key: uuid.v4(),
   ip: ip.address(),
   custom: {
        browser: userAgentParser.getResult().browser.name,
        device, // either mobile, tablet or desktop
   },
};
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You can see the complete logic for default user creation &lt;a href=&quot;https://github.com/yusinto/ld-redux/blob/master/src/init.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The custom property allows you to pass any arbitrary properties to Launch Darkly which you can use for targeting. This is very useful and powerful.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Feature flagging coupled with user targeting is a powerful way to control your target audience. This opens up a whole
new world of possibilities in regards to what you can do with your app. Someday all apps will be built this way.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://github.com/yusinto/ld-redux&quot; target=&quot;_blank&quot;&gt;ld-redux&lt;/a&gt; if you haven’t, and please give me some feedback if you use it! Thanks.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="targeting" />
<category term="users" />
<category term="react" />
<category term="redux" />
<category term="feature" />
<category term="toggle" />
<category term="launch" />
<category term="darkly" />
<category term="toggling" />
<category term="ld-redux" />
<summary>In my previous previous post I introduced launch darkly as a feature toggling platform and how to use it with react redux. In this post Iwill explain how you can further leverage the power of feature toggling with user targeting.What’s user targeting?You have a feature or functionality you only want to display to a select group of audience. For example releasing a beta feature to users who have signed up. Kinda like a sneak preview for early adopters. Or perhaps you want to show special offers only to premium members of your website. This is user targeting.</summary>
</entry>
<entry>
<title>Hot Reloading Universally Bundled Webpack Apps</title>
<link href="http://reactjunkie.com/universal-hot-reload/" rel="alternate" type="text/html" title="Hot Reloading Universally Bundled Webpack Apps" />
<published>2016-10-22T10:52:00+11:00</published>
<updated>2016-10-22T10:52:00+11:00</updated>
<id>http://reactjunkie.com/universal-hot-reload</id>
<content type="html" xml:base="http://reactjunkie.com/universal-hot-reload/">&lt;p&gt;I learnt quite a lot in the past week. Firstly there’s no substitute to good sleep. Secondly, you can actually eat a salmon steak raw! Thirdly, it’s really really hard
to hot reload a server bundle if you are writing a universal app.&lt;/p&gt;

&lt;p&gt;On the client side, &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot; target=&quot;_blank&quot;&gt;webpack-dev-middleware&lt;/a&gt; and &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot; target=&quot;_blank&quot;&gt;react-hot-loader&lt;/a&gt;
have been around for a while now and have become indispensable to developers. However, what about the server side?&lt;/p&gt;

&lt;p&gt;One solution is to use nodemon to restart the server on file changes. This works if you don’t bundle your server side code. If you do, you’ll have to use a task runner 
like gulp to first compile your code, then use nodemon to restart the server.&lt;/p&gt;

&lt;p&gt;I don’t particularly like this solution because I need to introduce gulp and nodemon into my project. I believe webpack can solve anything and everything. So the challenge was set:
use only webpack to implement server side bundling and hot reload.&lt;/p&gt;

&lt;p&gt;The final product is &lt;a href=&quot;https://github.com/yusinto/universal-hot-reload&quot; target=&quot;_blank&quot;&gt;universal-hot-reload&lt;/a&gt; if you want to skip straight to dessert.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The plan&lt;/h2&gt;

&lt;p&gt;We want to use webpack to watch our server files for changes, rebundle on change and restart the express server for changes to take effect.&lt;/p&gt;

&lt;h2 id=&quot;whats-so-hard-about-it&quot;&gt;What’s so hard about it?&lt;/h2&gt;

&lt;p&gt;Watching files for changes is already supported by webpack out of the box so that’s easy. For example we can do this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
  function watchServerChanges() {
    const webpack = require(‘webpack’);
    const serverCompiler = webpack(require(‘path/to/webpack/server/config’);
    const options = {
      aggregateTimeout: 300, // wait so long for more changes
      poll: true // use polling instead of native watchers
    };&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverCompiler.watch(options, function onServerChange(err, stats) {
  if (err) {
    console.log(&#39;Server bundling error:&#39; + JSON.stringify(err));
    return;
  }

  // TODO: restart express here 
});   } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can call watchServerChanges on our server bootstrap and walah problem solved. Well not quite. How do we tackle restarting express on server file changes?&lt;/p&gt;

&lt;h2 id=&quot;step-1-express-server-restart-using-htttpserverclose&quot;&gt;Step 1: Express server restart using htttp.Server.close()&lt;/h2&gt;
&lt;p&gt;The http.Server object provides a &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_close_callback&quot; target=&quot;_blank&quot;&gt;close&lt;/a&gt; method which sounds like it might do the job.
For example we can theoretically do this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
  function onServerChange(err, stats) {
    if (err) {
      console.log(‘Server bundling error:’ + JSON.stringify(err));
      return;
    }&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// TODO: somehow get a reference to the running http.Server object;
//const httpServer = ??? 

httpServer.close(function () {
  console.log(&#39;Server restarted &#39; + new Date());
});   } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Two things we need to solve here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We need to obtain a reference to the running http.Server object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;close() does not restart the server. It stops the server from accepting new connections and then shuts down the server when all its existing connections have closed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-11-getting-a-reference-to-httpserver&quot;&gt;Step 1.1: Getting a reference to http.Server&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/neo_spoon.jpg&quot; alt=&quot;Neo Spoon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at some code.&lt;/p&gt;

&lt;h4 id=&quot;srcserverindexjs-bootstrap&quot;&gt;src/server/index.js (bootstrap)&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
  require(‘babel-polyfill’);&lt;/p&gt;

&lt;p&gt;// require the server entry file where the express server is initialised
  // expect the server entry file to export a http.Server object
  const httpServer = require(‘./server’);&lt;/p&gt;

&lt;p&gt;//… then we can call httpServer.close() at some point later
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;srcserverserverjs-entry&quot;&gt;src/server/server.js (entry)&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
import express from ‘express’;&lt;/p&gt;

&lt;p&gt;const PORT = 3000;
const app = express();&lt;/p&gt;

&lt;p&gt;//… your other express middlewares&lt;/p&gt;

&lt;p&gt;// the listen method returns the currently running instance of 
// http.Server object 
const httpServer = app.listen(PORT, () =&amp;gt; {
  console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Listening at ${PORT}&lt;/code&gt;);
});&lt;/p&gt;

&lt;p&gt;// export httpServer object so we can access it in bootstrap
module.exports = httpServer;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;What’s happening here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;src/server/index.js is our bootstrap file. It requires src/server/server.js 
and expects an http.Server object as the exported value of that module.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In server.js, the listen() method returns an instance of the running http.Server object. 
This is what we export out of this module for index.js.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are not done yet. Merely setting module.exports will not expose the exported object to
the consumer of our bundled js. Essentially we need to create a library out of our app. 
Meaning the main export of our app needs to be exposed to the consumer. To do this, 
in your webpack server config file, set &lt;strong&gt;output.libraryTarget = ‘commonjs2’&lt;/strong&gt;, like so:&lt;/p&gt;

&lt;h4 id=&quot;webpackconfigserverjs&quot;&gt;webpack.config.server.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
const webpack = require(‘webpack’);
const path = require(‘path’);
const nodeExternals = require(‘webpack-node-externals’);&lt;/p&gt;

&lt;p&gt;module.exports = {
  devtool: ‘cheap-module-inline-source-map’,&lt;/p&gt;

&lt;p&gt;// set this to your server entry point. This should be where you start 
  // your express server with .listen()
  entry: ‘./src/server/server.js’,&lt;/p&gt;

&lt;p&gt;// tell webpack this bundle will be used in nodejs environment.
  target: ‘node’,&lt;/p&gt;

&lt;p&gt;// Omit node_modules code from the bundle. You don’t want and don’t 
  // need them in the bundle.
  externals: [nodeExternals()], 
  output: {
    path: path.resolve(‘dist’),
    filename: ‘serverBundle.js’,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// IMPORTANT! Add module.exports to the beginning of the bundle 
// so your main module is exposed to the consumer of the bundle.
libraryTarget: &#39;commonjs2&#39;   },   // The rest of the config is pretty standard and can contain    // other webpack stuff you need.   module: {
loaders: [
  {
    test: /\.json$/,
    loader: &#39;json-loader&#39;
  },
  {
    test: /\.jsx?$/,
    loader: &#39;babel&#39;,
    include: path.resolve(&#39;src&#39;)
  }]   } }; {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-12-restarting-express&quot;&gt;Step 1.2: Restarting express&lt;/h3&gt;

&lt;p&gt;Now we have http.Server, we can call close() to stop the server. However as mentioned earlier, 
close() shuts down the server ONLY when all existing connections have closed. It does not terminate
stale or idle keep-alive connections. As a result after close() is invoked, your server will continue to run.
It will not accept new connections and it will wait for existing connections to timeout, which is in minutes.&lt;/p&gt;

&lt;p&gt;Obviously you can’t develop rapidly like this. You can’t call this hot-reload, it’s more like shit-reload.
A little googling reveals a promising &lt;a href=&quot;http://stackoverflow.com/questions/14626636/how-do-i-shutdown-a-node-js-https-server-immediately&quot;&gt;solution from stackoverflow&lt;/a&gt; by
&lt;a href=&quot;http://www.goloroden.de/&quot;&gt;Golo Roden&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The takeaway from that post is that each time a connection is made to our 
server, we have to keep a reference to the socket object that represents 
the connection. I store these in a Map for better performance rather
than a normal object as suggested in the post. We can then call
socket.destroy() in our watch handler for all sockets, which
terminates all connections to our http.Server. The close() method can then
proceed to shut the server.&lt;/p&gt;

&lt;p&gt;What does it look like in code?&lt;/p&gt;

&lt;h4 id=&quot;srcserverindexjs-bootstrap-1&quot;&gt;src/server/index.js (bootstrap)&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
  require(‘babel-polyfill’);&lt;/p&gt;

&lt;p&gt;watchServerChanges();&lt;/p&gt;

&lt;p&gt;// Starts the express server. Caches sockets and delete those caches 
  // on socket close. Returns the running http.Server object and the
  // socket Map cache.
  function initHttpServer() {
    // start the server, getting back a reference to http.Server
    const httpServer = require(‘/path/to/server/bundle’);
    const sockets = new Map(); // cache all sockets in a Map
    let nextSocketId = 0;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;httpServer.on(&#39;connection&#39;, function (socket) {
  var socketId = nextSocketId++;
  sockets.set(socketId, socket);

  // remove socket from Map on close.
  // this is not where we terminate the socket! That happens 
  // in webpack.watch done handler below 
  socket.on(&#39;close&#39;, function () {
    sockets.delete(socketId);
  });
});

return {httpServer, sockets};   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;function watchServerChanges() {
      const webpack = require(‘webpack’);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // contains the running http.Server and socket cache
  let httpServerInitObject;
  let initialLoad = true;
  const compiler = webpack(require(&#39;path/to/webpack/server/config&#39;);
  const compilerOptions = {
    aggregateTimeout: 300, // wait so long for more changes
    poll: true // use polling instead of native watchers
  };
  
  // watch file changes
  compiler.watch(compilerOptions, function onServerChange(err, stats){
    if (err) {
      console.log(&#39;Server bundling error:&#39; + JSON.stringify(err));
      return;
    }
  
    if (initialLoad) {
      // first time run, just start the server, no need to restart
      initialLoad = false;
      httpServerInitObject = initHttpServer();
      console.log(&#39;Server bundling done&#39;);
    } else {
      // subsequent runs need to close the server and restart
      // call close() method, but this won&#39;t complete until all
      // sockets are destroyed below.
      httpServerInitObject.httpServer.close(function () {
        // if we reach this step, that means we have succeeded
        // in shutting down the server!!! Omg fuck yea!
        httpServerInitObject = initHttpServer(); // re-start
        console.log(&#39;Server restarted &#39; + new Date());
      });
  
      // This is where the magic happens: destroy all open sockets
      for (var socket of httpServerInitObject.sockets.values()) {
        socket.destroy();
      }        
    }
  });
} {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-2-clearing-the-require-cache&quot;&gt;Step 2: Clearing the require cache&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/batman_robin.jpg&quot; alt=&quot;Are we there yet?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you try the code above, you realise that it does not freakin work. Why? 
We are forgetting one thing: node caches all modules when required. How is
this a problem? At initial load, initHttpServer() will require your server.bundle.js
and node will cache that. Subsequent calls to initHttpServer() will re-use that
same server.bundle.js which is not we want. We want to require the newly
bundled server.bundle.js which webpack produces. To do this we need to clear
the require cache:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
  function clearCache() {
    const cacheIds = Object.keys(require.cache);
    for(let id of cacheIds) {
      if (id === ‘path/to/server/bundle’) {
        delete require.cache[id];
        return;
      }
    }
  }
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You call clearCache() in onServerChange callback prior to starting the 
express server like so:
{% highlight javascript %}&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //... same code as above
  
  // watch file changes
  compiler.watch(compilerOptions, function onServerChange(err, stats){
    if (err) {
      console.log(&#39;Server bundling error:&#39; + JSON.stringify(err));
      return;
    }
    
    // This solves all first world problems
    clearCache();
  
    //... same as above
  });

// ...  {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-3-but-wait-theres-more&quot;&gt;Step 3: But wait there’s more!&lt;/h2&gt;
&lt;p&gt;You can combine this with existing client hot reload techniques using &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; 
and &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot;&gt;react-hot-loader&lt;/a&gt; to achieve the ultimate universal hot reload experience. 
I have done this in &lt;a href=&quot;https://github.com/yusinto/universal-hot-reload&quot; target=&quot;_blank&quot;&gt;universal-hot-reload&lt;/a&gt; so you can check the source
code for that if you are interested. But for now, I’m out of time .. I need to take a shower.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;So webpack does solve everything and anything like I said in the beginning.. can it do my laundry and feed my dog too?&lt;/p&gt;

&lt;p&gt;The final product is &lt;a href=&quot;https://github.com/yusinto/universal-hot-reload&quot; target=&quot;_blank&quot;&gt;universal-hot-reload&lt;/a&gt;. 
Check it out! Let me know if there’s any issues.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="universal" />
<category term="hot" />
<category term="reload" />
<category term="webpack" />
<category term="server" />
<category term="client" />
<category term="bundle" />
<summary>I learnt quite a lot in the past week. Firstly there’s no substitute to good sleep. Secondly, you can actually eat a salmon steak raw! Thirdly, it’s really really hardto hot reload a server bundle if you are writing a universal app.</summary>
</entry>
</feed>
