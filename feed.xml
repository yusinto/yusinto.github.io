<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://reactjunkie.com/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://reactjunkie.com/" rel="alternate" type="text/html" />
<updated>2017-05-20T21:14:27+02:00</updated>
<id>http://reactjunkie.com/</id>
<title>React Junkie</title>
<entry>
<title>React Europe</title>
<link href="http://reactjunkie.com/react-europe/" rel="alternate" type="text/html" title="React Europe" />
<published>2017-05-20T09:30:00+02:00</published>
<updated>2017-05-20T09:30:00+02:00</updated>
<id>http://reactjunkie.com/react-europe</id>
<content type="html" xml:base="http://reactjunkie.com/react-europe/">&lt;p&gt;As I stared at the partially cloudy Parisian sky from my seat at Gare du Nord, 
I had a chance to reflect on the week that was. 4 days jam packed with 
javascript and react from morning till night followed by socialising afterwards 
(my fave), it’s definitely not for the faint-hearted. I admit I was a little 
overwhelmed by the intensity of the schedule.&lt;/p&gt;

&lt;h2 id=&quot;workshops&quot;&gt;Workshops&lt;/h2&gt;
&lt;p&gt;I attended a 2-day advanced react workshop with &lt;a href=&quot;https://github.com/nikgraf&quot; target=&quot;_blank&quot;&gt;Nik Graf (serverless)&lt;/a&gt;
and &lt;a href=&quot;https://github.com/mxstbr&quot; target=&quot;_blank&quot;&gt;Max Stoiber (styled components)&lt;/a&gt;. 
I learnt loads about the react children api which I never really used before from Max and about
the apollo graphql client for react from both Nik and Max. The exercises were very hands-on and realistic.
In one exercise we had to implement a graphql backend and apollo front end for a recipe application.
This involves setting up the graphql types, queries and mutations.&lt;/p&gt;

&lt;p&gt;I am already using graphql and relay at work (qantasassure.com) so I thought this would be a piece of cake.
Not exactly. It turns out the tools for graphql in the backend and frontend have
evolved so much since I set it up 6 months ago, it was almost foreign to me. In a good way.
I learnt it’s so much easier and simpler now to setup a graphql server with types and queries and mutations.
Apollo really has done a lot of work to simplify the integration of graphql into react.&lt;/p&gt;

&lt;p&gt;It’s so good to finally see the face behind the code! I am both a fan and user of serverless
and styled components, so thanks for teaching me so much guys!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/max_nik.png&quot; alt=&quot;Max Stoiber and Nik Graf&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-main-event&quot;&gt;The main event&lt;/h2&gt;
&lt;p&gt;Prior to the start of the conference we heard word that Dan Abramov will not make it to Paris.
He had some visa issues which didn’t allow him to enter Paris. Fuck. I should really ask for
a refund.&lt;/p&gt;

&lt;p&gt;Anyway the conference started with Andrew Clark (recompose) announcing the imminent release
of react fiber (eta end of year). He’s one of the better speakers in the conference. I tend to
pay more attention to people who use the stage and are comfortable moving about on the stage.
The delivery style of the presentation is also important. Some speakers tend to just read off
the screen and narrate, just the recipe to put people to sleep. Think kids and bedtime 
story time. I expected more from all the speakers in this regard.&lt;/p&gt;

&lt;p&gt;Andrew and a few others like Lee Byron, Kevin Lacker, Sunil Pai were excellent though. Part improvised 
part narratted, I really enjoy their presentations. Sunil in particular is my favourite speaker,
he’s really funny. His name reminds of the movie Life of Pi (of course his name is Pai, not Pi).&lt;/p&gt;

&lt;p&gt;My picks:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Lee Byron&lt;/b&gt; - released &lt;a href=&quot;https://facebook.github.io/relay/docs/relay-modern.html&quot; target=&quot;_blank&quot;&gt;Relay Modern v1.0&lt;/a&gt; 
live on stage. Relay Modern now supports static queries, client side only fields and subscriptions. 
Client side only fields mean that you can use relay to replace redux. Relay classic will still be supported in npm under
react-relay/classic.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Sunil Pai&lt;/b&gt; - author of glamour, glam and rakt. Rakt is an ambitious project which aims to umm do everything. By everything I mean
taking care of code splitting, data fetching, inline styling (via glamour) and more. It is still not finished yet, so check
&lt;a href=&quot;https://github.com/threepointone/rakt&quot; target=&quot;_blank&quot;&gt;Sunil’s page&lt;/a&gt; often. Sunil is my favourite speaker at the conference, he’s
engaging, impromptu and funny. All ingredients for a captivating talk.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Andrew Clarke&lt;/b&gt; - talks about React Fiber which will be released with React 16 at the end of the year. He also
briefly talked about react portals, which are components which don’t quite fit in the dom tree like modals
and overlays.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Sarah Drasner&lt;/b&gt; - shows really cool css animations/transforms using &lt;a href=&quot;https://greensock.com/get-started-js&quot; target=&quot;_blank&quot;&gt;GreenSock&lt;/a&gt;. 
It’s so cool and easy to use.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Wix lightning talk&lt;/b&gt; - introduces &lt;a href=&quot;https://github.com/wix/detox&quot; target=&quot;_blank&quot;&gt;detox&lt;/a&gt; which is a functional 
testing framework for react native. It’s super cool! It does grey box e2e testing of your react native apps automatically and it’s super fast!
If you use react native you must check it out.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Apollo lightning talk&lt;/b&gt; - Apollo has released a &lt;a href=&quot;https://github.com/apollographql/apollo-client-devtools&quot; target=&quot;_blank&quot;&gt;chrome devtool plugin&lt;/a&gt;
for graphql. It runs graphiql in chrome devtools! It also has a query inspector and a store inspector. Check it out!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Expo lightning talk&lt;/b&gt; - Expo has created a playground for react native at &lt;a href=&quot;http://snack.expo.io&quot; target=&quot;_blank&quot;&gt;snack.expo.io&lt;/a&gt;.
You can run your react native code on the web without the simulator! It’s like jsfiddle for react native.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Sasha Aickin&lt;/b&gt; - talks about streaming react dom to the client in chunks to boost performance. This involves chunk rendering, which is a
technique involving breaking up a page into different chunks, each with its own html, js, css and data. Each chunk
gets flushed to the client side separately, increasing parallelism and hence performance. Check out his github package 
&lt;a href=&quot;https://github.com/aickin/react-dom-stream&quot; target=&quot;_blank&quot;&gt;react-dom-stream&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;social-insights&quot;&gt;Social Insights&lt;/h2&gt;
&lt;p&gt;Perhaps the best lessons I learnt from the conference are not from the speakers, but from the people I met. There
were many like me, all keen to share their views, opinions and experience and also to listen. Talking to these
developers gave me a chance to validate some of the assumptions I make in my projects and to see the tools and 
techniques others use in their apps.&lt;/p&gt;

&lt;p&gt;These are some of the people I met and the insights I gathered from them:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Dafeng Guo cofounder of strikingly&lt;/b&gt; - started strikingly with 2 other founders in YCombinator in 2012. They had 0 paying customers
in 2012, now they have over 130 employees and a lot more customers :). I am a user of strikingly and I can’t recommend it enough. He also
showed me strikingly’s latest wechat feature where strikingly websites now are automatically converted to wechat apps. That’s super cool!
&lt;img src=&quot;/assets/images/dafeng.png&quot; alt=&quot;Dafeng&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Griffith Tchen Pan&lt;/b&gt; - works at myworkpapers.com. Started in Gold Coast Australia and now has offices in USA and London. 8 years of
 dedication and commitment to a product pays off. That’s what I learned from him.
 &lt;img src=&quot;/assets/images/griffith.png&quot; alt=&quot;Griffith&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Brian Christensen&lt;/b&gt; Danish guy I met at the workshop. Arguably the smartest guy in Denmark, he knows everything from docker to glam to
elm, and does not have a CI in place at his workplace. Just kidding Brian :). He drinks a lot.
&lt;img src=&quot;/assets/images/brian.png&quot; alt=&quot;Brian&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It’s not the best organised conference I’ve been for a few reasons.&lt;/p&gt;

&lt;p&gt;Firstly as I mentioned above, some of the speakers weren’t really very engaging. 
It was really tough to keep awake at times. Second the food was really really bad. 
During the workshops, there was no protein whatsoever for lunch. It was only 
salad, quinoa, rice, pasta. Where’s the meat!!?! Or fish??!? Thirdly the cancellation of Dan Abramov was 
disappointing. Even Max Stoiber didn’t stick around to give his presentation (no reason given). 
Maybe they were put off by the food…&lt;/p&gt;

&lt;p&gt;I travelled 26 hours from Sydney Australia, stopping at 3 different countries en route to Paris, 
and then back. Is it worth it? Yes. I definitely won’t forget it. Here are more pics from all
the great people I met. Till next time!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/react_conference_collage.png&quot; alt=&quot;Brian&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="europe" />
<category term="conference" />
<category term="paris" />
<category term="france" />
<summary>As I stared at the partially cloudy Parisian sky from my seat at Gare du Nord, I had a chance to reflect on the week that was. 4 days jam packed with javascript and react from morning till night followed by socialising afterwards (my fave), it’s definitely not for the faint-hearted. I admit I was a little overwhelmed by the intensity of the schedule.</summary>
</entry>
<entry>
<title>Change marker image onPress in react-native-maps</title>
<link href="http://reactjunkie.com/react-native-maps-change-marker-image-onpress/" rel="alternate" type="text/html" title="Change marker image onPress in react-native-maps" />
<published>2017-04-25T09:30:00+02:00</published>
<updated>2017-04-25T09:30:00+02:00</updated>
<id>http://reactjunkie.com/react-native-maps-change-marker-image-onpress</id>
<content type="html" xml:base="http://reactjunkie.com/react-native-maps-change-marker-image-onpress/">&lt;p&gt;Recently I started a new pet project which involves maps and markers on ios and android. Of course I started
this new project in react native. I was expecting a somewhat challenging times ahead because it has been
a few months since I last did react native development. The landscape has definitely improved, and I feel
so fortunate to be a javascript developer at this present moment because of awesome tools like react-native
at our disposal. The possibilities are truly endless.&lt;/p&gt;

&lt;p&gt;Airbnb has open sourced &lt;a href=&quot;https://github.com/airbnb/react-native-maps&quot; target=&quot;_blank&quot;&gt;react-native-maps&lt;/a&gt; which 
made it so easy to integrate mapping capabilities with your app. There are steps to follow to set it all up but 
it’s not that hard.&lt;/p&gt;

&lt;p&gt;All the code in this blog are available on &lt;a href=&quot;https://github.com/yusinto/react-native-map-markers&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Need to display custom map markers on react-native-maps. Then, onPress of a 
marker, change that marker image so the user can see it has 
been selected. The problem is there is no direct way to get the ref of 
the selected marker. Even if there is, there is no setImage method to
change the marker image.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;Out of the box, there’s already an onPress event handler with MapView.Marker
which is a good starting point. We will use this along with the ref and 
image props (also supported out of the box) to solve our problem.&lt;/p&gt;

&lt;h2 id=&quot;are-you-done-talking-show-me-some-code&quot;&gt;Are you done talking? Show me some code!&lt;/h2&gt;
&lt;p&gt;So first things first, you need to install and link react-native-maps:&lt;/p&gt;

&lt;p&gt;{% highlight shell %}
# stick with 0.13.0 to avoid unresolved issues in ^0.14.0
yarn add react-native-maps@0.13.0
{% endhighlight %}
then link it
{% highlight shell %}
react-native link react-native-maps
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;b&gt;GOTCHA&lt;/b&gt; react-native-maps requires babel-plugin-module-resolver as well
otherwise you’ll get this error: Unknown plugin module-resolver. This is a bug
which should be fixed in a later version.&lt;/p&gt;

&lt;p&gt;{% highlight shell %}
yarn add babel-plugin-module-resolver
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Then we can write some code to render a basic map like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
import React, { Component } from ‘react’;
import {AppRegistry, StyleSheet, View} from ‘react-native’;
import MapView from ‘react-native-maps’;&lt;/p&gt;

&lt;p&gt;export default class MapMarkers extends Component {
  state = {
    region: {
      latitude: 1,
      longitude: 1,
      latitudeDelta: 0.0043, // hardcode zoom levels just for example
      longitudeDelta: 0.0034,
    },
  };&lt;/p&gt;

&lt;p&gt;componentDidMount() {
    navigator.geolocation.getCurrentPosition(
      position =&amp;gt; this.setState({
        region: {
          …this.state.region,
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        }
      }),
      error =&amp;gt; alert(JSON.stringify(error)), {
        enableHighAccuracy: true,
        timeout: 20000,
        maximumAge: 1000
      }
    );
  }&lt;/p&gt;

&lt;p&gt;// note that you need to style the map, otherwise you’ll get
  // a blank screen
  render() {
    return (
      &amp;lt;View style={styles.root}&amp;gt;
        &amp;lt;MapView style={styles.map}
                 showsUserLocation={true}
                 followsUserLocation={true}
                 initialRegion={this.state.region}
        /&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
}&lt;/p&gt;

&lt;p&gt;const styles = StyleSheet.create({
  root: {
    flex: 1,
    justifyContent: ‘center’,
    alignItems: ‘center’,
  },
  map: {
    position: ‘absolute’,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
});&lt;/p&gt;

&lt;p&gt;AppRegistry.registerComponent(‘mapMarkers’, () =&amp;gt; MapMarkers);&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;ios-simulator-setup&quot;&gt;iOS Simulator Setup&lt;/h2&gt;
&lt;p&gt;Before you run this in the simulator, you’ll need to set a custom location
in the ios simulator. We’ll only be demoing on ios only for this blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/simulator_location_menu.png&quot; alt=&quot;Simulator Location Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the custom location to Cafe Sydney -33.861924, 151.210891. If you haven’t
been, you have to! It’s an awesome restaurant!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/custom_location.png&quot; alt=&quot;Set Custom Location&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;run-the-project&quot;&gt;Run the project&lt;/h2&gt;

&lt;p&gt;{% highlight shell %}
react-native run-ios
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You should see a map view with the user location set to Cafe Sydney in Australia.
Now let’s add a few markers.&lt;/p&gt;

&lt;p&gt;{% highlight js%}
// Add these at the top of the file, straight after the imports
const RESTAURANTS = [
  {
    key: ‘Cafe Sydney’,
    title: ‘Cafe Sydney’,
    description: ‘Customs House, 31 Alfred St, Sydney NSW 2000’,
    latLong: {
      latitude: -33.861924,
      longitude: 151.210891,
    },
  },
  {
    key: ‘Four Frogs Creperie’,
    title: ‘Four Frogs Creperie’,
    description: ‘1 Macquarie Pl, Sydney NSW 2000’,
    latLong: {
      latitude: -33.861755,
      longitude: 151.209941,
    },
  },
  {
    key: ‘Tapavino’,
    title: ‘Tapavino’,
    description: ‘6 Bulletin Pl, Sydney NSW 2000’,
    latLong: {
      latitude: -33.862512,
      longitude: 151.209490,
    },
  },
];&lt;/p&gt;

&lt;p&gt;// then modify your render method to look like this
  render() {
    return (
      &amp;lt;View style={styles.root}&amp;gt;
        &amp;lt;MapView style={styles.map}
                 showsUserLocation={true}
                 followsUserLocation={true}
                 initialRegion={this.state.region}
        &amp;gt;
          {
            RESTAURANTS.map((m, i) =&amp;gt;
              &amp;lt;MapView.Marker
                coordinate={m.latLong}
                title={m.title}
                description={m.description}
                key={&lt;code class=&quot;highlighter-rouge&quot;&gt;marker-${i}&lt;/code&gt;}
              /&amp;gt;
            )
          }
        &amp;lt;/MapView&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You should see 3 markers on the map. Now we want to use a custom image 
for our marker. MapView has an image prop we can set so that’s easy. 
Then onPress of a marker, we want to change this image to a different 
one to show the user that it has been selected. Again MapView has an 
onPress prop which we can use to set a custom callback when a marker gets pressed.&lt;/p&gt;

&lt;p&gt;Here’s the trick, onpress of a marker, we have to pass the index of the selected
marker and save that to state. Then on the image prop, we can inspect
if the marker being rendered matches the selected index in state, and use
a different image if so.&lt;/p&gt;

&lt;p&gt;{% highlight js%}
// At the top of the file after imports, we require our marker images
const marker = require(‘./assets/images/marker.png’);
const selectedMarker = require(‘./assets/images/marker-selected.png’);&lt;/p&gt;

&lt;p&gt;// Then in our class
onPressMarker(e, index) {
    this.setState({selectedMarkerIndex: index});
}&lt;/p&gt;

&lt;p&gt;// Then in our render method, we specify onPress and image props.
// For brevity, I only include the relevant bits of code here
RESTAURANTS.map((m, i) =&amp;gt;
  &amp;lt;MapView.Marker
    coordinate={m.latLong}
    title={m.title}
    description={m.description}
    key={&lt;code class=&quot;highlighter-rouge&quot;&gt;marker-${i}&lt;/code&gt;}
    onPress={(e) =&amp;gt; this.onPressMarker(e, i)}
    image={this.state.selectedMarkerIndex === i ? selectedMarker : marker} // this is the crux of the blog
  /&amp;gt;
)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/react-native-map-markers&quot; target=&quot;_blank&quot;&gt;complete code&lt;/a&gt; on 
github. Let me know if this helps!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="native" />
<category term="maps" />
<category term="change" />
<category term="marker" />
<category term="image" />
<category term="onpress" />
<summary>Recently I started a new pet project which involves maps and markers on ios and android. Of course I startedthis new project in react native. I was expecting a somewhat challenging times ahead because it has beena few months since I last did react native development. The landscape has definitely improved, and I feelso fortunate to be a javascript developer at this present moment because of awesome tools like react-nativeat our disposal. The possibilities are truly endless.</summary>
</entry>
<entry>
<title>Scheduling Feature Flag Deployment</title>
<link href="http://reactjunkie.com/scheduling-feature-flag-deployment/" rel="alternate" type="text/html" title="Scheduling Feature Flag Deployment" />
<published>2017-02-28T08:30:00+01:00</published>
<updated>2017-02-28T08:30:00+01:00</updated>
<id>http://reactjunkie.com/scheduling-feature-flag-deployment</id>
<content type="html" xml:base="http://reactjunkie.com/scheduling-feature-flag-deployment/">&lt;h4 id=&quot;updated-mon-13-march-2017&quot;&gt;Updated Mon 13 March 2017&lt;/h4&gt;

&lt;p&gt;Use Launch Darkly? Love their feature flagging and a/b testing features? Like reading blog posts that sounds like an informercial? Umm…&lt;/p&gt;

&lt;p&gt;Anyway I use Launch Darkly at my workplace (I work at an airline company spelt with a Q and I live in Sydney Australia) and I recently faced a
challenge with zero dark thirty deployments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tropic.jpg&quot; alt=&quot;Zero dark what?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No no what I meant was I had feature flagging in place in my app, and I had to turn flags on (and off) at unearthly hours like 12:01 AM. So being a hacker,
I wasn’t going to lie down and wait for 12:01 AM to come by and turn on a switch. No sir! I am much much smarter than that. Instead, I spent sleepless nights
doing 30 hour days to write a node app that will do it for me. Take that zero dark thirty deployments!&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Need to turn flags on/off automatically at a specified scheduled time.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;A cron job that uses &lt;a href=&quot;http://apidocs.launchdarkly.com/docs/update-feature-flag&quot; target=&quot;_blank&quot;&gt;launch darkly apis&lt;/a&gt; to automatically turn on/off flags.&lt;/p&gt;

&lt;h2 id=&quot;enough-talk-show-me-some-code&quot;&gt;Enough talk, show me some code&lt;/h2&gt;
&lt;p&gt;Using the rest apis, you can update your flag with something  like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
const headers = {
  Accept: ‘&lt;em&gt;/&lt;/em&gt;’,
  ‘Content-Type’: ‘application/json’,
  Authorization: ‘your-api-key’,
  ‘accept-encoding’: ‘gzip, deflate’
};
const body = JSON.stringify([{
  op: ‘replace’,
  path: ‘/environments/test’;,
  value: true,
}]);
const url = ‘https://app.launchdarkly.com/api/v2/flags/default/your-key’;
const response = await fetch(url, {
    method: ‘PATCH’,
    headers,
    body
});&lt;/p&gt;

&lt;p&gt;{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Of course you’ll need to add some defensive programming for error catching
and retries plus configuration for test and production environments
plus notifications when updates are successful/not successful, and the
list goes on.&lt;/p&gt;

&lt;p&gt;If you go down this path, you soon realise that this is not a trivial 
task by any means. An ad-hoc solution like this involves hard coding
flag names and continual updates which are almost as bad as waking up at 
12:01 AM to do the deployments manually.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://github.com/yusinto/ld-scheduler&quot; target=&quot;_blank&quot;&gt;ld-scheduler&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ld-scheduler&quot;&gt;ld-scheduler&lt;/h2&gt;
&lt;p&gt;With ld-scheduler, you do this from your node app:&lt;/p&gt;

&lt;p&gt;{% highlight js %}
yarn add ld-scheduler
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
import ldScheduler from ‘ld-scheduler’;&lt;/p&gt;

&lt;p&gt;ldScheduler.runEveryXSeconds({
  environment: ‘test’,
  apiKey: ‘your-secret-api-key’,
  slack: ‘your-slack-webhook-url’
});
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;and you schedule your flags through launch darkly’s dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ld-scheduler-flag-settings-resized.png&quot; alt=&quot;LaunchDarkly dashboard scheduling config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HACK&lt;/strong&gt;: We hijack the description field to store our scheduling config as a json object where:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;taskType is killSwitch&lt;/li&gt;
    &lt;li&gt;value is true (kill switch on) or false (kill switch off)&lt;/li&gt;
    &lt;li&gt;
        targetDeploymentDateTime must be in YYYY-MM-DD HH:mm Z
        &lt;p&gt;
            &lt;b&gt;NOTE:&lt;/b&gt; the UTC offset at the end is especially important because ld-scheduler uses moment which will use the host&#39;s timezone if it is not specified.
             That means if you deploy ld-scheduler to the cloud say on aws lambda where the machine clock is set to UTC timezone, then your flag will be deployed at
             UTC time, which is probably not what you want unless you are living in London!
        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;description is a textual string for the purpose of human readability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;AND&lt;/em&gt;&lt;/strong&gt; you need to set a tag called “${yourEnv}-scheduled”. For example, if you are scheduling a flag in the test environment,
your tag should be called “test-scheduled”. Likewise if you are scheduling it in production, you need to add a “production-scheduled” tag.&lt;/p&gt;

&lt;p&gt;When ld-scheduler runs, it will set your flag on/off according the the json configuration. It will also remove the “${yourEnv}-scheduled” tag so
it does not get reprocessed. If there’s no other scheduled tags, then ld-scheduler also sets the “Description” field
to the json.description string, thereby deleting the json config replacing it with the description string.&lt;/p&gt;

&lt;p&gt;This way, you can safely run 2 instances of ld-scheduler; one for each environment without having to worry about race conditions.&lt;/p&gt;

&lt;h2 id=&quot;extra&quot;&gt;Extra&lt;/h2&gt;
&lt;p&gt;ld-scheduler supports a second taskType “fallThoughRollout” which you can use to set the default fallThrough rollout percentage:&lt;/p&gt;

&lt;p&gt;{% highlight json %}
{
    “taskType”: “fallThroughRollout”,
    “targetDeploymentDateTime”: “2017-03-3 02:33”,
    “description”: “Human readable flag description”,
    “value”: [
        {
            “variation”: 0,
            “weight”: 90000
        },
        {
            “variation”: 1,
            “weight”: 10000
        }
    ]
}
{% endhighlight %}
where variation 0 is true and variation 1 is false. Weight is in mili-percentage (if there’s such a word) i.e. 90000 === 90% and 10000 === 10%.
Of course you would enter this json object in the “Description” field of your flag settings in launch darkly’s dashboard
&lt;strong&gt;&lt;em&gt;AND&lt;/em&gt;&lt;/strong&gt; set a “${yourEnv}-scheduled” tag.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/ld-scheduler/tree/master/example&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="schedule" />
<category term="feature" />
<category term="flag" />
<category term="deployment" />
<category term="ld" />
<category term="scheduler" />
<category term="automate" />
<category term="automation" />
<category term="scheduling" />
<summary>Updated Mon 13 March 2017</summary>
</entry>
<entry>
<title>Testing Connected Redux and Relay Components</title>
<link href="http://reactjunkie.com/testing-connected-redux-relay-components/" rel="alternate" type="text/html" title="Testing Connected Redux and Relay Components" />
<published>2017-01-28T08:30:00+01:00</published>
<updated>2017-01-28T08:30:00+01:00</updated>
<id>http://reactjunkie.com/testing-connected-redux-relay-components</id>
<content type="html" xml:base="http://reactjunkie.com/testing-connected-redux-relay-components/">&lt;p&gt;Happy chinese new year everyone! In the spirit of the year of the cock, I shall write the rest of this post in chinese. 
中国著名的大思想家、大教育家。孔子开创了私人讲学的风气，是儒家学派的创始人。孔子曾受业于老子 (roughly translates to… I don’t know).
Did I say Cock? I mean Rooster. Apologies my dear chinese readers… I don’t think there’s a difference anyway?&lt;/p&gt;

&lt;p&gt;I’m gonna talk about testing redux components today. If you use react-redux, you are probably connecting
your components to redux using the connect method. If you do this in one file with a single default export (which is the connected component)
you have a problem. You’ll find that you can’t test your component directly because the default export of your module is not the component
itself, rather it’s the redux connected component. What you want to test is the presentational component, not the connected component. Redux
itself is already tested!&lt;/p&gt;

&lt;p&gt;You have two options at this point; you can either bite the bullet and test the redux component meaning mocking a lot of the redux stuff OR 
you can modify your code to be testable by exporting the private presentational component. This second approach is the one recommended by the 
&lt;a href=&quot;https://github.com/reactjs/redux/blob/master/docs/recipes/WritingTests.md&quot; target=&quot;_blank&quot;&gt;official redux documentation&lt;/a&gt;. I find that although 
this works it does so at the expense of encapsulation. I believe code should be driven by design and requirements, not testing restrictions. 
So I set out to find a better approach.&lt;/p&gt;

&lt;p&gt;There is a popular npm package &lt;a href=&quot;https://github.com/jhnns/rewire&quot; target=&quot;_blank&quot;&gt;rewire&lt;/a&gt; which seems to be promising. I failed to make it work
quickly though, because it does not work with es6 so a little more googling reveals &lt;a href=&quot;https://github.com/speedskater/babel-plugin-rewire&quot; target=&quot;_blank&quot;&gt;babel-plugin-rewire&lt;/a&gt; 
which is based on rewire and works with es6. Armed with this library, I embarked on a journey towards a better cock year oops I mean better unit tests.&lt;/p&gt;

&lt;h2 id=&quot;enough-talk-show-me-some-code&quot;&gt;Enough talk, show me some code&lt;/h2&gt;
&lt;p&gt;Consider the following code (which you can see in entirety &lt;a href=&quot;https://github.com/yusinto/test-react/blob/master/src/universal/home/home.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;h4 id=&quot;homejs&quot;&gt;home.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
import React, {Component} from ‘react’;
import {connect} from ‘react-redux’;
import * as Actions from ‘./homeAction’;&lt;/p&gt;

&lt;p&gt;// private class
class Home extends Component {
  constructor(props) {
    super(props);
    this.onClickGenerateRandom = ::this.onClickGenerateRandom;
  }&lt;/p&gt;

&lt;p&gt;onClickGenerateRandom() {
    this.props.generateRandom();
  }&lt;/p&gt;

&lt;p&gt;render() {
    let homeText = ‘Click button below to generate a random number!’;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return (
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;{ homeText }&amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;{this.props.randomNumber}&amp;lt;/div&amp;gt;
    &amp;lt;button onClick={this.onClickGenerateRandom}&amp;gt;
        Generate random number
    &amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
);   } }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;const mapStateToProps = (state) =&amp;gt; {
  const homeState = state.Home;&lt;/p&gt;

&lt;p&gt;return {
    randomNumber: homeState.randomNumber
  };
};&lt;/p&gt;

&lt;p&gt;export default connect(mapStateToProps, Actions)(Home);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The Home class is private and that’s what we want to test. It is not exported at all, so we can’t access it directly. 
As mentioned above, the official redux documentation recommends exporting this class, but that breaks encapsulation.
So what do we do? Enter &lt;a href=&quot;https://github.com/speedskater/babel-plugin-rewire&quot; target=&quot;_blank&quot;&gt;babel-plugin-rewire&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-rewire&quot;&gt;Using rewire&lt;/h2&gt;
&lt;p&gt;You need to install the following npm packages:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
yarn add –dev jest babel-plugin-rewire enzyme react-addons-test-utils
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://facebook.github.io/jest/&quot; target=&quot;_blank&quot;&gt;jest&lt;/a&gt; for my test framework and you should too, it kicks butt. 
I also use &lt;a href=&quot;https://github.com/airbnb/enzyme&quot; target=&quot;_blank&quot;&gt;enzyme&lt;/a&gt; which is a utility library for testing react components. 
Enzyme requires the official &lt;a href=&quot;https://facebook.github.io/react/docs/test-utils.html&quot; target=&quot;_blank&quot;&gt;react-addons-test-utils&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;In your .babelrc, add an “env” block to include babel-plugin-rewire when running tests:&lt;/p&gt;

&lt;h4 id=&quot;babelrc&quot;&gt;.babelrc&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
{
    “presets”: [“es2015”, “react”, “stage-0”],&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* etc your other config */

&quot;env&quot;: {
  &quot;test&quot;: {
    &quot;plugins&quot;: [&quot;babel-plugin-rewire&quot;]
  }
} } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;write-the-tests&quot;&gt;Write the tests!&lt;/h2&gt;
&lt;p&gt;Now we can write the tests! The complete file is &lt;a href=&quot;https://github.com/yusinto/test-react/blob/master/src/universal/home/home.test.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;h4 id=&quot;hometestjs&quot;&gt;home.test.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
import React from ‘react’;
import {shallow} from ‘enzyme’;
import HomeRedux from ‘./home’;&lt;/p&gt;

&lt;p&gt;describe(‘Home component tests’, () =&amp;gt; {
  // rewire injects &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; methods to all our modules.
  // These can then be used to extract and set top level private variables.
  // In this instance, we extract the private Home class
  const Home = HomeRedux.&lt;strong&gt;get&lt;/strong&gt;(‘Home’);&lt;/p&gt;

&lt;p&gt;it(‘should render correctly’, () =&amp;gt; {
    // Yayy! We can now render the presentational component directly! 
    const output = shallow(&amp;lt;Home randomNumber={45}/&amp;gt;);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Use jest snapshot testing for convenience
expect(output).toMatchSnapshot();   }); }); {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This approach incurs a little more time to setup, but I think it’s worth it. We leave the code fully testable, encapsulation intact. 
This feels right for me. Also, you can apply the same technique to test react components wrapped in relay containers. It works!&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/test-react&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="redux" />
<category term="relay" />
<category term="connected" />
<category term="unit" />
<category term="tests" />
<category term="testing" />
<category term="encapsulation" />
<category term="jest" />
<category term="rewire" />
<summary>Happy chinese new year everyone! In the spirit of the year of the cock, I shall write the rest of this post in chinese. 中国著名的大思想家、大教育家。孔子开创了私人讲学的风气，是儒家学派的创始人。孔子曾受业于老子 (roughly translates to… I don’t know).Did I say Cock? I mean Rooster. Apologies my dear chinese readers… I don’t think there’s a difference anyway?I’m gonna talk about testing redux components today. If you use react-redux, you are probably connectingyour components to redux using the connect method. If you do this in one file with a single default export (which is the connected component)you have a problem. You’ll find that you can’t test your component directly because the default export of your module is not the componentitself, rather it’s the redux connected component. What you want to test is the presentational component, not the connected component. Reduxitself is already tested!</summary>
</entry>
<entry>
<title>Building graphql schema without babelrc</title>
<link href="http://reactjunkie.com/build-graphql-schema-without-babelrc/" rel="alternate" type="text/html" title="Building graphql schema without babelrc" />
<published>2016-12-12T19:30:00+01:00</published>
<updated>2016-12-12T19:30:00+01:00</updated>
<id>http://reactjunkie.com/build-graphql-schema-without-babelrc</id>
<content type="html" xml:base="http://reactjunkie.com/build-graphql-schema-without-babelrc/">&lt;p&gt;Man it has been a busy month! It’s been a while since I blogged, I have to say I miss it a lot. Almost as much as I 
miss drinking..&lt;/p&gt;

&lt;p&gt;Today I’ll be talking about graphql and relay, specifically about building the schema. Warning this is not a beginner’s
guide to graphql and relay, there are tons of other tutorials which can help you with that. This blog is about
decoupling your graphql schema build from your project’s .babelrc file.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Your project has a .babelrc file which contains presets, plugins, etc used by babel when you run your app. You need 
to include babelRelayPlugin in your .babelrc plugins section so your relay app can comprehend your graphql schema.&lt;/p&gt;

&lt;p&gt;However, babelRelayPlugin.js contains a reference to schema.json which is generated by babel-node &lt;a href=&quot;https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js&quot; target=&quot;_blank&quot;&gt;updateSchema.js&lt;/a&gt; 
which in turn uses .babelrc which has a dependency on babelRelayPlugin which is a cyclic dependency which gives me a 
migraine.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;p&gt;We need to decouple graphql schema generation from app runtime. The standard .babelrc file is required for our app runtime so that stays.
That means we cannot depend on .babelrc for our schema generation i.e. when running &lt;a href=&quot;https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js&quot; target=&quot;_blank&quot;&gt;updateSchema.js&lt;/a&gt;
we can’t use babel-node. Instead we use plain vanilla node in combination with babel-register with inline
config when running updateSchema.&lt;/p&gt;

&lt;h2 id=&quot;enough-talk-show-me-some-code&quot;&gt;Enough talk, show me some code&lt;/h2&gt;
&lt;p&gt;You need the following babel packages:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
sudo yarn add –dev babel-polyfill babel-preset-latest
sudo yarn add babel-register babel-preset-stage-0
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;In your package.json, you declare an npm run command update-schema which points an index.js file:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
“scripts”: {
    “update-schema”: “node ./src/graphql/index.js”,
    …
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Your src/graphql/index.js then looks like this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
require(‘babel-register’)({
  babelrc: false,
  presets: [
    “latest”
  ]
});
require(“babel-polyfill”); // required for async generators
require(‘./updateSchema’);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;where updateSchema.js is provided by facebook &lt;a href=&quot;https://github.com/relayjs/relay-starter-kit/blob/master/scripts/updateSchema.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/yusinto/movie-time&quot; target=&quot;_blank&quot;&gt;sample code&lt;/a&gt; for a working example and let me know if this is useful (or not)!&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="graphql" />
<category term="schema" />
<category term="relay" />
<category term="react" />
<category term="babel" />
<category term="babelrc" />
<category term="build" />
<category term="babelrelayplugin" />
<summary>Man it has been a busy month! It’s been a while since I blogged, I have to say I miss it a lot. Almost as much as I miss drinking..</summary>
</entry>
<entry>
<title>Targeting users with React Redux and Launch Darkly</title>
<link href="http://reactjunkie.com/launch-darkly-part-two/" rel="alternate" type="text/html" title="Targeting users with React Redux and Launch Darkly" />
<published>2016-11-01T19:30:00+01:00</published>
<updated>2016-11-01T19:30:00+01:00</updated>
<id>http://reactjunkie.com/launch-darkly-part-two</id>
<content type="html" xml:base="http://reactjunkie.com/launch-darkly-part-two/">&lt;p&gt;In my &lt;a href=&quot;http://www.reactjunkie.com/react-feature-toggle-launch-darkly/&quot; target=&quot;_blank&quot;&gt;previous previous post&lt;/a&gt; 
I introduced launch darkly as a feature toggling platform and how to use it with react redux. In this post I
will explain how you can further leverage the power of feature toggling with user targeting.&lt;/p&gt;

&lt;h2 id=&quot;whats-user-targeting&quot;&gt;What’s user targeting?&lt;/h2&gt;
&lt;p&gt;You have a feature or functionality you only want to display to a select group of audience. For example 
releasing a beta feature to users who have signed up. Kinda like a sneak preview for early adopters. 
Or perhaps you want to show special offers only to premium members of your website. This is user targeting.&lt;/p&gt;

&lt;h2 id=&quot;ok-sounds-interesting-how-do-i-do-it&quot;&gt;Ok sounds interesting. How do I do it?&lt;/h2&gt;
&lt;p&gt;On init, you’ll need to pass a user object to Launch Darkly so it has something to work with:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
import ldClient from ‘ldclient-js’;&lt;/p&gt;

&lt;p&gt;// Launch Darkly supports the following user attributes by default
const user = {
   key: ‘some-unique-key’, // mandatory, the only mandatory property
   ip: ‘111.222.3.4’,
   email: ‘some@email.com’,
   name: ‘React Junkie’,
   firstName: ‘React’,
   lastName: ‘Junkie’,
   country: ‘Australia’
};&lt;/p&gt;

&lt;p&gt;ldClient.initialize(‘your/client/side/id’, user);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You’ll need to pass a user object containing at least a key property to Launch Darkly.&lt;/p&gt;

&lt;h2 id=&quot;configure-the-dashboard&quot;&gt;Configure the dashboard&lt;/h2&gt;
&lt;p&gt;Login to Launch Darkly and in the Feature Flags section select a feature flag. In the targeting section,
you can target individual users, use rules to target a group of users or default to a blanket rule for 
all users.&lt;/p&gt;

&lt;p&gt;I will delve into using rules to target a group of users because I think that’s a more common use case 
compared to targeting individual users.&lt;/p&gt;

&lt;p&gt;For example, the settings below will target users in Australia:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/user_targeting_by_country.png&quot; alt=&quot;Targeting user by country?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also serve true to a percentage of Australian users using the “percentage rollout” serve option.
For example the settings below will rollout true to 50% of Australian users:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/user_targeting_percentage_rollout.png&quot; alt=&quot;Targeting user by country percentage rollout?&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;advanced-targeting&quot;&gt;Advanced targeting&lt;/h3&gt;
&lt;p&gt;If you look carefully there’s an Advanced option if you select percentage rollout. The purpose of this 
option is not very obvious. In our example above you can use this advanced option to further group 
Australian users by (say) their browser.&lt;/p&gt;

&lt;p&gt;For example, the settings below will serve true to half of chrome users, half of safari users, 
half of firefox users, etc. It’s a way of “bucketing” your users so each bucket receives the 
percentage rollout you specified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/user_targeting_advanced.png&quot; alt=&quot;Targeting user by country percentage rollout?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage-with-ld-redux&quot;&gt;Usage with ld-redux&lt;/h2&gt;
&lt;p&gt;If you use &lt;a href=&quot;https://github.com/yusinto/ld-redux&quot; target=&quot;_blank&quot;&gt;ld-redux&lt;/a&gt;, you pass the user object
as the third parameter to ldRedux.init method:
{% highlight javascript %}
import createStore from ‘&lt;your-project&gt;/store&#39;;
import ldRedux from &#39;ld-redux&#39;;&lt;/your-project&gt;&lt;/p&gt;

&lt;p&gt;// standard redux createStore
const store = createStore();&lt;/p&gt;

&lt;p&gt;const user = {
   key: ‘some-unique-key’,
   ip: ‘111.222.3.4’,
   email: ‘some@email.com’,
   name: ‘React Junkie’,
   firstName: ‘React’,
   lastName: ‘Junkie’,
   country: ‘Australia’
};&lt;/p&gt;

&lt;p&gt;// Pass the user object after store to the init method
ldRedux.init(‘yourClientSideId’, store, user);&lt;/p&gt;

&lt;p&gt;render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Router routes={routes} history={browserHistory}/&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  document.getElementById(‘reactDiv’)
);
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;By default, if you don’t specify a user object, ld-redux will create a default
user like below:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
user = {
   key: uuid.v4(),
   ip: ip.address(),
   custom: {
        browser: userAgentParser.getResult().browser.name,
        device, // either mobile, tablet or desktop
   },
};
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You can see the complete logic for default user creation &lt;a href=&quot;https://github.com/yusinto/ld-redux/blob/master/src/init.js&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The custom property allows you to pass any arbitrary properties to Launch Darkly which you can use for targeting. This is very useful and powerful.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Feature flagging coupled with user targeting is a powerful way to control your target audience. This opens up a whole
new world of possibilities in regards to what you can do with your app. Someday all apps will be built this way.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://github.com/yusinto/ld-redux&quot; target=&quot;_blank&quot;&gt;ld-redux&lt;/a&gt; if you haven’t, and please give me some feedback if you use it! Thanks.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="targeting" />
<category term="users" />
<category term="react" />
<category term="redux" />
<category term="feature" />
<category term="toggle" />
<category term="launch" />
<category term="darkly" />
<category term="toggling" />
<category term="ld-redux" />
<summary>In my previous previous post I introduced launch darkly as a feature toggling platform and how to use it with react redux. In this post Iwill explain how you can further leverage the power of feature toggling with user targeting.What’s user targeting?You have a feature or functionality you only want to display to a select group of audience. For example releasing a beta feature to users who have signed up. Kinda like a sneak preview for early adopters. Or perhaps you want to show special offers only to premium members of your website. This is user targeting.</summary>
</entry>
<entry>
<title>Hot Reloading Universally Bundled Webpack Apps</title>
<link href="http://reactjunkie.com/universal-hot-reload/" rel="alternate" type="text/html" title="Hot Reloading Universally Bundled Webpack Apps" />
<published>2016-10-22T10:52:00+02:00</published>
<updated>2016-10-22T10:52:00+02:00</updated>
<id>http://reactjunkie.com/universal-hot-reload</id>
<content type="html" xml:base="http://reactjunkie.com/universal-hot-reload/">&lt;p&gt;I learnt quite a lot in the past week. Firstly there’s no substitute to good sleep. Secondly, you can actually eat a salmon steak raw! Thirdly, it’s really really hard
to hot reload a server bundle if you are writing a universal app.&lt;/p&gt;

&lt;p&gt;On the client side, &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot; target=&quot;_blank&quot;&gt;webpack-dev-middleware&lt;/a&gt; and &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot; target=&quot;_blank&quot;&gt;react-hot-loader&lt;/a&gt;
have been around for a while now and have become indispensable to developers. However, what about the server side?&lt;/p&gt;

&lt;p&gt;One solution is to use nodemon to restart the server on file changes. This works if you don’t bundle your server side code. If you do, you’ll have to use a task runner 
like gulp to first compile your code, then use nodemon to restart the server.&lt;/p&gt;

&lt;p&gt;I don’t particularly like this solution because I need to introduce gulp and nodemon into my project. I believe webpack can solve anything and everything. So the challenge was set:
use only webpack to implement server side bundling and hot reload.&lt;/p&gt;

&lt;p&gt;The final product is &lt;a href=&quot;https://github.com/yusinto/universal-hot-reload&quot; target=&quot;_blank&quot;&gt;universal-hot-reload&lt;/a&gt; if you want to skip straight to dessert.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The plan&lt;/h2&gt;

&lt;p&gt;We want to use webpack to watch our server files for changes, rebundle on change and restart the express server for changes to take effect.&lt;/p&gt;

&lt;h2 id=&quot;whats-so-hard-about-it&quot;&gt;What’s so hard about it?&lt;/h2&gt;

&lt;p&gt;Watching files for changes is already supported by webpack out of the box so that’s easy. For example we can do this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
  function watchServerChanges() {
    const webpack = require(‘webpack’);
    const serverCompiler = webpack(require(‘path/to/webpack/server/config’);
    const options = {
      aggregateTimeout: 300, // wait so long for more changes
      poll: true // use polling instead of native watchers
    };&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverCompiler.watch(options, function onServerChange(err, stats) {
  if (err) {
    console.log(&#39;Server bundling error:&#39; + JSON.stringify(err));
    return;
  }

  // TODO: restart express here 
});   } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can call watchServerChanges on our server bootstrap and walah problem solved. Well not quite. How do we tackle restarting express on server file changes?&lt;/p&gt;

&lt;h2 id=&quot;step-1-express-server-restart-using-htttpserverclose&quot;&gt;Step 1: Express server restart using htttp.Server.close()&lt;/h2&gt;
&lt;p&gt;The http.Server object provides a &lt;a href=&quot;https://nodejs.org/api/http.html#http_server_close_callback&quot; target=&quot;_blank&quot;&gt;close&lt;/a&gt; method which sounds like it might do the job.
For example we can theoretically do this:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
  function onServerChange(err, stats) {
    if (err) {
      console.log(‘Server bundling error:’ + JSON.stringify(err));
      return;
    }&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// TODO: somehow get a reference to the running http.Server object;
//const httpServer = ??? 

httpServer.close(function () {
  console.log(&#39;Server restarted &#39; + new Date());
});   } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Two things we need to solve here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We need to obtain a reference to the running http.Server object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;close() does not restart the server. It stops the server from accepting new connections and then shuts down the server when all its existing connections have closed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-11-getting-a-reference-to-httpserver&quot;&gt;Step 1.1: Getting a reference to http.Server&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/neo_spoon.jpg&quot; alt=&quot;Neo Spoon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at some code.&lt;/p&gt;

&lt;h4 id=&quot;srcserverindexjs-bootstrap&quot;&gt;src/server/index.js (bootstrap)&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
  require(‘babel-polyfill’);&lt;/p&gt;

&lt;p&gt;// require the server entry file where the express server is initialised
  // expect the server entry file to export a http.Server object
  const httpServer = require(‘./server’);&lt;/p&gt;

&lt;p&gt;//… then we can call httpServer.close() at some point later
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;srcserverserverjs-entry&quot;&gt;src/server/server.js (entry)&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
import express from ‘express’;&lt;/p&gt;

&lt;p&gt;const PORT = 3000;
const app = express();&lt;/p&gt;

&lt;p&gt;//… your other express middlewares&lt;/p&gt;

&lt;p&gt;// the listen method returns the currently running instance of 
// http.Server object 
const httpServer = app.listen(PORT, () =&amp;gt; {
  console.log(&lt;code class=&quot;highlighter-rouge&quot;&gt;Listening at ${PORT}&lt;/code&gt;);
});&lt;/p&gt;

&lt;p&gt;// export httpServer object so we can access it in bootstrap
module.exports = httpServer;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;What’s happening here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;src/server/index.js is our bootstrap file. It requires src/server/server.js 
and expects an http.Server object as the exported value of that module.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In server.js, the listen() method returns an instance of the running http.Server object. 
This is what we export out of this module for index.js.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are not done yet. Merely setting module.exports will not expose the exported object to
the consumer of our bundled js. Essentially we need to create a library out of our app. 
Meaning the main export of our app needs to be exposed to the consumer. To do this, 
in your webpack server config file, set &lt;strong&gt;output.libraryTarget = ‘commonjs2’&lt;/strong&gt;, like so:&lt;/p&gt;

&lt;h4 id=&quot;webpackconfigserverjs&quot;&gt;webpack.config.server.js&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
const webpack = require(‘webpack’);
const path = require(‘path’);
const nodeExternals = require(‘webpack-node-externals’);&lt;/p&gt;

&lt;p&gt;module.exports = {
  devtool: ‘cheap-module-inline-source-map’,&lt;/p&gt;

&lt;p&gt;// set this to your server entry point. This should be where you start 
  // your express server with .listen()
  entry: ‘./src/server/server.js’,&lt;/p&gt;

&lt;p&gt;// tell webpack this bundle will be used in nodejs environment.
  target: ‘node’,&lt;/p&gt;

&lt;p&gt;// Omit node_modules code from the bundle. You don’t want and don’t 
  // need them in the bundle.
  externals: [nodeExternals()], 
  output: {
    path: path.resolve(‘dist’),
    filename: ‘serverBundle.js’,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// IMPORTANT! Add module.exports to the beginning of the bundle 
// so your main module is exposed to the consumer of the bundle.
libraryTarget: &#39;commonjs2&#39;   },   // The rest of the config is pretty standard and can contain    // other webpack stuff you need.   module: {
loaders: [
  {
    test: /\.json$/,
    loader: &#39;json-loader&#39;
  },
  {
    test: /\.jsx?$/,
    loader: &#39;babel&#39;,
    include: path.resolve(&#39;src&#39;)
  }]   } }; {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-12-restarting-express&quot;&gt;Step 1.2: Restarting express&lt;/h3&gt;

&lt;p&gt;Now we have http.Server, we can call close() to stop the server. However as mentioned earlier, 
close() shuts down the server ONLY when all existing connections have closed. It does not terminate
stale or idle keep-alive connections. As a result after close() is invoked, your server will continue to run.
It will not accept new connections and it will wait for existing connections to timeout, which is in minutes.&lt;/p&gt;

&lt;p&gt;Obviously you can’t develop rapidly like this. You can’t call this hot-reload, it’s more like shit-reload.
A little googling reveals a promising &lt;a href=&quot;http://stackoverflow.com/questions/14626636/how-do-i-shutdown-a-node-js-https-server-immediately&quot;&gt;solution from stackoverflow&lt;/a&gt; by
&lt;a href=&quot;http://www.goloroden.de/&quot;&gt;Golo Roden&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The takeaway from that post is that each time a connection is made to our 
server, we have to keep a reference to the socket object that represents 
the connection. I store these in a Map for better performance rather
than a normal object as suggested in the post. We can then call
socket.destroy() in our watch handler for all sockets, which
terminates all connections to our http.Server. The close() method can then
proceed to shut the server.&lt;/p&gt;

&lt;p&gt;What does it look like in code?&lt;/p&gt;

&lt;h4 id=&quot;srcserverindexjs-bootstrap-1&quot;&gt;src/server/index.js (bootstrap)&lt;/h4&gt;
&lt;p&gt;{% highlight javascript %}
  require(‘babel-polyfill’);&lt;/p&gt;

&lt;p&gt;watchServerChanges();&lt;/p&gt;

&lt;p&gt;// Starts the express server. Caches sockets and delete those caches 
  // on socket close. Returns the running http.Server object and the
  // socket Map cache.
  function initHttpServer() {
    // start the server, getting back a reference to http.Server
    const httpServer = require(‘/path/to/server/bundle’);
    const sockets = new Map(); // cache all sockets in a Map
    let nextSocketId = 0;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;httpServer.on(&#39;connection&#39;, function (socket) {
  var socketId = nextSocketId++;
  sockets.set(socketId, socket);

  // remove socket from Map on close.
  // this is not where we terminate the socket! That happens 
  // in webpack.watch done handler below 
  socket.on(&#39;close&#39;, function () {
    sockets.delete(socketId);
  });
});

return {httpServer, sockets};   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;function watchServerChanges() {
      const webpack = require(‘webpack’);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // contains the running http.Server and socket cache
  let httpServerInitObject;
  let initialLoad = true;
  const compiler = webpack(require(&#39;path/to/webpack/server/config&#39;);
  const compilerOptions = {
    aggregateTimeout: 300, // wait so long for more changes
    poll: true // use polling instead of native watchers
  };
  
  // watch file changes
  compiler.watch(compilerOptions, function onServerChange(err, stats){
    if (err) {
      console.log(&#39;Server bundling error:&#39; + JSON.stringify(err));
      return;
    }
  
    if (initialLoad) {
      // first time run, just start the server, no need to restart
      initialLoad = false;
      httpServerInitObject = initHttpServer();
      console.log(&#39;Server bundling done&#39;);
    } else {
      // subsequent runs need to close the server and restart
      // call close() method, but this won&#39;t complete until all
      // sockets are destroyed below.
      httpServerInitObject.httpServer.close(function () {
        // if we reach this step, that means we have succeeded
        // in shutting down the server!!! Omg fuck yea!
        httpServerInitObject = initHttpServer(); // re-start
        console.log(&#39;Server restarted &#39; + new Date());
      });
  
      // This is where the magic happens: destroy all open sockets
      for (var socket of httpServerInitObject.sockets.values()) {
        socket.destroy();
      }        
    }
  });
} {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-2-clearing-the-require-cache&quot;&gt;Step 2: Clearing the require cache&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/batman_robin.jpg&quot; alt=&quot;Are we there yet?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you try the code above, you realise that it does not freakin work. Why? 
We are forgetting one thing: node caches all modules when required. How is
this a problem? At initial load, initHttpServer() will require your server.bundle.js
and node will cache that. Subsequent calls to initHttpServer() will re-use that
same server.bundle.js which is not we want. We want to require the newly
bundled server.bundle.js which webpack produces. To do this we need to clear
the require cache:&lt;/p&gt;

&lt;p&gt;{% highlight javascript %}
  function clearCache() {
    const cacheIds = Object.keys(require.cache);
    for(let id of cacheIds) {
      if (id === ‘path/to/server/bundle’) {
        delete require.cache[id];
        return;
      }
    }
  }
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You call clearCache() in onServerChange callback prior to starting the 
express server like so:
{% highlight javascript %}&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //... same code as above
  
  // watch file changes
  compiler.watch(compilerOptions, function onServerChange(err, stats){
    if (err) {
      console.log(&#39;Server bundling error:&#39; + JSON.stringify(err));
      return;
    }
    
    // This solves all first world problems
    clearCache();
  
    //... same as above
  });

// ...  {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-3-but-wait-theres-more&quot;&gt;Step 3: But wait there’s more!&lt;/h2&gt;
&lt;p&gt;You can combine this with existing client hot reload techniques using &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; 
and &lt;a href=&quot;https://github.com/gaearon/react-hot-loader&quot;&gt;react-hot-loader&lt;/a&gt; to achieve the ultimate universal hot reload experience. 
I have done this in &lt;a href=&quot;https://github.com/yusinto/universal-hot-reload&quot; target=&quot;_blank&quot;&gt;universal-hot-reload&lt;/a&gt; so you can check the source
code for that if you are interested. But for now, I’m out of time .. I need to take a shower.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;So webpack does solve everything and anything like I said in the beginning.. can it do my laundry and feed my dog too?&lt;/p&gt;

&lt;p&gt;The final product is &lt;a href=&quot;https://github.com/yusinto/universal-hot-reload&quot; target=&quot;_blank&quot;&gt;universal-hot-reload&lt;/a&gt;. 
Check it out! Let me know if there’s any issues.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="universal" />
<category term="hot" />
<category term="reload" />
<category term="webpack" />
<category term="server" />
<category term="client" />
<category term="bundle" />
<summary>I learnt quite a lot in the past week. Firstly there’s no substitute to good sleep. Secondly, you can actually eat a salmon steak raw! Thirdly, it’s really really hardto hot reload a server bundle if you are writing a universal app.</summary>
</entry>
<entry>
<title>Implementing feature toggle with launch darkly and react redux</title>
<link href="http://reactjunkie.com/react-feature-toggle-launch-darkly/" rel="alternate" type="text/html" title="Implementing feature toggle with launch darkly and react redux" />
<published>2016-09-16T10:52:00+02:00</published>
<updated>2016-09-16T10:52:00+02:00</updated>
<id>http://reactjunkie.com/react-feature-toggle-launch-darkly</id>
<content type="html" xml:base="http://reactjunkie.com/react-feature-toggle-launch-darkly/">&lt;h3 id=&quot;update-22-october-2016&quot;&gt;&lt;em&gt;Update: 22 October 2016&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;I have published an npm package called &lt;a href=&quot;https://github.com/yusinto/ld-redux&quot; target=&quot;_blank&quot;&gt;ld-redux&lt;/a&gt; which covers everything you need to integrate launch darkly with your react 
redux app. It’s the contents of this blog in an npm package. If you use it, please give me some feedback. Thanks!&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I first heard the term feature toggle from someone I interviewed when we were talking about continuous deployment (deploying to prod at anytime, continuously).
I didn’t really think much of it at first, thinking that it’s just a trivial bunch of if-else flags that I have to maintain
manually. I couldn’t be more wrong.&lt;/p&gt;

&lt;p&gt;Maintaining feature flags in your codebase can become messy very quickly. On top of that you need to build targeting and analytics tools that 
the business will (eventually) want. I soon realise that feature toggle is a distinct and separate supporting domain of my core domain. Much like identity and
access management. So is there anything existing out there we can use to integrate with our core domain?&lt;/p&gt;

&lt;p&gt;Enter Launch Darkly. I met Edith Harbaugh the CEO of Launch Darkly at NDC Sydney 2016. She was kind enough to give a demo of launch darkly in situ and I was blown away.
Launch darkly stores feature flags without coupling to the UI, so it works with React or any modern javascript framework with virtual dom reconciliation. 
The sdk supports almost every imaginable platform, but most importantly it’s on &lt;a href=&quot;https://www.npmjs.com/package/ldclient-js&quot; target=&quot;_blank&quot;&gt;npm&lt;/a&gt; and 
open source on &lt;a href=&quot;https://github.com/launchdarkly/js-client&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this blog I will walk through step by step how to integrate launch darkly feature toggles with your react react-router redux app.
Note that this blog assumes prior working knowledge of redux and redux-thunk.&lt;/p&gt;

&lt;h2 id=&quot;the-end-game&quot;&gt;The end game&lt;/h2&gt;
&lt;p&gt;By the end of this blog, we will have a feature-flag driven react redux app using Launch Darkly as our feature toggle provider.&lt;/p&gt;

&lt;h2 id=&quot;step-1-configure-launch-darkly-dashboard&quot;&gt;Step 1: Configure launch darkly dashboard&lt;/h2&gt;

&lt;p&gt;{% youtube _WDy_V0h-qk %}&lt;/p&gt;

&lt;h2 id=&quot;step-2-install-ldclient-js&quot;&gt;Step 2: Install ldclient-js&lt;/h2&gt;
&lt;p&gt;{% highlight bash %}
npm i ldclient-js –save
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-3-create-redux-action-and-reducer-to-instantiate-ldclient&quot;&gt;Step 3: Create redux action and reducer to instantiate ldclient&lt;/h2&gt;
&lt;p&gt;We need to instantiate the ldclient in order to communicate with launch darkly. This instantiation
should be done once at the start of the app, and the resultant client object stored in redux state to be 
re-used throughout the app.&lt;/p&gt;

&lt;p&gt;We’ll go ahead and create the action and reducer to perform this instantiation.&lt;/p&gt;

&lt;h4 id=&quot;appactionjs&quot;&gt;appAction.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
import ldClient from ‘ldclient-js’;&lt;/p&gt;

&lt;p&gt;export const initialiseLD = () =&amp;gt; {
  // use redux-thunk for async action
  return dispatch =&amp;gt; {
    /**
     * Launch darkly provides a comprehensive suite of targeting and
     * rollout options. Targeting and rollouts are based on the user
     * viewing the page, so we must pass a user at initialisation time.
     *
     * The user object can contain these properties:
     * key, ip, firstName, lastName, country, email, avatar, name,
     * anonymous.
     *
     * The only mandatory property is “key”. All the others are
     * optional. You can also specify custom properties using the
     * “custom” property name like company and authorOf properties below.
     *
     * For more info on users, check here:
     * http://docs.launchdarkly.com/docs/js-sdk-reference#users
    */
    const user = {
      // key is MANDATORY! You can use guid for anonymous users 
      “key”: “deadbeef”,
      “firstName”: “John”,
      “lastName”: “Carmack”,
      “email”: “jcarmack@doom.com”,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // specify custom properties here. These will appear
  // automatically on the dashboard.
  &quot;custom&quot;: {
    &quot;company&quot;: &quot;ID Software&quot;,
    &quot;authorOf&quot;: [&quot;doom&quot;, &quot;quake&quot;]
  }
};

// Actual work done here. You&#39;ll need to use your environment id as
// configured in your dashboard
const client = ldClient.initialize(&#39;YOUR-ENVIRONMENT-ID&#39;, user);

// The client will emit an &quot;ready&quot; event when it has finished
// initialising. At that point we want to store that client
// object in our redux state. Do this by dispatching an action
// with the client object as the argument to be stored in app state.
client.on(&#39;ready&#39;, () =&amp;gt; {
  dispatch(setLDReady(client));
});   }; };
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;// Stores launch darkly client object in app state
export const setLDReady = ldClient =&amp;gt; {
  return {
    type: Constants.LD_READY,
    data: ldClient
  }
};
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;appreducerjs&quot;&gt;appReducer.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
import Constants from ‘./common/constant’;&lt;/p&gt;

&lt;p&gt;const defaultState = {
  isLDReady: false,
  ldClient: null,
};&lt;/p&gt;

&lt;p&gt;export default function App(state = defaultState, action) {
  switch (action.type) {
    case Constants.LD_READY:
      return Object.assign({}, state, 
        {
            isLDReady: true, 
            ldClient: action.data
        });&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;default:
  return state;   } } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-4-invoke-initialiseld-on-componentdidmount&quot;&gt;Step 4: Invoke initialiseLD on componentDidMount&lt;/h2&gt;
&lt;p&gt;We want to initialise the client just once at the start of the app. The
best place to do this is at the root component’s componentDidMount.&lt;/p&gt;

&lt;p&gt;I’ll skip the appContainer snippet to keep things short.&lt;/p&gt;

&lt;h4 id=&quot;appcomponentjs&quot;&gt;appComponent.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
import React, {Component} from ‘react’;&lt;/p&gt;

&lt;p&gt;export default class App extends Component {
  componentDidMount() {
    // This will trigger ldclient initialisation
    this.props.initialiseLD();
  }&lt;/p&gt;

&lt;p&gt;render() {
    …
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-5-fetching-feature-flags&quot;&gt;Step 5. Fetching feature flags&lt;/h2&gt;
&lt;p&gt;This is the jist of the entire blog so pay attention! Now we have the 
client initialised, we can fetch our flags! Each component which uses 
feature flagging must subscribe to the isLDReady app state above. 
This is pretty standard in redux, and you can do this like so:&lt;/p&gt;

&lt;h4 id=&quot;homecontainerjs&quot;&gt;homeContainer.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
import React, {Component} from ‘react’;
import {connect} from ‘react-redux’;
import * as Actions from ‘./homeAction’;
import HomeComponent from ‘./homeComponent’;&lt;/p&gt;

&lt;p&gt;const mapStateToProps = (state) =&amp;gt; {
  const appState = state.App;
  const homeState = state.Home;&lt;/p&gt;

&lt;p&gt;return {
    isLDReady: appState.isLDReady,
    …homeState
  };
};&lt;/p&gt;

&lt;p&gt;@ connect(mapStateToProps, Actions)
export default class HomeContainer extends Component {
  render() {
    return &amp;lt;HomeComponent {…this.props} /&amp;gt;;
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;So now we can fetch “home” specific feature flags when ldclient is ready
like so:&lt;/p&gt;

&lt;h4 id=&quot;homecomponentjs&quot;&gt;homeComponent.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
import React, {Component} from ‘react’;&lt;/p&gt;

&lt;p&gt;export default class Home extends Component {
  …
  // When the ready flag changes to true, we fetch feature flags for
  // this component
  componentWillReceiveProps(newProps) {
    if (newProps.isLDReady &amp;amp;&amp;amp; !this.props.isLDReady) {
      this.props.initialiseHomeFlags();
    }
  }
  …
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;i&gt;initialiseHomeFLags&lt;/i&gt;&lt;/b&gt; is the interesting bit here. The way you 
 retrieve flags from launch darkly is through the “variation” method. You
 pass the feature flag key (which you set up in the dashboard) along with 
 a default, just in case the call failed or if 
 the flag doesn’t exist. That means you need to store all your feature
 flag keys somewhere in the app so it can be shared across actions and reducers. 
 I store it in a “logic” file specific to the component, so I can have 
 a clean separation of concerns between actions and business logic.&lt;/p&gt;

&lt;h4 id=&quot;homelogicjs&quot;&gt;homeLogic.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
export const homeFlags = {
  ‘random-number’: false // default flag value
};
{% endhighlight %}&lt;/p&gt;

&lt;h4 id=&quot;homereducerjs&quot;&gt;homeReducer.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
…
const defaultState = {
  randomNumber: 0,&lt;/p&gt;

&lt;p&gt;// store home flags in component state
  …homeFlags 
};&lt;/p&gt;

&lt;p&gt;export default function App(state = defaultState, action) {
  switch (action.type) {
    case Constants.GENERATE_RANDOM:
      return Object.assign({}, state, {randomNumber: action.data});&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;case Constants.SET_HOME_FLAGS:
  return Object.assign({}, state, action.data);

default:
  return state;   } } {% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can then retrieve individual feature flags for the home component
in our initialiseHomeFlags action using ldclient’s variation method:&lt;/p&gt;

&lt;h4 id=&quot;homeactionjs&quot;&gt;homeAction.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
…
export const initialiseHomeFlags = () =&amp;gt; {
  // use thunk
  return (dispatch, getState) =&amp;gt; {
    // get launch darkly client from app state
    const ldClient = getState().App.ldClient;
    const flags = {};&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (let key in homeFlags) {
  // fetch each key
  flags[key] = ldClient.variation(key, homeFlags[key]);

  // EXTRA!! Subscribe to changes!
  ldClient.on(`change:${key}`, current =&amp;gt; {
    const changedFlag = {};
    changedFlag[key] = current;
    dispatch(setHomeFlags(changedFlag));
  });
}

dispatch(setHomeFlags(flags));   };
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;const setHomeFlags = flags =&amp;gt; {
    return {
      type: Constants.SET_HOME_FLAGS,
      data: flags
    }
  };
};
…
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;b&gt;EXTRA!!&lt;/b&gt; Launch darkly provides support for realtime feature flag change
propagation using Server Sent Events (SSE, which is a html5 thing). This is like
websockets but it’s a one way connection from the server to client to allow
 for push notifications. This is super cool! That means the client can 
 see feature flag changes from the dashboard in realtime without having to 
 refresh the browser!&lt;/p&gt;
&lt;p&gt;
 The way you subscribe to this is by using the &quot;on&quot; event on the client object,
 specifying the string &#39;change:featureFlagKey&#39; as the first argument, and the
 action to take as the second argument. In this case, we send an action
 to store the updated flags in our component state via our reducer.
 &lt;/p&gt;

&lt;h2 id=&quot;step-6-use-feature-flags&quot;&gt;Step 6: Use feature flags&lt;/h2&gt;
&lt;p&gt;This is the most fun and easy part!&lt;/p&gt;

&lt;h4 id=&quot;homecomponentjs-1&quot;&gt;homeComponent.js&lt;/h4&gt;
&lt;p&gt;{% highlight c# %}
import React, {Component} from ‘react’;&lt;/p&gt;

&lt;p&gt;export default class Home extends Component {
  …
  render() {
      return (
        &amp;lt;div&amp;gt;
          &amp;lt;p&amp;gt;
            Welcome to the homepage! The random number feature below is 
            feature toggled.
          &amp;lt;/p&amp;gt;
          {
            // feature toggle!
            this.props[‘random-number’] ?
              &amp;lt;div&amp;gt;
                &amp;lt;button onClick={this.onClickGenerateRandom}&amp;gt;Generate 
                random number&amp;lt;/button&amp;gt;
                &amp;lt;p&amp;gt;{this.props.randomNumber}&amp;lt;/p&amp;gt;
              &amp;lt;/div&amp;gt;
              :
              null
          }
        &amp;lt;/div&amp;gt;
      );
    }
  …
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Your feature flags will be available to you as props because it’s hydrated
by actions in the state. The only gotcha here is that you need to access
the feature flags using the brackets notation i.e. this.props.[‘feature-flag-key’] 
instead of the standard dot notation. This is because keys can contain
 spaces when created in the dashboard and spaces are replaced by dashes
 automatically by launch darkly. Since dashes are not allowed when using
 the dot notation, we have to use square brackets. There could be a better
 way, if you find one, let me know!&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;Feature flagging is instrumental in achieving continuous deployment and I have just
touched the tip of the iceberg. I will
be blogging more about my journey towards continuous deployment with docker
and launch darkly in the coming posts.&lt;/p&gt;

&lt;p&gt;All the code in this blog are available on &lt;a href=&quot;https://github.com/yusinto/launchdarkly&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="redux" />
<category term="feature" />
<category term="toggle" />
<category term="launch" />
<category term="darkly" />
<category term="toggling" />
<summary>Update: 22 October 2016I have published an npm package called ld-redux which covers everything you need to integrate launch darkly with your react redux app. It’s the contents of this blog in an npm package. If you use it, please give me some feedback. Thanks!</summary>
</entry>
<entry>
<title>Deploying react apps on docker using ecs and terraform part 1</title>
<link href="http://reactjunkie.com/docker-ecs-terraform-react/" rel="alternate" type="text/html" title="Deploying react apps on docker using ecs and terraform part 1" />
<published>2016-09-03T10:52:00+02:00</published>
<updated>2016-09-03T10:52:00+02:00</updated>
<id>http://reactjunkie.com/docker-ecs-terraform-react</id>
<content type="html" xml:base="http://reactjunkie.com/docker-ecs-terraform-react/">&lt;p&gt;I was tinkering on blogging about Step 5 to React: Introduction to Redux, but I decided to write something closer to my heart: 
using ecs and terraform to deploy docker react apps (can I squeeze in anymore buzzwords?). This is not an intro to docker so 
I assume you are familiar with the basics.&lt;/p&gt;

&lt;p&gt;My plan was to use docker to achieve continuous integration and ultimately continuous delivery and then deployment. But I like to
start things small so the plan was to firstly create a docker image on every master merge and save that image.&lt;/p&gt;

&lt;p&gt;This image
is a stable and deployable package which can be deployed and run on any environment. This is the “golden” build concept - a single build
that is used on all steps of the deployment pipeline: uat, stage and prod. This is a good practice to adopt because the exact same 
build that has gone through all the QA steps is the one that’s going out to production.&lt;/p&gt;

&lt;p&gt;It gives you confidence the prod deployment at the end
will work as expected. This is only possible if the package that comes out of your CI build is immutable - that’s where docker comes in. I don’t 
know about you but I get really turned on by this kind of stuff! Let’s get to it!&lt;/p&gt;

&lt;h2 id=&quot;the-end-game&quot;&gt;The end game&lt;/h2&gt;
&lt;p&gt;By the end of this blog, we want to be able to create a docker image containing our react app, be able to run lint, tests and the actual app
on that image.&lt;/p&gt;

&lt;p&gt;We will be using the codebase from my &lt;a href=&quot;http://www.reactjunkie.com/step-four-to-react-routing-with-react-router/&quot; target=&quot;_blank&quot;&gt;previous blog on react router&lt;/a&gt;. It’s 
a minimal react spa with routing, you should be able to easily substitute your own codebase and follow the steps here to use docker.&lt;/p&gt;

&lt;h2 id=&quot;step-1-install-docker&quot;&gt;Step 1: Install docker&lt;/h2&gt;
&lt;p&gt;I’m on a mac so download docker for mac from &lt;a href=&quot;https://download.docker.com/mac/stable/Docker.dmg&quot;&gt;here&lt;/a&gt;. It’s a 110mb download so stop reading and do it first, continue reading later.
There are some hardware &amp;amp; os requirements. The important ones are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X 10.10.3 Yosemite or newer&lt;/li&gt;
&lt;li&gt;VirtualBox 4.3.30 or newer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have a previous install of docker-machine, mac docker will ask if you want to migrate data from that install to your new install. I said no because I don’t have anything
important to migrate as I’ll be starting from scratch.&lt;/p&gt;

&lt;p&gt;Once installation is done, open terminal and type:
{% highlight bash %}
docker -v
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You should get something like 
{% highlight bash %}
Docker version 1.12.0, build 8eab29e
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Now we are ready to rock!&lt;/p&gt;

&lt;h2 id=&quot;step-2-create-dockerfile&quot;&gt;Step 2: Create Dockerfile&lt;/h2&gt;

&lt;p&gt;We need to create a Dockerfile first. This is the sequence of instructions you tell docker to execute to create the image. 
It’s akin to you manually entering a sequence of shell commands on the terminal of a new linux box when deploying your app. Except
docker runs it for you automatically, and then saves the resultant state of that linux box as an image.&lt;/p&gt;

&lt;p&gt;So right click on the root directory of your project, add a new file call it &lt;i&gt;Dockerfile&lt;/i&gt;. It should look like this:&lt;/p&gt;

&lt;h4 id=&quot;dockerfile&quot;&gt;DockerFile&lt;/h4&gt;
&lt;p&gt;{% highlight bash %}
# We need a base image to build upon. Use the latest node image from 
# dockerhub as the base image so we get node and npm for free
FROM node:latest
MAINTAINER Yus Ng&lt;/p&gt;

&lt;h1 id=&quot;store-all-our-app-code-in-the-src-folder-starting-from-packagejson&quot;&gt;Store all our app code in the /src folder, starting from package.json&lt;/h1&gt;
&lt;p&gt;# first. Why copy package.json first? So we can take advantage of 
# the docker build cache. More below.
COPY package.json /src/package.json&lt;/p&gt;

&lt;h1 id=&quot;once-we-have-packagejson-do-npm-install-restricting-the-loglevel&quot;&gt;Once we have package.json, do npm install (restricting the loglevel&lt;/h1&gt;
&lt;p&gt;# to minimise noise)
RUN cd /src &amp;amp;&amp;amp; npm install –loglevel error&lt;/p&gt;

&lt;h1 id=&quot;copy-all-our-code-yes-including-packagejson-again-to-src&quot;&gt;Copy all our code (yes including package.json again) to /src.&lt;/h1&gt;
&lt;p&gt;COPY . /src&lt;/p&gt;

&lt;h1 id=&quot;change-directory-into-the-src-folder-so-we-can-execute-npm-commands&quot;&gt;Change directory into the /src folder so we can execute npm commands&lt;/h1&gt;
&lt;p&gt;WORKDIR /src&lt;/p&gt;

&lt;h1 id=&quot;this-is-the-express-port-on-which-our-app-runs&quot;&gt;This is the express port on which our app runs&lt;/h1&gt;
&lt;p&gt;EXPOSE 3000&lt;/p&gt;

&lt;h1 id=&quot;this-is-the-default-command-to-execute-when-docker-run-is-issued-only&quot;&gt;This is the default command to execute when docker run is issued. Only&lt;/h1&gt;
&lt;p&gt;# one CMD instruction is allowed per Dockerfile.
CMD npm start
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Important points&lt;/b&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each instruction creates a new intermediate layer.&lt;/li&gt;
&lt;li&gt;Docker uses the instruction string as the cache key. The result of that instruction is a new layer which gets stored as the cache value.&lt;/li&gt;
&lt;li&gt;ADD and COPY instructions are special. The cache key for these are the checksum of their file contents.&lt;/li&gt;
&lt;li&gt;If your package.json file does not change, the cache will be hit because the checksum matches. The next instruction npm install will also hit the cache 
because docker uses the instruction string as key which has not changed.&lt;/li&gt;
&lt;li&gt;In contrast, consider what will happen if do COPY . /src and then followed by RUN npm install.&lt;/li&gt;
&lt;li&gt;The COPY command does a checksum of all the files in current directory and compares that against previous layers. Some files
would have changed in the src folder, because it contains all our source code, images, config files, styles, etc. The checksum comparison would not match, hence
the cache will be invalidated. Once invalidated, all subsequent instructions will create new layers ignoring the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on docker build cache check the official doco &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-3-create-dockerignore&quot;&gt;Step 3: Create .dockerignore&lt;/h2&gt;

&lt;p&gt;We need one more file before we can build our image. Go ahead and add a new file to the root directory of your project call it 
&lt;i&gt;.dockerignore&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Docker will exclude files and directories specified here from the image. It should look like this:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
.git
.gitignore
node_modules
npm-debug.log
{% endhighlight %}&lt;/p&gt;

&lt;h2 id=&quot;step-4-build-the-docker-image&quot;&gt;Step 4: Build the docker image&lt;/h2&gt;

&lt;p&gt;Let’s do it! Go to terminal, cd into your root project folder where your Dockerfile resides and type the following (&lt;b&gt;NOTE&lt;/b&gt; the “.” at the end
is very important!):&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
docker build -t reactjunkie:v1 .
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Docker will build an image named “reactjunkie:v1” using the Dockerfile specified in the current directory (represented by the “.” at the end). You can see it
by issuing the command:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
docker images
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;You should see two images; the latest node base image which gets downloaded when docker built our image and our reactjunkie:v1 image.&lt;/p&gt;

&lt;h2 id=&quot;step-5-run-the-docker-container&quot;&gt;Step 5: Run the docker container&lt;/h2&gt;

&lt;p&gt;Now we have an image, we can start a container based on that image and run our app!&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
docker run -d -p 8080:3000 reactjunkie:v1
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This command tells docker to run the default CMD command specified in the last line of our Dockerfile above. As we will see shortly we can
override this default by issuing our own commands.&lt;/p&gt;

&lt;p&gt;The -d flag tells docker to detach from the container process after issuing the command so we regain control of our terminal window.&lt;/p&gt;
&lt;p&gt;The -p flag maps the port on your mac (the host) to the container port.
Hit &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot;&gt;http://localhost:8080&lt;/a&gt; and you should be able to see the app running!&lt;/p&gt;

&lt;h2 id=&quot;step-6-running-lint-and-test&quot;&gt;Step 6: Running lint and test&lt;/h2&gt;

&lt;p&gt;So the previous step demonstrated how we can run our webapp on our docker container. However in a CI environment, we want to be able to first build our image,
run lint and tests and then save the image first prior to starting the web app.&lt;/p&gt;

&lt;p&gt;I’ve setup eslint and jest in this project (available on &lt;a href=&quot;https://github.com/yusinto/docker&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;). To run eslint and tests on our container, type 
the following:&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
docker run -i –rm reactjunkie:v1 npm run lint
docker run -i –rm reactjunkie:v1 npm t
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The -i flag tells docker to run in &quot;interactive&quot; mode so we can see eslint console output from the container.&lt;/p&gt;
&lt;p&gt;The --rm flag tells docker to automatically clean up the container and remove its file system when the it exits.&lt;/p&gt;
&lt;p&gt;Then npm run lint and npm t are the commands that override the default CMD instruction in our Dockerfile. Docker will start
a container based on our image, issue these commands and then cleanup and remove the container when that command is finished.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;Now we have the docker image on our local machine, we need a way to export it to a central place so it can be shared with other developers, 
build systems and so on. Docker has dockerhub which does exactly that, but I use ECR which is aws’ offering.&lt;/p&gt;

&lt;p&gt;All the code in this blog are available on &lt;a href=&quot;https://github.com/yusinto/docker&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be continued…&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="react" />
<category term="docker" />
<category term="ecs" />
<category term="terraform" />
<category term="deploy" />
<category term="continuous" />
<category term="integration" />
<category term="deployment" />
<summary>I was tinkering on blogging about Step 5 to React: Introduction to Redux, but I decided to write something closer to my heart: using ecs and terraform to deploy docker react apps (can I squeeze in anymore buzzwords?). This is not an intro to docker so I assume you are familiar with the basics.My plan was to use docker to achieve continuous integration and ultimately continuous delivery and then deployment. But I like tostart things small so the plan was to firstly create a docker image on every master merge and save that image.</summary>
</entry>
<entry>
<title>Australia Brain Drain</title>
<link href="http://reactjunkie.com/brain-drain-australia/" rel="alternate" type="text/html" title="Australia Brain Drain" />
<published>2016-08-05T01:19:00+02:00</published>
<updated>2016-08-05T01:19:00+02:00</updated>
<id>http://reactjunkie.com/brain-drain-australia</id>
<content type="html" xml:base="http://reactjunkie.com/brain-drain-australia/">&lt;p&gt;My first NDC conference (anywhere) I have to say the whole event was very well planned, although there are a
couple of things which can be improved:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Wifi connection - the Hilton&#39;s wifi connection was so crap, all the guest speakers especially american and uk
    speakers think that Australia as a whole are running on a 56k modem. I actually attended a session where the speaker had
    to tether from an Android 4G connection just to demo his stuff (Peter Myers, please forgive us). If you are from overseas 
    speaking/spoke at NDC Sydney, please accept our sincerest apology, and please don&#39;t misunderstand. Our internet connection 
    in Australia is pretty good, it&#39;s just at Hilton&#39;s, so please forgive us.&lt;/li&gt;
    &lt;br /&gt;
    &lt;li&gt;Pricing was a bit steep. I understand Sydney is one of the most expensive cities in the world, yes yes. It&#39;s such 
    a shame though many developers are left out of NDC because of pricing/cost. Personally I know many a great
    developer that missed out on NDC Sydney purely due to financial reasons. I believe an event such as this should be more
    accessible and affordable to the community in general, because it&#39;s a symbiosis. The more people attending these events,
    the more aware they are of the current technologies on offer today, the higher the adoption rate and awareness, and
    the whole thing propagates in a vicious cycle that can only benefit the development world.
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enough of my rant and angst, I want to emphasise on a more pressing issue at hand; which is the title of this blog today “Brain Drain”.
Not for the first time in recent years/months, I heard a colleague/friend saying “Oh I used to work in &lt;b&gt;{insert iconic aussie company here}&lt;/b&gt;,
but I’m moving to Seattle to work for Amazon now”.&lt;/p&gt;

&lt;p&gt;I have to admit, I have attended more than one interviews with
Amazon, Facebook, Google you name it and the lure of working for these mammoth companies is irresistible. Not only the prospect
 of living and working overseas attractive for Australians, imagine how your resume will look after working for
 Facebook or Amazon. You can pretty much quit after 2 years, come back to Australia or go anywhere in the world and
 get a job based on the premise that “Oh by the way I worked for Aws/Facebook for a couple of years”. It’s definitely a legit reason
 to quit your job in Australia and move to the States.&lt;/p&gt;

&lt;p&gt;I want to challenge that temptation right now. Australia is facing a severe “brain drain” at the moment. What I mean by that
is our talent is being poached by Amazon/Facebook/Google; they are leaving Australia for the States because these are the
leading innovative tech companies at the moment. Or so people assume.&lt;/p&gt;

&lt;p&gt;Think about it for a second. If you are a developer in Australia and you are offered by Facebook to join their engineering team,
would you turn it down? Would you give up your lifestyle, your kids’ lifestyle, your wife’s career, pack up and go to Sillicon Valley
and live happily ever after in Santa Clara? Probably. Instinctively I think most people would say yes. However, I would 
implore you to consider more carefully.&lt;/p&gt;

&lt;p&gt;For one, food. I’m an avid food lover, and I like my food healthy and cholesterol friendly. I want my kids and family to be 
healthy too. I’m not saying the food in the States are crap, all I’m saying is that we are spoilt for choice in Sydney.
There are things that we take for granted, for example good coffee or a decent loaf of bread or fresh seafood. You can still
find these in Sillicon Valley, but perhaps not so easily.&lt;/p&gt;

&lt;p&gt;Secondly weather. I was in San Francisco a few weeks ago and I had a chance to experience “summer” there. Let me tell you now you can’t
wear a bikini to the beach even in summer there. For one, there are no “beaches” there, at least not one that’s comparable to Bondi or any beach in
Sydney. It’s just way too cold even during summer to go to the beach for a dip. If you think winter in Sydney is cold, think again.&lt;/p&gt;

&lt;p&gt;I’m just really disappointed in Australia’s inability to retain talent. We are a talented nation. I know so because I have been 
working in the IT industry for over 13 years now and I’ve met and worked with many talented developers. Why can’t Australia keep Australians
working in Australia in the IT industry? There are a few reasons that pop to my head.&lt;/p&gt;

&lt;p&gt;For one, the “big” names like Apple, Facebook, Amazon are too big to resist. Hollywood movies of Steve Jobs and “The Social Network” further
extremised these views that Sillicon Valley is the place to be if you want to be somebody. I don’t blame them. The Australian government are
not helping either, imposing strict legislations on innovative services and startups like Uber and AirBnb.&lt;/p&gt;

&lt;p&gt;Do you know that Uber is still not
completely legal in Australia? Nor is AirBnb. In San Francisco, the local government are so supportive of tech and startups, it became almost
seamless and natural that new ideas are legalised almost immediately. In fact, if you are against new ideas or innovation, you’re weird.&lt;/p&gt;

&lt;p&gt;Australia need
to embrace tech like the San Franciscans. We need to do this in order to retain talent and to be competitive with the mammoth that are Google, 
Amazon, etc in Sillicon Valley/Seattle. There is no reason why we can’t nurture this culture of tech startups and innovation. There is no reason
why Sydney can’t have a “Sillicon Valley” or “Kangaroo Valley” (excuse the pun). We actually do have a place called Kangaroo Valley which is quite 
lovely, I highly recommend it.&lt;/p&gt;

&lt;p&gt;A change in government mentality towards technology is required in Australia to promote innovation and startups and to retain talent. I believe
one day Australia will be a comparable competitor to the States in terms of technological advancement, talent pool and innovation. Companies like
Atlassian and Xero are leading the way, but we need more. One day the tables will turn and Australia will be the ones poaching talent from the 
States and the rest of the world as well.&lt;/p&gt;

&lt;hr /&gt;
</content>
<category term="australia" />
<category term="brain" />
<category term="drain" />
<summary>My first NDC conference (anywhere) I have to say the whole event was very well planned, although there are acouple of things which can be improved:    Wifi connection - the Hilton&#39;s wifi connection was so crap, all the guest speakers especially american and uk    speakers think that Australia as a whole are running on a 56k modem. I actually attended a session where the speaker had    to tether from an Android 4G connection just to demo his stuff (Peter Myers, please forgive us). If you are from overseas     speaking/spoke at NDC Sydney, please accept our sincerest apology, and please don&#39;t misunderstand. Our internet connection     in Australia is pretty good, it&#39;s just at Hilton&#39;s, so please forgive us.        Pricing was a bit steep. I understand Sydney is one of the most expensive cities in the world, yes yes. It&#39;s such     a shame though many developers are left out of NDC because of pricing/cost. Personally I know many a great    developer that missed out on NDC Sydney purely due to financial reasons. I believe an event such as this should be more    accessible and affordable to the community in general, because it&#39;s a symbiosis. The more people attending these events,    the more aware they are of the current technologies on offer today, the higher the adoption rate and awareness, and    the whole thing propagates in a vicious cycle that can only benefit the development world.    </summary>
</entry>
</feed>
