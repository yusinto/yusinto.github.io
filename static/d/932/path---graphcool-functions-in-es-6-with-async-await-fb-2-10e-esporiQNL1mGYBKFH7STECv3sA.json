{"data":{"markdownRemark":{"html":"<p>Graphcool is cool. Graphcool functions are even cooler. There are two types of functions:\nrequest pipeline and server side subscription. Request pipeline function gets triggered\nat a specified stage of a crud request. You write custom business logic you want to execute\nas part of your api requests here. It is synchronous.</p>\n<p>The second type of function is server side subscription. These get triggered\n<b>after</b> crud operations. Your write custom business logic here to\nreact to crud events in your database. Server side subscriptions are\nasynchronous.</p>\n<p>In this blog, I will talk about server side subscriptions. A crud occurs\non the server and we want to execute some business logic after that happens.\nThe traditional solution is to do it in our own backend in node/java/.net\nprobably in the business logic layer. But that means we need to host our\nown backend server which means we have to worry about infrastructure.\nCan we do better?</p>\n<p>Yes we can. Enter Graphcool server side subscriptions. You write your business logic directly in\nthe Graphcool console and specify the event which will trigger this logic.</p>\n<h2>Goal</h2>\n<p>The goal is to create a stripe customer when a Graphcool customer is created. It's a very common\nuse case. The complete code is <a href=\"https://github.com/yusinto/functions/tree/master/stripe-create-customer-es6\" target=\"_blank\" rel=\"nofollow\">here</a>.</p>\n<p>Enough talk, let's code!</p>\n<h2>Step 1: Create Graphcool schema</h2>\n<p>Create a Customer type in your Graphcool backend so we have something to crud with.</p>\n<h4>customer.graphql</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\">\n      <pre class=\"language-graphql\"><code class=\"language-graphql\">type Customer implements Node <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">email</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">stripeCustomerId</span><span class=\"token punctuation\">:</span> String\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span> <span class=\"token directive function\">@isUnique</span>\n  <span class=\"token attr-name\">createdAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">updatedAt</span><span class=\"token punctuation\">:</span> DateTime<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Use the graphcool cli to create a new Graphcool project and create the Customer type.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> -g <span class=\"token function\">install</span> graphcool\ngraphcool init --schema customer.graphql</code></pre>\n      </div>\n<h2>Step 2: Create Graphcool server side subscription</h2>\n<p>The cli is powerful but it is still work in progress. You can't create functions\nvia the cli at this stage (yet). We'll create our ssr function via the console\nfor now. You can open the console using the cli:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">graphcool console</code></pre>\n      </div>\n<p>Go to functions -> new function -> server-side subscription -> select Customer type\nas the trigger and click define function. Copy paste the subscription query\nbelow into the left window pane under subscription query.</p>\n<h4>subscription.graphql</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\">\n      <pre class=\"language-graphql\"><code class=\"language-graphql\">subscription <span class=\"token punctuation\">{</span>\n  Customer<span class=\"token punctuation\">(</span><span class=\"token attr-name\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">mutation_in</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>CREATED<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    updatedFields\n    node <span class=\"token punctuation\">{</span>\n      id\n      email\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Let's look at this in detail:</p>\n<ul>\n<li>\nThe <b><i>subscription</i></b> keyword is a third operation recently added to\ngraphql in addition to query and mutation.\n</li>\n<li>The subscription above means we are subscribing only to Customer create events.\nYou can also listen to UPDATED and DELETED events but we don't need those here.\n</li>\n<li>When a Customer is created, return the id and email of that newly created customer.</li>\n</ul>\n<p>Back in the console click \"Create Function\". Leave inline code on the right pane\nas is for now, we'll write the code for this in the next section.</p>\n<h2>Step 3: Write code!</h2>\n<p>Finally we get to write some code! You can code directly\nin the console inline editor, but doing so forgoes a lot of the benefit\nof your IDE. Furthermore, behind the scenes inline functions are deployed\nto <a href=\"https://webtask.io/\" target=\"_blank\" rel=\"nofollow\">webtask</a> which is cool\nbut does not support async await.</p>\n<p>Optionally you can also write and host your code elsewhere (like aws lambda) and\nspecify that as a webhook. But this means you have to worry about hosting\nyour code elsewhere.</p>\n<p>In this blog, we want to be able to write es6 code with async await, linting, unit tests,\nstrong typing, etc in the comfort of our favourite IDE and be able to\ndeploy that to graphcool. To do this we have to bite the bullet and use\nwebpack to transpile our code. Luckily for you fellow js devs, readers and\noss fans, I've done all the hard work! I have worked out the minimal webpack\nconfig to support async await and the latest es6 features to write Graphcool\nfunctions. There's a <a href=\"#bonus-webpack-configuration\">bonus section</a> at the\nend of this blog if you are interested in how the webpack config works.</p>\n<h3>Step 3.1: Copy package.json</h3>\n<p>Copy package.json from <a href=\"https://github.com/yusinto/functions/tree/master/stripe-create-customer-es6\" target=\"_blank\" rel=\"nofollow\">here</a>\nto your root directory. Then do yarn.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">yarn</code></pre>\n      </div>\n<p>The devDependencies are mostly used by webpack to transpile our code. We also\nuse jest for unit tests so that's in there too. We also need the stripe\nlibrary and a fetch library so those are included as dependencies.</p>\n<h3>Step 3.2: Copy webpack.config.js and .babelrc and create src dir</h3>\n<p>Copy webpack.config.js and .babelrc files from <a href=\"https://github.com/yusinto/functions/tree/master/stripe-create-customer-es6\" target=\"_blank\" rel=\"nofollow\">here</a>\ninto the root directory of your project. Check the\n<a href=\"#bonus-webpack-configuration\">bonus section</a> below if you want to dig\ninto the webpack config.</p>\n<p>Also at the root of your project, create a src directory where all your code lives.</p>\n<h2>Step 3.3:</h2>\n<p>Create a file called src/createStripeCustomer.js. This file contains all\nof our function code. Note that the webpack config you copied is hardcoded to\nlook for this file under src/createStripeCustomer.js. You can change this\nin webpack.config.js if you wish.</p>\n<h4>main method</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>Customer<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> stripeCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createStripeCustomer</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> graphCoolCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">updateGraphCoolCustomer</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> stripeCustomer<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Successfully updated GraphCool customer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>graphCoolCustomer<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4>createStripeCustomer method</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> createStripeCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> email <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Creating stripe customer for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> stripeCustomer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    stripeCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> stripe<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>email<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Successfully created Stripe customer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stripeCustomer<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> stripeCustomer<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Error creating Stripe customer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4>updateGraphCoolCustomer method</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> updateGraphCoolCustomer <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> stripeCustomerId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> updateCustomer <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n        mutation {\n          updateCustomer(\n            id: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\",\n            stripeCustomerId: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stripeCustomerId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\",\n          ) {\n            id\n            stripeCustomerId\n            email\n          }\n        }\n      `</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>graphCoolEndpoint<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> updateCustomer<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Error updating GraphCool customer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>The entire file is available <a href=\"https://github.com/graphcool-examples/functions/blob/master/stripe-create-customer-es6/src/createStripeCustomer.js\" target=\"_blank\" rel=\"nofollow\">here</a>\non github.</p>\n<h2>Bonus: webpack configuration</h2>\n<p>This is not a webpack tutorial but I want to share a few interesting things I\ndiscovered while working on this:</p>\n<ul>\n<li>\nWe will export our function by setting module.exports so we need to set\noutput.libraryTarget to commonjs2.\n</li>\n<li>\n<b>DO NOT BUNDLE THIRD PARTY LIBRARIES!</b> This will blow up your code size, and it's\nnot necessary. Your Graphcool function is executed in webtask\nand it supports most of the npm packages you'll need. Check \n<a href=\"https://tehsis.github.io/webtaskio-canirequire/\" target=\"_blank\">here</a>\nfor packages webtask supports.\n</li>\n<li>As a result of the point above, use\n<a href=\"https://github.com/liady/webpack-node-externals\" target=\"_blank\">webpack-node-externals</a> to exclude all npm packages.\n</li>\n<li>\nGOTCHA: To enable latest es6 features and async await, we have to include two npm packages: babel-polyfill and regenerator-runtime/runtime\n</li>\n</ul>\nIf you are interested, you can check the complete webpack config \n<a href=\"https://github.com/yusinto/functions/blob/master/stripe-create-customer-es6/webpack.config.js\" target=\"_blank\">here</a>.\n<h2>Conclusion</h2>\n<p>With client side subscriptions, you'll use apollo with\nthe <a href=\"https://github.com/apollographql/subscriptions-transport-ws\" target=\"_blank\" rel=\"nofollow\">subscriptions-transport-ws</a>\nto enable your js client app to \"hot listen\" to server changes. The server pushes notifications\nto the client, which reacts to these notifications in real-time. It's super cool!</p>\n<p>This approach incurs a little more time to setup, but I think it's worth it. We leave the code fully testable, encapsulation intact.\nThis feels right for me. Also, you can apply the same technique to test react components wrapped in relay containers. It works! </p>\n<p>Check out the code on <a href=\"https://github.com/yusinto/functions/tree/master/stripe-create-customer-es6\" target=\"_blank\" rel=\"nofollow\">github</a>!</p>\n<hr>","timeToRead":6,"frontmatter":{"date":"June 30, 2017","path":"/graphcool-functions-in-es6-with-async-await","title":"Writing Graphcool functions in es6 with async await and jest","files":null,"tags":["graphcool","functions","server","side","subscription","async","await","es6","graphql","jest"]}}},"pageContext":{}}