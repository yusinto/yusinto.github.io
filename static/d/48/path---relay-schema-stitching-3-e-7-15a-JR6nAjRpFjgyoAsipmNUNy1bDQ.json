{"data":{"markdownRemark":{"html":"<p>Schema stitching was introduced by Apollo, so there is a general misconception that it\nonly works with the apollo stack but it works with relay as well! In this blog\nI'll show you how to stitch your relay schema with any remote graphql schema.</p>\n<p>You can find the complete project in <a href=\"https://github.com/yusinto/relay-compiler-plus/tree/master/example-stitching\" target=\"_blank\" rel=\"nofollow\">github</a>.</p>\n<h2>Goal</h2>\n<p>Given a local schema that looks like this:</p>\n<script src=\"https://gist.github.com/yusinto/c4c6a8f376a36f600ddb0f1f24c952df.js\"></script>\n<p>Stitch it so that business details are coming from a remote graphql server, in this case from <a href=\"https://eu1.prisma.sh/public-nickelwarrior-830/wendarie-prisma/dev\" target=\"_blank\" rel=\"nofollow\">prisma</a>.</p>\n<h2>Step 1: Install graphql-cli</h2>\n<p>We'll use graphql cli to download the remote schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D graphql-cli</code></pre>\n      </div>\n<h2>Step 2: Download the remote schema</h2>\n<p>Graphql cli looks for a .graphqlconfig.yml by default, so we'll create that file\nand it looks like this:</p>\n<script src=\"https://gist.github.com/yusinto/7cfbeeac5e0b6a35dde44a72e5e1a268.js\"></script>\n<p>In this example, our business details are hosted in <a href=\"https://eu1.prisma.sh/public-nickelwarrior-830/wendarie-prisma/dev\" target=\"_blank\" rel=\"nofollow\">prisma</a>\nbut you can use any graphql endpoint. <a href=\"https://prisma.io\" target=\"_blank\" rel=\"nofollow\">Prisma</a> is created by the guys from\ngraphcool, check it out if you haven't!</p>\n<p>Run the following to download the remote schema to ./remote.schema.graphql:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">graphql get-schema</code></pre>\n      </div>\n<h2>Step 3: Stitch</h2>\n<p>The stitching part is standard, following <a href=\"https://www.apollographql.com/docs/graphql-tools/schema-stitching.html\" target=\"_blank\" rel=\"nofollow\">Apollo's doco</a>:</p>\n<script src=\"https://gist.github.com/yusinto/9ab425fc0a100f81c183e824f1405b57.js\"></script>\n<p><strong>Important bits</strong>:</p>\n<ul>\n<li>\n<p>Line 11: Import the remote schema we downloaded from step 2 using graphql-import. This gets\nfed into makeRemoteExecutableSchema.</p>\n</li>\n<li>\n<p>Line 14: Use apollo-link to resolve remote queries! If you look at the documentation, there is\na second option of using a fetcher. However doing this will forward the Document AST\nto the remote server instead of the query string, which breaks most graphql servers except\napollo-server.</p>\n</li>\n<li>\n<p>Line 20: Extend the Place type to include a reference to Business, which will be resolved to\nthe remote server via mergeSchemas in line 29.</p>\n</li>\n<li>\n<p>Line 29: This defines the resolver for the business field. The key here is the <code class=\"language-text\">delegateToSchema</code>\nmethod which gives you access to the current <code class=\"language-text\">Place</code> being queried based on the fragment defined\nin line 30, and access to the remote schema so you can query the remote server with any queries\nyou want. In this instance, the query we want to execute on prisma is equivalent to:</p>\n</li>\n</ul>\n<script src=\"https://gist.github.com/yusinto/650e2f21fc82d8e5e07577a9683e0e76.js\"></script>\n<h2>Step 4: Compile</h2>\n<p>Say we have a relay query like so:</p>\n<script src=\"https://gist.github.com/yusinto/44be0c2447ceb723197e3a9bbf2894c9.js\"></script>\n<p>We'll compile our relay queries using <a href=\"https://github.com/yusinto/relay-compiler-plus\" target=\"_blank\" rel=\"nofollow\">relay-compiler-plus</a>.\nThis way we'll get schema stitching plus persisted queries for free! You can still use the standard relay-compiler,\nbut you won't get persisted queries (not yet anyway. I have submitted a <a href=\"https://github.com/facebook/relay/pull/2354\" target=\"_blank\" rel=\"nofollow\">pr</a>)\nand you can't compile directly from graphql-js.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D relay-compiler-plus</code></pre>\n      </div>\n<p>Add the following npm command to your package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">&quot;rcp&quot;: &quot;relay-compiler-plus --webpackConfig path/to/webpack.config.js --src src&quot;,</code></pre>\n      </div>\n<p>Ensure the webpack entry is pointing to mergedSchema.js from step 3. Then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">npm run rcp</code></pre>\n      </div>\n<p>This should produce the standard relay query files plus a queryMap.json file under src. You'll see in queryMap.json that\nthe remote query exists as if it's local!</p>\n<h2>Conclusion</h2>\n<p>It is possible to use relay and schema stitching. It is surprisingly straight forward thanks to the tools provided\nby Apollo. It is impossible to document every single step in this blog without boring everyone to death. People don't read\nblogs more than 4 mins long these days... so perhaps it's best to see it in action. </p>\n<p>Check out the full project on <a href=\"https://github.com/yusinto/relay-compiler-plus/tree/master/example-stitching\" target=\"_blank\" rel=\"nofollow\">github</a>.</p>\n<p>Happy stitching!</p>\n<p><img src=\"/assets/images/loui-stitch.jpg\" alt=\"Loui stitch?\"></p>\n<hr>","timeToRead":3,"frontmatter":{"date":"27 April 2018","path":"/relay-schema-stitching","title":"Relay Schema Stitching with Pesisted Queries","files":[{"name":"loui-stitch","publicURL":"/static/loui-stitch-c058c54d16587be41ae99fcbe6003743.jpg"}],"tags":["relay","schema","stitching","graphql","apollo","react","js","javascript","prisma","graphcool","persisted","queries"]}}},"pageContext":{}}