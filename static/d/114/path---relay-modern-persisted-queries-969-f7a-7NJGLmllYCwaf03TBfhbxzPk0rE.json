{"data":{"markdownRemark":{"html":"<p>Relay modern is awesome, but unfortunately not much has been documented about how to use it with ssr. Facebook\ndoes not use ssr with relay modern so it's up to the community to do something about it. When I say community it's\nreally just one man Jimmy Chia aka taion who has single-handedly written found router, farce and found relay to\nmake ssr possible with relay modern.</p>\n<p>If you are using react-router, you're out of luck. You'll need to jump the cliff and swap it out with found. I have\ndone it and I never look back. Found is very similar to react router v3, so you won't have any problems switching.</p>\n<h2>Goal</h2>\n<p>Create a relay modern app with ssr with found and found relay.</p>\n<h2>Step 1: Install npm packages</h2>\n<p>Install babel-polyfill (for async await), found and found relay</p>\n<h2>Step 2: Create routes</h2>\n<p>create routes, makeRouteConfig, export that routeConfig object.\ncreateBrowserRouter using routeConfig object.</p>\n<h2>Step 3: SSR</h2>\n<p>use the same routes object\non the client bootstrap use createInitialBrowserRouter instead and await on that\nu also need createRender function (TODO: investigate why?) </p>\n<p>On the server, await getFarceResult from found/lib/server passing in url, routeConfig and\nrender method to get the output data from the requested route.</p>\n<p>Then renderToString the element property from the output. That's it!</p>\n<p>Without redux, it's soo much cleaner! </p>\n<p>Install relay-compiler-plus and the latest <a href=\"https://github.com/graphql/graphql-js\" target=\"_blank\" rel=\"nofollow\">graphql-js</a>{:target=\"_blank\"} package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">yarn add relay-compiler-plus</code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">yarn upgrade graphql --latest</code></pre>\n      </div>\n<h2>Step 2: Compile</h2>\n<p>Add this npm command to your <strong>package.json</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"rcp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"relay-compiler-plus --schema &lt;SCHEMA_FILE_PATH> --src &lt;SRC_DIR_PATH> -f\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n      </div>\n<p>where:<br/>\n<code class=\"language-text\">&lt;SCHEMA_FILE_PATH&gt;</code> is the path to your schema.graphql or schema.json file<br/>\n<code class=\"language-text\">&lt;SRC_DIR_PATH&gt;</code> is the path to your src directory<br/>\n<code class=\"language-text\">-f</code> will delete all <code class=\"language-text\">**/__generated__/*.graphql.js</code> files under <code class=\"language-text\">SRC_DIR_PATH</code> before compilation starts<br/></p>\n<p>Run the command to start compiling:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run <span class=\"token function\">rcp</span></code></pre>\n      </div>\n<h2>Step 3: Map query ids on the server</h2>\n<p>On the server, use <code class=\"language-text\">matchQueryMiddleware</code> prior to <code class=\"language-text\">express-graphql</code> to match query ids to actual queries. Note\nthat <code class=\"language-text\">queryMap.json</code> is auto-generated by <code class=\"language-text\">relay-compiler-plus</code> in the previous step.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> expressGraphl <span class=\"token keyword\">from</span> <span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>matchQueryMiddleware<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'relay-compiler-plus'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// do this</span>\n<span class=\"token keyword\">import</span> queryMapJson <span class=\"token keyword\">from</span> <span class=\"token string\">'../queryMap.json'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// do this</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">Express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">matchQueryMiddleware</span><span class=\"token punctuation\">(</span>queryMapJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// do this</span>\n  <span class=\"token function\">expressGraphl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    schema<span class=\"token punctuation\">:</span> graphqlSchema<span class=\"token punctuation\">,</span>\n    graphiql<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2>Step 4: Send query ids on the client</h2>\n<p>On the client, modify your relay network fetch implementation to pass a <code class=\"language-text\">queryId</code> parameter in the\nrequest body instead of a <code class=\"language-text\">query</code> parameter. Note that <code class=\"language-text\">operation.id</code> is generated by <code class=\"language-text\">relay-compiler-plus</code> in step 2.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fetchQuery</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'content-type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      queryId<span class=\"token punctuation\">:</span> operation<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// do this</span>\n      variables<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h2>Bonus</h2>\n<p>In <a href=\"#step-2-compile\">step 2</a>, running relay-compiler-plus generates relay query files like the original relay-compiler,\nbut with a difference. Inspect a generated <code class=\"language-text\">ConcreteBatch</code> query file and you'll see that it now has an <code class=\"language-text\">id</code> assigned\nto it and that the query <code class=\"language-text\">text</code> is now <code class=\"language-text\">null</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> batch <span class=\"token comment\">/*: ConcreteBatch*/</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"fragment\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"argumentDefinitions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"kind\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Fragment\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"metadata\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"client_index_Query\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"selections\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Query\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"6082095e8a45f64d38924775d047cf8c\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// look ma, query id!</span>\n  <span class=\"token string\">\"kind\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Batch\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"metadata\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"client_index_Query\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// look again ma, null query text!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>The id is an md5 hash of the query text, generated by the <a href=\"https://github.com/yusinto/relay-compiler-plus/blob/master/src/compiler/main.js\" target=\"_blank\" rel=\"nofollow\">persistQuery</a>{:target=\"_blank\"}\nfunction. It looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">persistQuery</span><span class=\"token punctuation\">(</span>operationText<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> queryId <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span>operationText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n     <span class=\"token comment\">// queryCache is written to disk at the end as queryMap.json</span>\n     queryCache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> queryId<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">:</span> operationText<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>queryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>   </code></pre>\n      </div>\n<p>As you can see above, the hash to query text mapping is saved to an array which gets written to disk\nat the end of the compilation as queryMap.json. This is used on the server side as outlined in\n<a href=\"#step-3-map-query-ids-on-the-server\">step 3</a>.</p>\n<h2>Conclusion</h2>\n<p>You can find the package at <a href=\"https://github.com/yusinto/relay-compiler-plus\" target=\"_blank\" rel=\"nofollow\">github</a>{:target=\"<em>blank\"} with a fully working\n<a href=\"https://github.com/yusinto/relay-compiler-plus/tree/master/example\" target=\"_blank\" rel=\"nofollow\">example</a>{:target=\"</em>blank\"}. </p>\n<p>Let me know if this is useful (or not)! </p>\n<hr>","timeToRead":4,"frontmatter":{"date":"January 09, 2018","path":"/relay-modern-persisted-queries","title":"Relay Modern Server Side Rendering","files":null,"tags":["relay","modern","ssr","server","side","rendering","redux"]}}},"pageContext":{}}